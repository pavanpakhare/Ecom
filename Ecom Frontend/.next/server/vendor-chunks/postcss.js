"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/postcss";
exports.ids = ["vendor-chunks/postcss"];
exports.modules = {

/***/ "(ssr)/./node_modules/postcss/lib/at-rule.js":
/*!*********************************************!*\
  !*** ./node_modules/postcss/lib/at-rule.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet Container = __webpack_require__(/*! ./container */ \"(ssr)/./node_modules/postcss/lib/container.js\");\nclass AtRule extends Container {\n    constructor(defaults){\n        super(defaults);\n        this.type = \"atrule\";\n    }\n    append(...children) {\n        if (!this.proxyOf.nodes) this.nodes = [];\n        return super.append(...children);\n    }\n    prepend(...children) {\n        if (!this.proxyOf.nodes) this.nodes = [];\n        return super.prepend(...children);\n    }\n}\nmodule.exports = AtRule;\nAtRule.default = AtRule;\nContainer.registerAtRule(AtRule);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvYXQtcnVsZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLFlBQVlDLG1CQUFPQSxDQUFDO0FBRXhCLE1BQU1DLGVBQWVGO0lBQ25CRyxZQUFZQyxRQUFRLENBQUU7UUFDcEIsS0FBSyxDQUFDQTtRQUNOLElBQUksQ0FBQ0MsSUFBSSxHQUFHO0lBQ2Q7SUFFQUMsT0FBTyxHQUFHQyxRQUFRLEVBQUU7UUFDbEIsSUFBSSxDQUFDLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxLQUFLLEVBQUUsSUFBSSxDQUFDQSxLQUFLLEdBQUcsRUFBRTtRQUN4QyxPQUFPLEtBQUssQ0FBQ0gsVUFBVUM7SUFDekI7SUFFQUcsUUFBUSxHQUFHSCxRQUFRLEVBQUU7UUFDbkIsSUFBSSxDQUFDLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxLQUFLLEVBQUUsSUFBSSxDQUFDQSxLQUFLLEdBQUcsRUFBRTtRQUN4QyxPQUFPLEtBQUssQ0FBQ0MsV0FBV0g7SUFDMUI7QUFDRjtBQUVBSSxPQUFPQyxPQUFPLEdBQUdWO0FBQ2pCQSxPQUFPVyxPQUFPLEdBQUdYO0FBRWpCRixVQUFVYyxjQUFjLENBQUNaIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWNvbS8uL25vZGVfbW9kdWxlcy9wb3N0Y3NzL2xpYi9hdC1ydWxlLmpzP2NlZjUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmxldCBDb250YWluZXIgPSByZXF1aXJlKCcuL2NvbnRhaW5lcicpXG5cbmNsYXNzIEF0UnVsZSBleHRlbmRzIENvbnRhaW5lciB7XG4gIGNvbnN0cnVjdG9yKGRlZmF1bHRzKSB7XG4gICAgc3VwZXIoZGVmYXVsdHMpXG4gICAgdGhpcy50eXBlID0gJ2F0cnVsZSdcbiAgfVxuXG4gIGFwcGVuZCguLi5jaGlsZHJlbikge1xuICAgIGlmICghdGhpcy5wcm94eU9mLm5vZGVzKSB0aGlzLm5vZGVzID0gW11cbiAgICByZXR1cm4gc3VwZXIuYXBwZW5kKC4uLmNoaWxkcmVuKVxuICB9XG5cbiAgcHJlcGVuZCguLi5jaGlsZHJlbikge1xuICAgIGlmICghdGhpcy5wcm94eU9mLm5vZGVzKSB0aGlzLm5vZGVzID0gW11cbiAgICByZXR1cm4gc3VwZXIucHJlcGVuZCguLi5jaGlsZHJlbilcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEF0UnVsZVxuQXRSdWxlLmRlZmF1bHQgPSBBdFJ1bGVcblxuQ29udGFpbmVyLnJlZ2lzdGVyQXRSdWxlKEF0UnVsZSlcbiJdLCJuYW1lcyI6WyJDb250YWluZXIiLCJyZXF1aXJlIiwiQXRSdWxlIiwiY29uc3RydWN0b3IiLCJkZWZhdWx0cyIsInR5cGUiLCJhcHBlbmQiLCJjaGlsZHJlbiIsInByb3h5T2YiLCJub2RlcyIsInByZXBlbmQiLCJtb2R1bGUiLCJleHBvcnRzIiwiZGVmYXVsdCIsInJlZ2lzdGVyQXRSdWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/at-rule.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/comment.js":
/*!*********************************************!*\
  !*** ./node_modules/postcss/lib/comment.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet Node = __webpack_require__(/*! ./node */ \"(ssr)/./node_modules/postcss/lib/node.js\");\nclass Comment extends Node {\n    constructor(defaults){\n        super(defaults);\n        this.type = \"comment\";\n    }\n}\nmodule.exports = Comment;\nComment.default = Comment;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvY29tbWVudC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLE9BQU9DLG1CQUFPQSxDQUFDO0FBRW5CLE1BQU1DLGdCQUFnQkY7SUFDcEJHLFlBQVlDLFFBQVEsQ0FBRTtRQUNwQixLQUFLLENBQUNBO1FBQ04sSUFBSSxDQUFDQyxJQUFJLEdBQUc7SUFDZDtBQUNGO0FBRUFDLE9BQU9DLE9BQU8sR0FBR0w7QUFDakJBLFFBQVFNLE9BQU8sR0FBR04iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lY29tLy4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MvbGliL2NvbW1lbnQuanM/M2Y4MyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubGV0IE5vZGUgPSByZXF1aXJlKCcuL25vZGUnKVxuXG5jbGFzcyBDb21tZW50IGV4dGVuZHMgTm9kZSB7XG4gIGNvbnN0cnVjdG9yKGRlZmF1bHRzKSB7XG4gICAgc3VwZXIoZGVmYXVsdHMpXG4gICAgdGhpcy50eXBlID0gJ2NvbW1lbnQnXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDb21tZW50XG5Db21tZW50LmRlZmF1bHQgPSBDb21tZW50XG4iXSwibmFtZXMiOlsiTm9kZSIsInJlcXVpcmUiLCJDb21tZW50IiwiY29uc3RydWN0b3IiLCJkZWZhdWx0cyIsInR5cGUiLCJtb2R1bGUiLCJleHBvcnRzIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/comment.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/container.js":
/*!***********************************************!*\
  !*** ./node_modules/postcss/lib/container.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet { isClean, my } = __webpack_require__(/*! ./symbols */ \"(ssr)/./node_modules/postcss/lib/symbols.js\");\nlet Declaration = __webpack_require__(/*! ./declaration */ \"(ssr)/./node_modules/postcss/lib/declaration.js\");\nlet Comment = __webpack_require__(/*! ./comment */ \"(ssr)/./node_modules/postcss/lib/comment.js\");\nlet Node = __webpack_require__(/*! ./node */ \"(ssr)/./node_modules/postcss/lib/node.js\");\nlet parse, Rule, AtRule, Root;\nfunction cleanSource(nodes) {\n    return nodes.map((i)=>{\n        if (i.nodes) i.nodes = cleanSource(i.nodes);\n        delete i.source;\n        return i;\n    });\n}\nfunction markDirtyUp(node) {\n    node[isClean] = false;\n    if (node.proxyOf.nodes) {\n        for (let i of node.proxyOf.nodes){\n            markDirtyUp(i);\n        }\n    }\n}\nclass Container extends Node {\n    append(...children) {\n        for (let child of children){\n            let nodes = this.normalize(child, this.last);\n            for (let node of nodes)this.proxyOf.nodes.push(node);\n        }\n        this.markDirty();\n        return this;\n    }\n    cleanRaws(keepBetween) {\n        super.cleanRaws(keepBetween);\n        if (this.nodes) {\n            for (let node of this.nodes)node.cleanRaws(keepBetween);\n        }\n    }\n    each(callback) {\n        if (!this.proxyOf.nodes) return undefined;\n        let iterator = this.getIterator();\n        let index, result;\n        while(this.indexes[iterator] < this.proxyOf.nodes.length){\n            index = this.indexes[iterator];\n            result = callback(this.proxyOf.nodes[index], index);\n            if (result === false) break;\n            this.indexes[iterator] += 1;\n        }\n        delete this.indexes[iterator];\n        return result;\n    }\n    every(condition) {\n        return this.nodes.every(condition);\n    }\n    getIterator() {\n        if (!this.lastEach) this.lastEach = 0;\n        if (!this.indexes) this.indexes = {};\n        this.lastEach += 1;\n        let iterator = this.lastEach;\n        this.indexes[iterator] = 0;\n        return iterator;\n    }\n    getProxyProcessor() {\n        return {\n            get (node, prop) {\n                if (prop === \"proxyOf\") {\n                    return node;\n                } else if (!node[prop]) {\n                    return node[prop];\n                } else if (prop === \"each\" || typeof prop === \"string\" && prop.startsWith(\"walk\")) {\n                    return (...args)=>{\n                        return node[prop](...args.map((i)=>{\n                            if (typeof i === \"function\") {\n                                return (child, index)=>i(child.toProxy(), index);\n                            } else {\n                                return i;\n                            }\n                        }));\n                    };\n                } else if (prop === \"every\" || prop === \"some\") {\n                    return (cb)=>{\n                        return node[prop]((child, ...other)=>cb(child.toProxy(), ...other));\n                    };\n                } else if (prop === \"root\") {\n                    return ()=>node.root().toProxy();\n                } else if (prop === \"nodes\") {\n                    return node.nodes.map((i)=>i.toProxy());\n                } else if (prop === \"first\" || prop === \"last\") {\n                    return node[prop].toProxy();\n                } else {\n                    return node[prop];\n                }\n            },\n            set (node, prop, value) {\n                if (node[prop] === value) return true;\n                node[prop] = value;\n                if (prop === \"name\" || prop === \"params\" || prop === \"selector\") {\n                    node.markDirty();\n                }\n                return true;\n            }\n        };\n    }\n    index(child) {\n        if (typeof child === \"number\") return child;\n        if (child.proxyOf) child = child.proxyOf;\n        return this.proxyOf.nodes.indexOf(child);\n    }\n    insertAfter(exist, add) {\n        let existIndex = this.index(exist);\n        let nodes = this.normalize(add, this.proxyOf.nodes[existIndex]).reverse();\n        existIndex = this.index(exist);\n        for (let node of nodes)this.proxyOf.nodes.splice(existIndex + 1, 0, node);\n        let index;\n        for(let id in this.indexes){\n            index = this.indexes[id];\n            if (existIndex < index) {\n                this.indexes[id] = index + nodes.length;\n            }\n        }\n        this.markDirty();\n        return this;\n    }\n    insertBefore(exist, add) {\n        let existIndex = this.index(exist);\n        let type = existIndex === 0 ? \"prepend\" : false;\n        let nodes = this.normalize(add, this.proxyOf.nodes[existIndex], type).reverse();\n        existIndex = this.index(exist);\n        for (let node of nodes)this.proxyOf.nodes.splice(existIndex, 0, node);\n        let index;\n        for(let id in this.indexes){\n            index = this.indexes[id];\n            if (existIndex <= index) {\n                this.indexes[id] = index + nodes.length;\n            }\n        }\n        this.markDirty();\n        return this;\n    }\n    normalize(nodes, sample) {\n        if (typeof nodes === \"string\") {\n            nodes = cleanSource(parse(nodes).nodes);\n        } else if (Array.isArray(nodes)) {\n            nodes = nodes.slice(0);\n            for (let i of nodes){\n                if (i.parent) i.parent.removeChild(i, \"ignore\");\n            }\n        } else if (nodes.type === \"root\" && this.type !== \"document\") {\n            nodes = nodes.nodes.slice(0);\n            for (let i of nodes){\n                if (i.parent) i.parent.removeChild(i, \"ignore\");\n            }\n        } else if (nodes.type) {\n            nodes = [\n                nodes\n            ];\n        } else if (nodes.prop) {\n            if (typeof nodes.value === \"undefined\") {\n                throw new Error(\"Value field is missed in node creation\");\n            } else if (typeof nodes.value !== \"string\") {\n                nodes.value = String(nodes.value);\n            }\n            nodes = [\n                new Declaration(nodes)\n            ];\n        } else if (nodes.selector) {\n            nodes = [\n                new Rule(nodes)\n            ];\n        } else if (nodes.name) {\n            nodes = [\n                new AtRule(nodes)\n            ];\n        } else if (nodes.text) {\n            nodes = [\n                new Comment(nodes)\n            ];\n        } else {\n            throw new Error(\"Unknown node type in node creation\");\n        }\n        let processed = nodes.map((i)=>{\n            /* c8 ignore next */ if (!i[my]) Container.rebuild(i);\n            i = i.proxyOf;\n            if (i.parent) i.parent.removeChild(i);\n            if (i[isClean]) markDirtyUp(i);\n            if (typeof i.raws.before === \"undefined\") {\n                if (sample && typeof sample.raws.before !== \"undefined\") {\n                    i.raws.before = sample.raws.before.replace(/\\S/g, \"\");\n                }\n            }\n            i.parent = this.proxyOf;\n            return i;\n        });\n        return processed;\n    }\n    prepend(...children) {\n        children = children.reverse();\n        for (let child of children){\n            let nodes = this.normalize(child, this.first, \"prepend\").reverse();\n            for (let node of nodes)this.proxyOf.nodes.unshift(node);\n            for(let id in this.indexes){\n                this.indexes[id] = this.indexes[id] + nodes.length;\n            }\n        }\n        this.markDirty();\n        return this;\n    }\n    push(child) {\n        child.parent = this;\n        this.proxyOf.nodes.push(child);\n        return this;\n    }\n    removeAll() {\n        for (let node of this.proxyOf.nodes)node.parent = undefined;\n        this.proxyOf.nodes = [];\n        this.markDirty();\n        return this;\n    }\n    removeChild(child) {\n        child = this.index(child);\n        this.proxyOf.nodes[child].parent = undefined;\n        this.proxyOf.nodes.splice(child, 1);\n        let index;\n        for(let id in this.indexes){\n            index = this.indexes[id];\n            if (index >= child) {\n                this.indexes[id] = index - 1;\n            }\n        }\n        this.markDirty();\n        return this;\n    }\n    replaceValues(pattern, opts, callback) {\n        if (!callback) {\n            callback = opts;\n            opts = {};\n        }\n        this.walkDecls((decl)=>{\n            if (opts.props && !opts.props.includes(decl.prop)) return;\n            if (opts.fast && !decl.value.includes(opts.fast)) return;\n            decl.value = decl.value.replace(pattern, callback);\n        });\n        this.markDirty();\n        return this;\n    }\n    some(condition) {\n        return this.nodes.some(condition);\n    }\n    walk(callback) {\n        return this.each((child, i)=>{\n            let result;\n            try {\n                result = callback(child, i);\n            } catch (e) {\n                throw child.addToError(e);\n            }\n            if (result !== false && child.walk) {\n                result = child.walk(callback);\n            }\n            return result;\n        });\n    }\n    walkAtRules(name, callback) {\n        if (!callback) {\n            callback = name;\n            return this.walk((child, i)=>{\n                if (child.type === \"atrule\") {\n                    return callback(child, i);\n                }\n            });\n        }\n        if (name instanceof RegExp) {\n            return this.walk((child, i)=>{\n                if (child.type === \"atrule\" && name.test(child.name)) {\n                    return callback(child, i);\n                }\n            });\n        }\n        return this.walk((child, i)=>{\n            if (child.type === \"atrule\" && child.name === name) {\n                return callback(child, i);\n            }\n        });\n    }\n    walkComments(callback) {\n        return this.walk((child, i)=>{\n            if (child.type === \"comment\") {\n                return callback(child, i);\n            }\n        });\n    }\n    walkDecls(prop, callback) {\n        if (!callback) {\n            callback = prop;\n            return this.walk((child, i)=>{\n                if (child.type === \"decl\") {\n                    return callback(child, i);\n                }\n            });\n        }\n        if (prop instanceof RegExp) {\n            return this.walk((child, i)=>{\n                if (child.type === \"decl\" && prop.test(child.prop)) {\n                    return callback(child, i);\n                }\n            });\n        }\n        return this.walk((child, i)=>{\n            if (child.type === \"decl\" && child.prop === prop) {\n                return callback(child, i);\n            }\n        });\n    }\n    walkRules(selector, callback) {\n        if (!callback) {\n            callback = selector;\n            return this.walk((child, i)=>{\n                if (child.type === \"rule\") {\n                    return callback(child, i);\n                }\n            });\n        }\n        if (selector instanceof RegExp) {\n            return this.walk((child, i)=>{\n                if (child.type === \"rule\" && selector.test(child.selector)) {\n                    return callback(child, i);\n                }\n            });\n        }\n        return this.walk((child, i)=>{\n            if (child.type === \"rule\" && child.selector === selector) {\n                return callback(child, i);\n            }\n        });\n    }\n    get first() {\n        if (!this.proxyOf.nodes) return undefined;\n        return this.proxyOf.nodes[0];\n    }\n    get last() {\n        if (!this.proxyOf.nodes) return undefined;\n        return this.proxyOf.nodes[this.proxyOf.nodes.length - 1];\n    }\n}\nContainer.registerParse = (dependant)=>{\n    parse = dependant;\n};\nContainer.registerRule = (dependant)=>{\n    Rule = dependant;\n};\nContainer.registerAtRule = (dependant)=>{\n    AtRule = dependant;\n};\nContainer.registerRoot = (dependant)=>{\n    Root = dependant;\n};\nmodule.exports = Container;\nContainer.default = Container;\n/* c8 ignore start */ Container.rebuild = (node)=>{\n    if (node.type === \"atrule\") {\n        Object.setPrototypeOf(node, AtRule.prototype);\n    } else if (node.type === \"rule\") {\n        Object.setPrototypeOf(node, Rule.prototype);\n    } else if (node.type === \"decl\") {\n        Object.setPrototypeOf(node, Declaration.prototype);\n    } else if (node.type === \"comment\") {\n        Object.setPrototypeOf(node, Comment.prototype);\n    } else if (node.type === \"root\") {\n        Object.setPrototypeOf(node, Root.prototype);\n    }\n    node[my] = true;\n    if (node.nodes) {\n        node.nodes.forEach((child)=>{\n            Container.rebuild(child);\n        });\n    }\n} /* c8 ignore stop */ ;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvY29udGFpbmVyLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSSxFQUFFQSxPQUFPLEVBQUVDLEVBQUUsRUFBRSxHQUFHQyxtQkFBT0EsQ0FBQztBQUM5QixJQUFJQyxjQUFjRCxtQkFBT0EsQ0FBQztBQUMxQixJQUFJRSxVQUFVRixtQkFBT0EsQ0FBQztBQUN0QixJQUFJRyxPQUFPSCxtQkFBT0EsQ0FBQztBQUVuQixJQUFJSSxPQUFPQyxNQUFNQyxRQUFRQztBQUV6QixTQUFTQyxZQUFZQyxLQUFLO0lBQ3hCLE9BQU9BLE1BQU1DLEdBQUcsQ0FBQ0MsQ0FBQUE7UUFDZixJQUFJQSxFQUFFRixLQUFLLEVBQUVFLEVBQUVGLEtBQUssR0FBR0QsWUFBWUcsRUFBRUYsS0FBSztRQUMxQyxPQUFPRSxFQUFFQyxNQUFNO1FBQ2YsT0FBT0Q7SUFDVDtBQUNGO0FBRUEsU0FBU0UsWUFBWUMsSUFBSTtJQUN2QkEsSUFBSSxDQUFDaEIsUUFBUSxHQUFHO0lBQ2hCLElBQUlnQixLQUFLQyxPQUFPLENBQUNOLEtBQUssRUFBRTtRQUN0QixLQUFLLElBQUlFLEtBQUtHLEtBQUtDLE9BQU8sQ0FBQ04sS0FBSyxDQUFFO1lBQ2hDSSxZQUFZRjtRQUNkO0lBQ0Y7QUFDRjtBQUVBLE1BQU1LLGtCQUFrQmI7SUFDdEJjLE9BQU8sR0FBR0MsUUFBUSxFQUFFO1FBQ2xCLEtBQUssSUFBSUMsU0FBU0QsU0FBVTtZQUMxQixJQUFJVCxRQUFRLElBQUksQ0FBQ1csU0FBUyxDQUFDRCxPQUFPLElBQUksQ0FBQ0UsSUFBSTtZQUMzQyxLQUFLLElBQUlQLFFBQVFMLE1BQU8sSUFBSSxDQUFDTSxPQUFPLENBQUNOLEtBQUssQ0FBQ2EsSUFBSSxDQUFDUjtRQUNsRDtRQUVBLElBQUksQ0FBQ1MsU0FBUztRQUVkLE9BQU8sSUFBSTtJQUNiO0lBRUFDLFVBQVVDLFdBQVcsRUFBRTtRQUNyQixLQUFLLENBQUNELFVBQVVDO1FBQ2hCLElB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T29HLFNBQVM7SUFDOUMsT0FBTyxJQUFJNUYsS0FBSzRDLElBQUksS0FBSyxRQUFRO1FBQy9COEMsT0FBT0MsY0FBYyxDQUFDM0YsTUFBTVQsS0FBS3FHLFNBQVM7SUFDNUMsT0FBTyxJQUFJNUYsS0FBSzRDLElBQUksS0FBSyxRQUFRO1FBQy9COEMsT0FBT0MsY0FBYyxDQUFDM0YsTUFBTWIsWUFBWXlHLFNBQVM7SUFDbkQsT0FBTyxJQUFJNUYsS0FBSzRDLElBQUksS0FBSyxXQUFXO1FBQ2xDOEMsT0FBT0MsY0FBYyxDQUFDM0YsTUFBTVosUUFBUXdHLFNBQVM7SUFDL0MsT0FBTyxJQUFJNUYsS0FBSzRDLElBQUksS0FBSyxRQUFRO1FBQy9COEMsT0FBT0MsY0FBYyxDQUFDM0YsTUFBTVAsS0FBS21HLFNBQVM7SUFDNUM7SUFFQTVGLElBQUksQ0FBQ2YsR0FBRyxHQUFHO0lBRVgsSUFBSWUsS0FBS0wsS0FBSyxFQUFFO1FBQ2RLLEtBQUtMLEtBQUssQ0FBQ2tHLE9BQU8sQ0FBQ3hGLENBQUFBO1lBQ2pCSCxVQUFVdUQsT0FBTyxDQUFDcEQ7UUFDcEI7SUFDRjtBQUNGLEVBQ0Esa0JBQWtCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWNvbS8uL25vZGVfbW9kdWxlcy9wb3N0Y3NzL2xpYi9jb250YWluZXIuanM/NzllNSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubGV0IHsgaXNDbGVhbiwgbXkgfSA9IHJlcXVpcmUoJy4vc3ltYm9scycpXG5sZXQgRGVjbGFyYXRpb24gPSByZXF1aXJlKCcuL2RlY2xhcmF0aW9uJylcbmxldCBDb21tZW50ID0gcmVxdWlyZSgnLi9jb21tZW50JylcbmxldCBOb2RlID0gcmVxdWlyZSgnLi9ub2RlJylcblxubGV0IHBhcnNlLCBSdWxlLCBBdFJ1bGUsIFJvb3RcblxuZnVuY3Rpb24gY2xlYW5Tb3VyY2Uobm9kZXMpIHtcbiAgcmV0dXJuIG5vZGVzLm1hcChpID0+IHtcbiAgICBpZiAoaS5ub2RlcykgaS5ub2RlcyA9IGNsZWFuU291cmNlKGkubm9kZXMpXG4gICAgZGVsZXRlIGkuc291cmNlXG4gICAgcmV0dXJuIGlcbiAgfSlcbn1cblxuZnVuY3Rpb24gbWFya0RpcnR5VXAobm9kZSkge1xuICBub2RlW2lzQ2xlYW5dID0gZmFsc2VcbiAgaWYgKG5vZGUucHJveHlPZi5ub2Rlcykge1xuICAgIGZvciAobGV0IGkgb2Ygbm9kZS5wcm94eU9mLm5vZGVzKSB7XG4gICAgICBtYXJrRGlydHlVcChpKVxuICAgIH1cbiAgfVxufVxuXG5jbGFzcyBDb250YWluZXIgZXh0ZW5kcyBOb2RlIHtcbiAgYXBwZW5kKC4uLmNoaWxkcmVuKSB7XG4gICAgZm9yIChsZXQgY2hpbGQgb2YgY2hpbGRyZW4pIHtcbiAgICAgIGxldCBub2RlcyA9IHRoaXMubm9ybWFsaXplKGNoaWxkLCB0aGlzLmxhc3QpXG4gICAgICBmb3IgKGxldCBub2RlIG9mIG5vZGVzKSB0aGlzLnByb3h5T2Yubm9kZXMucHVzaChub2RlKVxuICAgIH1cblxuICAgIHRoaXMubWFya0RpcnR5KClcblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBjbGVhblJhd3Moa2VlcEJldHdlZW4pIHtcbiAgICBzdXBlci5jbGVhblJhd3Moa2VlcEJldHdlZW4pXG4gICAgaWYgKHRoaXMubm9kZXMpIHtcbiAgICAgIGZvciAobGV0IG5vZGUgb2YgdGhpcy5ub2Rlcykgbm9kZS5jbGVhblJhd3Moa2VlcEJldHdlZW4pXG4gICAgfVxuICB9XG5cbiAgZWFjaChjYWxsYmFjaykge1xuICAgIGlmICghdGhpcy5wcm94eU9mLm5vZGVzKSByZXR1cm4gdW5kZWZpbmVkXG4gICAgbGV0IGl0ZXJhdG9yID0gdGhpcy5nZXRJdGVyYXRvcigpXG5cbiAgICBsZXQgaW5kZXgsIHJlc3VsdFxuICAgIHdoaWxlICh0aGlzLmluZGV4ZXNbaXRlcmF0b3JdIDwgdGhpcy5wcm94eU9mLm5vZGVzLmxlbmd0aCkge1xuICAgICAgaW5kZXggPSB0aGlzLmluZGV4ZXNbaXRlcmF0b3JdXG4gICAgICByZXN1bHQgPSBjYWxsYmFjayh0aGlzLnByb3h5T2Yubm9kZXNbaW5kZXhdLCBpbmRleClcbiAgICAgIGlmIChyZXN1bHQgPT09IGZhbHNlKSBicmVha1xuXG4gICAgICB0aGlzLmluZGV4ZXNbaXRlcmF0b3JdICs9IDFcbiAgICB9XG5cbiAgICBkZWxldGUgdGhpcy5pbmRleGVzW2l0ZXJhdG9yXVxuICAgIHJldHVybiByZXN1bHRcbiAgfVxuXG4gIGV2ZXJ5KGNvbmRpdGlvbikge1xuICAgIHJldHVybiB0aGlzLm5vZGVzLmV2ZXJ5KGNvbmRpdGlvbilcbiAgfVxuXG4gIGdldEl0ZXJhdG9yKCkge1xuICAgIGlmICghdGhpcy5sYXN0RWFjaCkgdGhpcy5sYXN0RWFjaCA9IDBcbiAgICBpZiAoIXRoaXMuaW5kZXhlcykgdGhpcy5pbmRleGVzID0ge31cblxuICAgIHRoaXMubGFzdEVhY2ggKz0gMVxuICAgIGxldCBpdGVyYXRvciA9IHRoaXMubGFzdEVhY2hcbiAgICB0aGlzLmluZGV4ZXNbaXRlcmF0b3JdID0gMFxuXG4gICAgcmV0dXJuIGl0ZXJhdG9yXG4gIH1cblxuICBnZXRQcm94eVByb2Nlc3NvcigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZ2V0KG5vZGUsIHByb3ApIHtcbiAgICAgICAgaWYgKHByb3AgPT09ICdwcm94eU9mJykge1xuICAgICAgICAgIHJldHVybiBub2RlXG4gICAgICAgIH0gZWxzZSBpZiAoIW5vZGVbcHJvcF0pIHtcbiAgICAgICAgICByZXR1cm4gbm9kZVtwcm9wXVxuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIHByb3AgPT09ICdlYWNoJyB8fFxuICAgICAgICAgICh0eXBlb2YgcHJvcCA9PT0gJ3N0cmluZycgJiYgcHJvcC5zdGFydHNXaXRoKCd3YWxrJykpXG4gICAgICAgICkge1xuICAgICAgICAgIHJldHVybiAoLi4uYXJncykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIG5vZGVbcHJvcF0oXG4gICAgICAgICAgICAgIC4uLmFyZ3MubWFwKGkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgaSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIChjaGlsZCwgaW5kZXgpID0+IGkoY2hpbGQudG9Qcm94eSgpLCBpbmRleClcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHByb3AgPT09ICdldmVyeScgfHwgcHJvcCA9PT0gJ3NvbWUnKSB7XG4gICAgICAgICAgcmV0dXJuIGNiID0+IHtcbiAgICAgICAgICAgIHJldHVybiBub2RlW3Byb3BdKChjaGlsZCwgLi4ub3RoZXIpID0+XG4gICAgICAgICAgICAgIGNiKGNoaWxkLnRvUHJveHkoKSwgLi4ub3RoZXIpXG4gICAgICAgICAgICApXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHByb3AgPT09ICdyb290Jykge1xuICAgICAgICAgIHJldHVybiAoKSA9PiBub2RlLnJvb3QoKS50b1Byb3h5KClcbiAgICAgICAgfSBlbHNlIGlmIChwcm9wID09PSAnbm9kZXMnKSB7XG4gICAgICAgICAgcmV0dXJuIG5vZGUubm9kZXMubWFwKGkgPT4gaS50b1Byb3h5KCkpXG4gICAgICAgIH0gZWxzZSBpZiAocHJvcCA9PT0gJ2ZpcnN0JyB8fCBwcm9wID09PSAnbGFzdCcpIHtcbiAgICAgICAgICByZXR1cm4gbm9kZVtwcm9wXS50b1Byb3h5KClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gbm9kZVtwcm9wXVxuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICBzZXQobm9kZSwgcHJvcCwgdmFsdWUpIHtcbiAgICAgICAgaWYgKG5vZGVbcHJvcF0gPT09IHZhbHVlKSByZXR1cm4gdHJ1ZVxuICAgICAgICBub2RlW3Byb3BdID0gdmFsdWVcbiAgICAgICAgaWYgKHByb3AgPT09ICduYW1lJyB8fCBwcm9wID09PSAncGFyYW1zJyB8fCBwcm9wID09PSAnc2VsZWN0b3InKSB7XG4gICAgICAgICAgbm9kZS5tYXJrRGlydHkoKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaW5kZXgoY2hpbGQpIHtcbiAgICBpZiAodHlwZW9mIGNoaWxkID09PSAnbnVtYmVyJykgcmV0dXJuIGNoaWxkXG4gICAgaWYgKGNoaWxkLnByb3h5T2YpIGNoaWxkID0gY2hpbGQucHJveHlPZlxuICAgIHJldHVybiB0aGlzLnByb3h5T2Yubm9kZXMuaW5kZXhPZihjaGlsZClcbiAgfVxuXG4gIGluc2VydEFmdGVyKGV4aXN0LCBhZGQpIHtcbiAgICBsZXQgZXhpc3RJbmRleCA9IHRoaXMuaW5kZXgoZXhpc3QpXG4gICAgbGV0IG5vZGVzID0gdGhpcy5ub3JtYWxpemUoYWRkLCB0aGlzLnByb3h5T2Yubm9kZXNbZXhpc3RJbmRleF0pLnJldmVyc2UoKVxuICAgIGV4aXN0SW5kZXggPSB0aGlzLmluZGV4KGV4aXN0KVxuICAgIGZvciAobGV0IG5vZGUgb2Ygbm9kZXMpIHRoaXMucHJveHlPZi5ub2Rlcy5zcGxpY2UoZXhpc3RJbmRleCArIDEsIDAsIG5vZGUpXG5cbiAgICBsZXQgaW5kZXhcbiAgICBmb3IgKGxldCBpZCBpbiB0aGlzLmluZGV4ZXMpIHtcbiAgICAgIGluZGV4ID0gdGhpcy5pbmRleGVzW2lkXVxuICAgICAgaWYgKGV4aXN0SW5kZXggPCBpbmRleCkge1xuICAgICAgICB0aGlzLmluZGV4ZXNbaWRdID0gaW5kZXggKyBub2Rlcy5sZW5ndGhcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLm1hcmtEaXJ0eSgpXG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgaW5zZXJ0QmVmb3JlKGV4aXN0LCBhZGQpIHtcbiAgICBsZXQgZXhpc3RJbmRleCA9IHRoaXMuaW5kZXgoZXhpc3QpXG4gICAgbGV0IHR5cGUgPSBleGlzdEluZGV4ID09PSAwID8gJ3ByZXBlbmQnIDogZmFsc2VcbiAgICBsZXQgbm9kZXMgPSB0aGlzLm5vcm1hbGl6ZShhZGQsIHRoaXMucHJveHlPZi5ub2Rlc1tleGlzdEluZGV4XSwgdHlwZSkucmV2ZXJzZSgpXG4gICAgZXhpc3RJbmRleCA9IHRoaXMuaW5kZXgoZXhpc3QpXG4gICAgZm9yIChsZXQgbm9kZSBvZiBub2RlcykgdGhpcy5wcm94eU9mLm5vZGVzLnNwbGljZShleGlzdEluZGV4LCAwLCBub2RlKVxuXG4gICAgbGV0IGluZGV4XG4gICAgZm9yIChsZXQgaWQgaW4gdGhpcy5pbmRleGVzKSB7XG4gICAgICBpbmRleCA9IHRoaXMuaW5kZXhlc1tpZF1cbiAgICAgIGlmIChleGlzdEluZGV4IDw9IGluZGV4KSB7XG4gICAgICAgIHRoaXMuaW5kZXhlc1tpZF0gPSBpbmRleCArIG5vZGVzLmxlbmd0aFxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMubWFya0RpcnR5KClcblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBub3JtYWxpemUobm9kZXMsIHNhbXBsZSkge1xuICAgIGlmICh0eXBlb2Ygbm9kZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICBub2RlcyA9IGNsZWFuU291cmNlKHBhcnNlKG5vZGVzKS5ub2RlcylcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkobm9kZXMpKSB7XG4gICAgICBub2RlcyA9IG5vZGVzLnNsaWNlKDApXG4gICAgICBmb3IgKGxldCBpIG9mIG5vZGVzKSB7XG4gICAgICAgIGlmIChpLnBhcmVudCkgaS5wYXJlbnQucmVtb3ZlQ2hpbGQoaSwgJ2lnbm9yZScpXG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChub2Rlcy50eXBlID09PSAncm9vdCcgJiYgdGhpcy50eXBlICE9PSAnZG9jdW1lbnQnKSB7XG4gICAgICBub2RlcyA9IG5vZGVzLm5vZGVzLnNsaWNlKDApXG4gICAgICBmb3IgKGxldCBpIG9mIG5vZGVzKSB7XG4gICAgICAgIGlmIChpLnBhcmVudCkgaS5wYXJlbnQucmVtb3ZlQ2hpbGQoaSwgJ2lnbm9yZScpXG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChub2Rlcy50eXBlKSB7XG4gICAgICBub2RlcyA9IFtub2Rlc11cbiAgICB9IGVsc2UgaWYgKG5vZGVzLnByb3ApIHtcbiAgICAgIGlmICh0eXBlb2Ygbm9kZXMudmFsdWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVmFsdWUgZmllbGQgaXMgbWlzc2VkIGluIG5vZGUgY3JlYXRpb24nKVxuICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygbm9kZXMudmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIG5vZGVzLnZhbHVlID0gU3RyaW5nKG5vZGVzLnZhbHVlKVxuICAgICAgfVxuICAgICAgbm9kZXMgPSBbbmV3IERlY2xhcmF0aW9uKG5vZGVzKV1cbiAgICB9IGVsc2UgaWYgKG5vZGVzLnNlbGVjdG9yKSB7XG4gICAgICBub2RlcyA9IFtuZXcgUnVsZShub2RlcyldXG4gICAgfSBlbHNlIGlmIChub2Rlcy5uYW1lKSB7XG4gICAgICBub2RlcyA9IFtuZXcgQXRSdWxlKG5vZGVzKV1cbiAgICB9IGVsc2UgaWYgKG5vZGVzLnRleHQpIHtcbiAgICAgIG5vZGVzID0gW25ldyBDb21tZW50KG5vZGVzKV1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIG5vZGUgdHlwZSBpbiBub2RlIGNyZWF0aW9uJylcbiAgICB9XG5cbiAgICBsZXQgcHJvY2Vzc2VkID0gbm9kZXMubWFwKGkgPT4ge1xuICAgICAgLyogYzggaWdub3JlIG5leHQgKi9cbiAgICAgIGlmICghaVtteV0pIENvbnRhaW5lci5yZWJ1aWxkKGkpXG4gICAgICBpID0gaS5wcm94eU9mXG4gICAgICBpZiAoaS5wYXJlbnQpIGkucGFyZW50LnJlbW92ZUNoaWxkKGkpXG4gICAgICBpZiAoaVtpc0NsZWFuXSkgbWFya0RpcnR5VXAoaSlcbiAgICAgIGlmICh0eXBlb2YgaS5yYXdzLmJlZm9yZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgaWYgKHNhbXBsZSAmJiB0eXBlb2Ygc2FtcGxlLnJhd3MuYmVmb3JlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIGkucmF3cy5iZWZvcmUgPSBzYW1wbGUucmF3cy5iZWZvcmUucmVwbGFjZSgvXFxTL2csICcnKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpLnBhcmVudCA9IHRoaXMucHJveHlPZlxuICAgICAgcmV0dXJuIGlcbiAgICB9KVxuXG4gICAgcmV0dXJuIHByb2Nlc3NlZFxuICB9XG5cbiAgcHJlcGVuZCguLi5jaGlsZHJlbikge1xuICAgIGNoaWxkcmVuID0gY2hpbGRyZW4ucmV2ZXJzZSgpXG4gICAgZm9yIChsZXQgY2hpbGQgb2YgY2hpbGRyZW4pIHtcbiAgICAgIGxldCBub2RlcyA9IHRoaXMubm9ybWFsaXplKGNoaWxkLCB0aGlzLmZpcnN0LCAncHJlcGVuZCcpLnJldmVyc2UoKVxuICAgICAgZm9yIChsZXQgbm9kZSBvZiBub2RlcykgdGhpcy5wcm94eU9mLm5vZGVzLnVuc2hpZnQobm9kZSlcbiAgICAgIGZvciAobGV0IGlkIGluIHRoaXMuaW5kZXhlcykge1xuICAgICAgICB0aGlzLmluZGV4ZXNbaWRdID0gdGhpcy5pbmRleGVzW2lkXSArIG5vZGVzLmxlbmd0aFxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMubWFya0RpcnR5KClcblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBwdXNoKGNoaWxkKSB7XG4gICAgY2hpbGQucGFyZW50ID0gdGhpc1xuICAgIHRoaXMucHJveHlPZi5ub2Rlcy5wdXNoKGNoaWxkKVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICByZW1vdmVBbGwoKSB7XG4gICAgZm9yIChsZXQgbm9kZSBvZiB0aGlzLnByb3h5T2Yubm9kZXMpIG5vZGUucGFyZW50ID0gdW5kZWZpbmVkXG4gICAgdGhpcy5wcm94eU9mLm5vZGVzID0gW11cblxuICAgIHRoaXMubWFya0RpcnR5KClcblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICByZW1vdmVDaGlsZChjaGlsZCkge1xuICAgIGNoaWxkID0gdGhpcy5pbmRleChjaGlsZClcbiAgICB0aGlzLnByb3h5T2Yubm9kZXNbY2hpbGRdLnBhcmVudCA9IHVuZGVmaW5lZFxuICAgIHRoaXMucHJveHlPZi5ub2Rlcy5zcGxpY2UoY2hpbGQsIDEpXG5cbiAgICBsZXQgaW5kZXhcbiAgICBmb3IgKGxldCBpZCBpbiB0aGlzLmluZGV4ZXMpIHtcbiAgICAgIGluZGV4ID0gdGhpcy5pbmRleGVzW2lkXVxuICAgICAgaWYgKGluZGV4ID49IGNoaWxkKSB7XG4gICAgICAgIHRoaXMuaW5kZXhlc1tpZF0gPSBpbmRleCAtIDFcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLm1hcmtEaXJ0eSgpXG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgcmVwbGFjZVZhbHVlcyhwYXR0ZXJuLCBvcHRzLCBjYWxsYmFjaykge1xuICAgIGlmICghY2FsbGJhY2spIHtcbiAgICAgIGNhbGxiYWNrID0gb3B0c1xuICAgICAgb3B0cyA9IHt9XG4gICAgfVxuXG4gICAgdGhpcy53YWxrRGVjbHMoZGVjbCA9PiB7XG4gICAgICBpZiAob3B0cy5wcm9wcyAmJiAhb3B0cy5wcm9wcy5pbmNsdWRlcyhkZWNsLnByb3ApKSByZXR1cm5cbiAgICAgIGlmIChvcHRzLmZhc3QgJiYgIWRlY2wudmFsdWUuaW5jbHVkZXMob3B0cy5mYXN0KSkgcmV0dXJuXG5cbiAgICAgIGRlY2wudmFsdWUgPSBkZWNsLnZhbHVlLnJlcGxhY2UocGF0dGVybiwgY2FsbGJhY2spXG4gICAgfSlcblxuICAgIHRoaXMubWFya0RpcnR5KClcblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBzb21lKGNvbmRpdGlvbikge1xuICAgIHJldHVybiB0aGlzLm5vZGVzLnNvbWUoY29uZGl0aW9uKVxuICB9XG5cbiAgd2FsayhjYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLmVhY2goKGNoaWxkLCBpKSA9PiB7XG4gICAgICBsZXQgcmVzdWx0XG4gICAgICB0cnkge1xuICAgICAgICByZXN1bHQgPSBjYWxsYmFjayhjaGlsZCwgaSlcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdGhyb3cgY2hpbGQuYWRkVG9FcnJvcihlKVxuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdCAhPT0gZmFsc2UgJiYgY2hpbGQud2Fsaykge1xuICAgICAgICByZXN1bHQgPSBjaGlsZC53YWxrKGNhbGxiYWNrKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0XG4gICAgfSlcbiAgfVxuXG4gIHdhbGtBdFJ1bGVzKG5hbWUsIGNhbGxiYWNrKSB7XG4gICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgY2FsbGJhY2sgPSBuYW1lXG4gICAgICByZXR1cm4gdGhpcy53YWxrKChjaGlsZCwgaSkgPT4ge1xuICAgICAgICBpZiAoY2hpbGQudHlwZSA9PT0gJ2F0cnVsZScpIHtcbiAgICAgICAgICByZXR1cm4gY2FsbGJhY2soY2hpbGQsIGkpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuICAgIGlmIChuYW1lIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICByZXR1cm4gdGhpcy53YWxrKChjaGlsZCwgaSkgPT4ge1xuICAgICAgICBpZiAoY2hpbGQudHlwZSA9PT0gJ2F0cnVsZScgJiYgbmFtZS50ZXN0KGNoaWxkLm5hbWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGNoaWxkLCBpKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy53YWxrKChjaGlsZCwgaSkgPT4ge1xuICAgICAgaWYgKGNoaWxkLnR5cGUgPT09ICdhdHJ1bGUnICYmIGNoaWxkLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGNoaWxkLCBpKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICB3YWxrQ29tbWVudHMoY2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy53YWxrKChjaGlsZCwgaSkgPT4ge1xuICAgICAgaWYgKGNoaWxkLnR5cGUgPT09ICdjb21tZW50Jykge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2soY2hpbGQsIGkpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIHdhbGtEZWNscyhwcm9wLCBjYWxsYmFjaykge1xuICAgIGlmICghY2FsbGJhY2spIHtcbiAgICAgIGNhbGxiYWNrID0gcHJvcFxuICAgICAgcmV0dXJuIHRoaXMud2FsaygoY2hpbGQsIGkpID0+IHtcbiAgICAgICAgaWYgKGNoaWxkLnR5cGUgPT09ICdkZWNsJykge1xuICAgICAgICAgIHJldHVybiBjYWxsYmFjayhjaGlsZCwgaSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gICAgaWYgKHByb3AgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgIHJldHVybiB0aGlzLndhbGsoKGNoaWxkLCBpKSA9PiB7XG4gICAgICAgIGlmIChjaGlsZC50eXBlID09PSAnZGVjbCcgJiYgcHJvcC50ZXN0KGNoaWxkLnByb3ApKSB7XG4gICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGNoaWxkLCBpKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy53YWxrKChjaGlsZCwgaSkgPT4ge1xuICAgICAgaWYgKGNoaWxkLnR5cGUgPT09ICdkZWNsJyAmJiBjaGlsZC5wcm9wID09PSBwcm9wKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhjaGlsZCwgaSlcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgd2Fsa1J1bGVzKHNlbGVjdG9yLCBjYWxsYmFjaykge1xuICAgIGlmICghY2FsbGJhY2spIHtcbiAgICAgIGNhbGxiYWNrID0gc2VsZWN0b3JcblxuICAgICAgcmV0dXJuIHRoaXMud2FsaygoY2hpbGQsIGkpID0+IHtcbiAgICAgICAgaWYgKGNoaWxkLnR5cGUgPT09ICdydWxlJykge1xuICAgICAgICAgIHJldHVybiBjYWxsYmFjayhjaGlsZCwgaSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gICAgaWYgKHNlbGVjdG9yIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICByZXR1cm4gdGhpcy53YWxrKChjaGlsZCwgaSkgPT4ge1xuICAgICAgICBpZiAoY2hpbGQudHlwZSA9PT0gJ3J1bGUnICYmIHNlbGVjdG9yLnRlc3QoY2hpbGQuc2VsZWN0b3IpKSB7XG4gICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGNoaWxkLCBpKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy53YWxrKChjaGlsZCwgaSkgPT4ge1xuICAgICAgaWYgKGNoaWxkLnR5cGUgPT09ICdydWxlJyAmJiBjaGlsZC5zZWxlY3RvciA9PT0gc2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGNoaWxkLCBpKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBnZXQgZmlyc3QoKSB7XG4gICAgaWYgKCF0aGlzLnByb3h5T2Yubm9kZXMpIHJldHVybiB1bmRlZmluZWRcbiAgICByZXR1cm4gdGhpcy5wcm94eU9mLm5vZGVzWzBdXG4gIH1cblxuICBnZXQgbGFzdCgpIHtcbiAgICBpZiAoIXRoaXMucHJveHlPZi5ub2RlcykgcmV0dXJuIHVuZGVmaW5lZFxuICAgIHJldHVybiB0aGlzLnByb3h5T2Yubm9kZXNbdGhpcy5wcm94eU9mLm5vZGVzLmxlbmd0aCAtIDFdXG4gIH1cbn1cblxuQ29udGFpbmVyLnJlZ2lzdGVyUGFyc2UgPSBkZXBlbmRhbnQgPT4ge1xuICBwYXJzZSA9IGRlcGVuZGFudFxufVxuXG5Db250YWluZXIucmVnaXN0ZXJSdWxlID0gZGVwZW5kYW50ID0+IHtcbiAgUnVsZSA9IGRlcGVuZGFudFxufVxuXG5Db250YWluZXIucmVnaXN0ZXJBdFJ1bGUgPSBkZXBlbmRhbnQgPT4ge1xuICBBdFJ1bGUgPSBkZXBlbmRhbnRcbn1cblxuQ29udGFpbmVyLnJlZ2lzdGVyUm9vdCA9IGRlcGVuZGFudCA9PiB7XG4gIFJvb3QgPSBkZXBlbmRhbnRcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDb250YWluZXJcbkNvbnRhaW5lci5kZWZhdWx0ID0gQ29udGFpbmVyXG5cbi8qIGM4IGlnbm9yZSBzdGFydCAqL1xuQ29udGFpbmVyLnJlYnVpbGQgPSBub2RlID0+IHtcbiAgaWYgKG5vZGUudHlwZSA9PT0gJ2F0cnVsZScpIHtcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2Yobm9kZSwgQXRSdWxlLnByb3RvdHlwZSlcbiAgfSBlbHNlIGlmIChub2RlLnR5cGUgPT09ICdydWxlJykge1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihub2RlLCBSdWxlLnByb3RvdHlwZSlcbiAgfSBlbHNlIGlmIChub2RlLnR5cGUgPT09ICdkZWNsJykge1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihub2RlLCBEZWNsYXJhdGlvbi5wcm90b3R5cGUpXG4gIH0gZWxzZSBpZiAobm9kZS50eXBlID09PSAnY29tbWVudCcpIHtcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2Yobm9kZSwgQ29tbWVudC5wcm90b3R5cGUpXG4gIH0gZWxzZSBpZiAobm9kZS50eXBlID09PSAncm9vdCcpIHtcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2Yobm9kZSwgUm9vdC5wcm90b3R5cGUpXG4gIH1cblxuICBub2RlW215XSA9IHRydWVcblxuICBpZiAobm9kZS5ub2Rlcykge1xuICAgIG5vZGUubm9kZXMuZm9yRWFjaChjaGlsZCA9PiB7XG4gICAgICBDb250YWluZXIucmVidWlsZChjaGlsZClcbiAgICB9KVxuICB9XG59XG4vKiBjOCBpZ25vcmUgc3RvcCAqL1xuIl0sIm5hbWVzIjpbImlzQ2xlYW4iLCJteSIsInJlcXVpcmUiLCJEZWNsYXJhdGlvbiIsIkNvbW1lbnQiLCJOb2RlIiwicGFyc2UiLCJSdWxlIiwiQXRSdWxlIiwiUm9vdCIsImNsZWFuU291cmNlIiwibm9kZXMiLCJtYXAiLCJpIiwic291cmNlIiwibWFya0RpcnR5VXAiLCJub2RlIiwicHJveHlPZiIsIkNvbnRhaW5lciIsImFwcGVuZCIsImNoaWxkcmVuIiwiY2hpbGQiLCJub3JtYWxpemUiLCJsYXN0IiwicHVzaCIsIm1hcmtEaXJ0eSIsImNsZWFuUmF3cyIsImtlZXBCZXR3ZWVuIiwiZWFjaCIsImNhbGxiYWNrIiwidW5kZWZpbmVkIiwiaXRlcmF0b3IiLCJnZXRJdGVyYXRvciIsImluZGV4IiwicmVzdWx0IiwiaW5kZXhlcyIsImxlbmd0aCIsImV2ZXJ5IiwiY29uZGl0aW9uIiwibGFzdEVhY2giLCJnZXRQcm94eVByb2Nlc3NvciIsImdldCIsInByb3AiLCJzdGFydHNXaXRoIiwiYXJncyIsInRvUHJveHkiLCJjYiIsIm90aGVyIiwicm9vdCIsInNldCIsInZhbHVlIiwiaW5kZXhPZiIsImluc2VydEFmdGVyIiwiZXhpc3QiLCJhZGQiLCJleGlzdEluZGV4IiwicmV2ZXJzZSIsInNwbGljZSIsImlkIiwiaW5zZXJ0QmVmb3JlIiwidHlwZSIsInNhbXBsZSIsIkFycmF5IiwiaXNBcnJheSIsInNsaWNlIiwicGFyZW50IiwicmVtb3ZlQ2hpbGQiLCJFcnJvciIsIlN0cmluZyIsInNlbGVjdG9yIiwibmFtZSIsInRleHQiLCJwcm9jZXNzZWQiLCJyZWJ1aWxkIiwicmF3cyIsImJlZm9yZSIsInJlcGxhY2UiLCJwcmVwZW5kIiwiZmlyc3QiLCJ1bnNoaWZ0IiwicmVtb3ZlQWxsIiwicmVwbGFjZVZhbHVlcyIsInBhdHRlcm4iLCJvcHRzIiwid2Fsa0RlY2xzIiwiZGVjbCIsInByb3BzIiwiaW5jbHVkZXMiLCJmYXN0Iiwic29tZSIsIndhbGsiLCJlIiwiYWRkVG9FcnJvciIsIndhbGtBdFJ1bGVzIiwiUmVnRXhwIiwidGVzdCIsIndhbGtDb21tZW50cyIsIndhbGtSdWxlcyIsInJlZ2lzdGVyUGFyc2UiLCJkZXBlbmRhbnQiLCJyZWdpc3RlclJ1bGUiLCJyZWdpc3RlckF0UnVsZSIsInJlZ2lzdGVyUm9vdCIsIm1vZHVsZSIsImV4cG9ydHMiLCJkZWZhdWx0IiwiT2JqZWN0Iiwic2V0UHJvdG90eXBlT2YiLCJwcm90b3R5cGUiLCJmb3JFYWNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/container.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/css-syntax-error.js":
/*!******************************************************!*\
  !*** ./node_modules/postcss/lib/css-syntax-error.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet pico = __webpack_require__(/*! picocolors */ \"(ssr)/./node_modules/picocolors/picocolors.js\");\nlet terminalHighlight = __webpack_require__(/*! ./terminal-highlight */ \"(ssr)/./node_modules/postcss/lib/terminal-highlight.js\");\nclass CssSyntaxError extends Error {\n    constructor(message, line, column, source, file, plugin){\n        super(message);\n        this.name = \"CssSyntaxError\";\n        this.reason = message;\n        if (file) {\n            this.file = file;\n        }\n        if (source) {\n            this.source = source;\n        }\n        if (plugin) {\n            this.plugin = plugin;\n        }\n        if (typeof line !== \"undefined\" && typeof column !== \"undefined\") {\n            if (typeof line === \"number\") {\n                this.line = line;\n                this.column = column;\n            } else {\n                this.line = line.line;\n                this.column = line.column;\n                this.endLine = column.line;\n                this.endColumn = column.column;\n            }\n        }\n        this.setMessage();\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, CssSyntaxError);\n        }\n    }\n    setMessage() {\n        this.message = this.plugin ? this.plugin + \": \" : \"\";\n        this.message += this.file ? this.file : \"<css input>\";\n        if (typeof this.line !== \"undefined\") {\n            this.message += \":\" + this.line + \":\" + this.column;\n        }\n        this.message += \": \" + this.reason;\n    }\n    showSourceCode(color) {\n        if (!this.source) return \"\";\n        let css = this.source;\n        if (color == null) color = pico.isColorSupported;\n        if (terminalHighlight) {\n            if (color) css = terminalHighlight(css);\n        }\n        let lines = css.split(/\\r?\\n/);\n        let start = Math.max(this.line - 3, 0);\n        let end = Math.min(this.line + 2, lines.length);\n        let maxWidth = String(end).length;\n        let mark, aside;\n        if (color) {\n            let { bold, gray, red } = pico.createColors(true);\n            mark = (text)=>bold(red(text));\n            aside = (text)=>gray(text);\n        } else {\n            mark = aside = (str)=>str;\n        }\n        return lines.slice(start, end).map((line, index)=>{\n            let number = start + 1 + index;\n            let gutter = \" \" + (\" \" + number).slice(-maxWidth) + \" | \";\n            if (number === this.line) {\n                let spacing = aside(gutter.replace(/\\d/g, \" \")) + line.slice(0, this.column - 1).replace(/[^\\t]/g, \" \");\n                return mark(\">\") + aside(gutter) + line + \"\\n \" + spacing + mark(\"^\");\n            }\n            return \" \" + aside(gutter) + line;\n        }).join(\"\\n\");\n    }\n    toString() {\n        let code = this.showSourceCode();\n        if (code) {\n            code = \"\\n\\n\" + code + \"\\n\";\n        }\n        return this.name + \": \" + this.message + code;\n    }\n}\nmodule.exports = CssSyntaxError;\nCssSyntaxError.default = CssSyntaxError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvY3NzLXN5bnRheC1lcnJvci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLE9BQU9DLG1CQUFPQSxDQUFDO0FBRW5CLElBQUlDLG9CQUFvQkQsbUJBQU9BLENBQUM7QUFFaEMsTUFBTUUsdUJBQXVCQztJQUMzQkMsWUFBWUMsT0FBTyxFQUFFQyxJQUFJLEVBQUVDLE1BQU0sRUFBRUMsTUFBTSxFQUFFQyxJQUFJLEVBQUVDLE1BQU0sQ0FBRTtRQUN2RCxLQUFLLENBQUNMO1FBQ04sSUFBSSxDQUFDTSxJQUFJLEdBQUc7UUFDWixJQUFJLENBQUNDLE1BQU0sR0FBR1A7UUFFZCxJQUFJSSxNQUFNO1lBQ1IsSUFBSSxDQUFDQSxJQUFJLEdBQUdBO1FBQ2Q7UUFDQSxJQUFJRCxRQUFRO1lBQ1YsSUFBSSxDQUFDQSxNQUFNLEdBQUdBO1FBQ2hCO1FBQ0EsSUFBSUUsUUFBUTtZQUNWLElBQUksQ0FBQ0EsTUFBTSxHQUFHQTtRQUNoQjtRQUNBLElBQUksT0FBT0osU0FBUyxlQUFlLE9BQU9DLFdBQVcsYUFBYTtZQUNoRSxJQUFJLE9BQU9ELFNBQVMsVUFBVTtnQkFDNUIsSUFBSSxDQUFDQSxJQUFJLEdBQUdBO2dCQUNaLElBQUksQ0FBQ0MsTUFBTSxHQUFHQTtZQUNoQixPQUFPO2dCQUNMLElBQUksQ0FBQ0QsSUFBSSxHQUFHQSxLQUFLQSxJQUFJO2dCQUNyQixJQUFJLENBQUNDLE1BQU0sR0FBR0QsS0FBS0MsTUFBTTtnQkFDekIsSUFBSSxDQUFDTSxPQUFPLEdBQUdOLE9BQU9ELElBQUk7Z0JBQzFCLElBQUksQ0FBQ1EsU0FBUyxHQUFHUCxPQUFPQSxNQUFNO1lBQ2hDO1FBQ0Y7UUFFQSxJQUFJLENBQUNRLFVBQVU7UUFFZixJQUFJWixNQUFNYSxpQkFBaUIsRUFBRTtZQUMzQmIsTUFBTWEsaUJBQWlCLENBQUMsSUFBSSxFQUFFZDtRQUNoQztJQUNGO0lBRUFhLGFBQWE7UUFDWCxJQUFJLENBQUNWLE9BQU8sR0FBRyxJQUFJLENBQUNLLE1BQU0sR0FBRyxJQUFJLENBQUNBLE1BQU0sR0FBRyxPQUFPO1FBQ2xELElBQUksQ0FBQ0wsT0FBTyxJQUFJLElBQUksQ0FBQ0ksSUFBSSxHQUFHLElBQUksQ0FBQ0EsSUFBSSxHQUFHO1FBQ3hDLElBQUksT0FBTyxJQUFJLENBQUNILElBQUksS0FBSyxhQUFhO1lBQ3BDLElBQUksQ0FBQ0QsT0FBTyxJQUFJLE1BQU0sSUFBSSxDQUFDQyxJQUFJLEdBQUcsTUFBTSxJQUFJLENBQUNDLE1BQU07UUFDckQ7UUFDQSxJQUFJLENBQUNGLE9BQU8sSUFBSSxPQUFPLElBQUksQ0FBQ08sTUFBTTtJQUNwQztJQUVBSyxlQUFlQyxLQUFLLEVBQUU7UUFDcEIsSUFBSSxDQUFDLElBQUksQ0FBQ1YsTUFBTSxFQUFFLE9BQU87UUFFekIsSUFBSVcsTUFBTSxJQUFJLENBQUNYLE1BQU07UUFDckIsSUFBSVUsU0FBUyxNQUFNQSxRQUFRbkIsS0FBS3FCLGdCQUFnQjtRQUNoRCxJQUFJbkIsbUJBQW1CO1lBQ3JCLElBQUlpQixPQUFPQyxNQUFNbEIsa0JBQWtCa0I7UUFDckM7UUFFQSxJQUFJRSxRQUFRRixJQUFJRyxLQUFLLENBQUM7UUFDdEIsSUFBSUMsUUFBUUMsS0FBS0MsR0FBRyxDQUFDLElBQUksQ0FBQ25CLElBQUksR0FBRyxHQUFHO1FBQ3BDLElBQUlvQixNQUFNRixLQUFLRyxHQUFHLENBQUMsSUFBSSxDQUFDckIsSUFBSSxHQUFHLEdBQUdlLE1BQU1PLE1BQU07UUFFOUMsSUFBSUMsV0FBV0MsT0FBT0osS0FBS0UsTUFBTTtRQUVqQyxJQUFJRyxNQUFNQztRQUNWLElBQUlkLE9BQU87WUFDVCxJQUFJLEVBQUVlLElBQUksRUFBRUMsSUFBSSxFQUFFQyxHQUFHLEVBQUUsR0FBR3BDLEtBQUtxQyxZQUFZLENBQUM7WUFDNUNMLE9BQU9NLENBQUFBLE9BQVFKLEtBQUtFLElBQUlFO1lBQ3hCTCxRQUFRSyxDQUFBQSxPQUFRSCxLQUFLRztRQUN2QixPQUFPO1lBQ0xOLE9BQU9DLFFBQVFNLENBQUFBLE1BQU9BO1FBQ3hCO1FBRUEsT0FBT2pCLE1BQ0prQixLQUFLLENBQUNoQixPQUFPRyxLQUNiYyxHQUFHLENBQUMsQ0FBQ2xDLE1BQU1tQztZQUNWLElBQUlDLFNBQVNuQixRQUFRLElBQUlrQjtZQUN6QixJQUFJRSxTQUFTLE1BQU0sQ0FBQyxNQUFNRCxNQUFLLEVBQUdILEtBQUssQ0FBQyxDQUFDVixZQUFZO1lBQ3JELElBQUlhLFdBQVcsSUFBSSxDQUFDcEMsSUFBSSxFQUFFO2dCQUN4QixJQUFJc0MsVUFDRlosTUFBTVcsT0FBT0UsT0FBTyxDQUFDLE9BQU8sUUFDNUJ2QyxLQUFLaUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDaEMsTUFBTSxHQUFHLEdBQUdzQyxPQUFPLENBQUMsVUFBVTtnQkFDbkQsT0FBT2QsS0FBSyxPQUFPQyxNQUFNVyxVQUFVckMsT0FBTyxRQUFRc0MsVUFBVWIsS0FBSztZQUNuRTtZQUNBLE9BQU8sTUFBTUMsTUFBTVcsVUFBVXJDO1FBQy9CLEdBQ0N3QyxJQUFJLENBQUM7SUFDVjtJQUVBQyxXQUFXO1FBQ1QsSUFBSUMsT0FBTyxJQUFJLENBQUMvQixjQUFjO1FBQzlCLElBQUkrQixNQUFNO1lBQ1JBLE9BQU8sU0FBU0EsT0FBTztRQUN6QjtRQUNBLE9BQU8sSUFBSSxDQUFDckMsSUFBSSxHQUFHLE9BQU8sSUFBSSxDQUFDTixPQUFPLEdBQUcyQztJQUMzQztBQUNGO0FBRUFDLE9BQU9DLE9BQU8sR0FBR2hEO0FBQ2pCQSxlQUFlaUQsT0FBTyxHQUFHakQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lY29tLy4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MvbGliL2Nzcy1zeW50YXgtZXJyb3IuanM/MTE3NiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubGV0IHBpY28gPSByZXF1aXJlKCdwaWNvY29sb3JzJylcblxubGV0IHRlcm1pbmFsSGlnaGxpZ2h0ID0gcmVxdWlyZSgnLi90ZXJtaW5hbC1oaWdobGlnaHQnKVxuXG5jbGFzcyBDc3NTeW50YXhFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZSwgbGluZSwgY29sdW1uLCBzb3VyY2UsIGZpbGUsIHBsdWdpbikge1xuICAgIHN1cGVyKG1lc3NhZ2UpXG4gICAgdGhpcy5uYW1lID0gJ0Nzc1N5bnRheEVycm9yJ1xuICAgIHRoaXMucmVhc29uID0gbWVzc2FnZVxuXG4gICAgaWYgKGZpbGUpIHtcbiAgICAgIHRoaXMuZmlsZSA9IGZpbGVcbiAgICB9XG4gICAgaWYgKHNvdXJjZSkge1xuICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2VcbiAgICB9XG4gICAgaWYgKHBsdWdpbikge1xuICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW5cbiAgICB9XG4gICAgaWYgKHR5cGVvZiBsaW5lICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgY29sdW1uICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgaWYgKHR5cGVvZiBsaW5lID09PSAnbnVtYmVyJykge1xuICAgICAgICB0aGlzLmxpbmUgPSBsaW5lXG4gICAgICAgIHRoaXMuY29sdW1uID0gY29sdW1uXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmxpbmUgPSBsaW5lLmxpbmVcbiAgICAgICAgdGhpcy5jb2x1bW4gPSBsaW5lLmNvbHVtblxuICAgICAgICB0aGlzLmVuZExpbmUgPSBjb2x1bW4ubGluZVxuICAgICAgICB0aGlzLmVuZENvbHVtbiA9IGNvbHVtbi5jb2x1bW5cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnNldE1lc3NhZ2UoKVxuXG4gICAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSB7XG4gICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBDc3NTeW50YXhFcnJvcilcbiAgICB9XG4gIH1cblxuICBzZXRNZXNzYWdlKCkge1xuICAgIHRoaXMubWVzc2FnZSA9IHRoaXMucGx1Z2luID8gdGhpcy5wbHVnaW4gKyAnOiAnIDogJydcbiAgICB0aGlzLm1lc3NhZ2UgKz0gdGhpcy5maWxlID8gdGhpcy5maWxlIDogJzxjc3MgaW5wdXQ+J1xuICAgIGlmICh0eXBlb2YgdGhpcy5saW5lICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhpcy5tZXNzYWdlICs9ICc6JyArIHRoaXMubGluZSArICc6JyArIHRoaXMuY29sdW1uXG4gICAgfVxuICAgIHRoaXMubWVzc2FnZSArPSAnOiAnICsgdGhpcy5yZWFzb25cbiAgfVxuXG4gIHNob3dTb3VyY2VDb2RlKGNvbG9yKSB7XG4gICAgaWYgKCF0aGlzLnNvdXJjZSkgcmV0dXJuICcnXG5cbiAgICBsZXQgY3NzID0gdGhpcy5zb3VyY2VcbiAgICBpZiAoY29sb3IgPT0gbnVsbCkgY29sb3IgPSBwaWNvLmlzQ29sb3JTdXBwb3J0ZWRcbiAgICBpZiAodGVybWluYWxIaWdobGlnaHQpIHtcbiAgICAgIGlmIChjb2xvcikgY3NzID0gdGVybWluYWxIaWdobGlnaHQoY3NzKVxuICAgIH1cblxuICAgIGxldCBsaW5lcyA9IGNzcy5zcGxpdCgvXFxyP1xcbi8pXG4gICAgbGV0IHN0YXJ0ID0gTWF0aC5tYXgodGhpcy5saW5lIC0gMywgMClcbiAgICBsZXQgZW5kID0gTWF0aC5taW4odGhpcy5saW5lICsgMiwgbGluZXMubGVuZ3RoKVxuXG4gICAgbGV0IG1heFdpZHRoID0gU3RyaW5nKGVuZCkubGVuZ3RoXG5cbiAgICBsZXQgbWFyaywgYXNpZGVcbiAgICBpZiAoY29sb3IpIHtcbiAgICAgIGxldCB7IGJvbGQsIGdyYXksIHJlZCB9ID0gcGljby5jcmVhdGVDb2xvcnModHJ1ZSlcbiAgICAgIG1hcmsgPSB0ZXh0ID0+IGJvbGQocmVkKHRleHQpKVxuICAgICAgYXNpZGUgPSB0ZXh0ID0+IGdyYXkodGV4dClcbiAgICB9IGVsc2Uge1xuICAgICAgbWFyayA9IGFzaWRlID0gc3RyID0+IHN0clxuICAgIH1cblxuICAgIHJldHVybiBsaW5lc1xuICAgICAgLnNsaWNlKHN0YXJ0LCBlbmQpXG4gICAgICAubWFwKChsaW5lLCBpbmRleCkgPT4ge1xuICAgICAgICBsZXQgbnVtYmVyID0gc3RhcnQgKyAxICsgaW5kZXhcbiAgICAgICAgbGV0IGd1dHRlciA9ICcgJyArICgnICcgKyBudW1iZXIpLnNsaWNlKC1tYXhXaWR0aCkgKyAnIHwgJ1xuICAgICAgICBpZiAobnVtYmVyID09PSB0aGlzLmxpbmUpIHtcbiAgICAgICAgICBsZXQgc3BhY2luZyA9XG4gICAgICAgICAgICBhc2lkZShndXR0ZXIucmVwbGFjZSgvXFxkL2csICcgJykpICtcbiAgICAgICAgICAgIGxpbmUuc2xpY2UoMCwgdGhpcy5jb2x1bW4gLSAxKS5yZXBsYWNlKC9bXlxcdF0vZywgJyAnKVxuICAgICAgICAgIHJldHVybiBtYXJrKCc+JykgKyBhc2lkZShndXR0ZXIpICsgbGluZSArICdcXG4gJyArIHNwYWNpbmcgKyBtYXJrKCdeJylcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJyAnICsgYXNpZGUoZ3V0dGVyKSArIGxpbmVcbiAgICAgIH0pXG4gICAgICAuam9pbignXFxuJylcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIGxldCBjb2RlID0gdGhpcy5zaG93U291cmNlQ29kZSgpXG4gICAgaWYgKGNvZGUpIHtcbiAgICAgIGNvZGUgPSAnXFxuXFxuJyArIGNvZGUgKyAnXFxuJ1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5uYW1lICsgJzogJyArIHRoaXMubWVzc2FnZSArIGNvZGVcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IENzc1N5bnRheEVycm9yXG5Dc3NTeW50YXhFcnJvci5kZWZhdWx0ID0gQ3NzU3ludGF4RXJyb3JcbiJdLCJuYW1lcyI6WyJwaWNvIiwicmVxdWlyZSIsInRlcm1pbmFsSGlnaGxpZ2h0IiwiQ3NzU3ludGF4RXJyb3IiLCJFcnJvciIsImNvbnN0cnVjdG9yIiwibWVzc2FnZSIsImxpbmUiLCJjb2x1bW4iLCJzb3VyY2UiLCJmaWxlIiwicGx1Z2luIiwibmFtZSIsInJlYXNvbiIsImVuZExpbmUiLCJlbmRDb2x1bW4iLCJzZXRNZXNzYWdlIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJzaG93U291cmNlQ29kZSIsImNvbG9yIiwiY3NzIiwiaXNDb2xvclN1cHBvcnRlZCIsImxpbmVzIiwic3BsaXQiLCJzdGFydCIsIk1hdGgiLCJtYXgiLCJlbmQiLCJtaW4iLCJsZW5ndGgiLCJtYXhXaWR0aCIsIlN0cmluZyIsIm1hcmsiLCJhc2lkZSIsImJvbGQiLCJncmF5IiwicmVkIiwiY3JlYXRlQ29sb3JzIiwidGV4dCIsInN0ciIsInNsaWNlIiwibWFwIiwiaW5kZXgiLCJudW1iZXIiLCJndXR0ZXIiLCJzcGFjaW5nIiwicmVwbGFjZSIsImpvaW4iLCJ0b1N0cmluZyIsImNvZGUiLCJtb2R1bGUiLCJleHBvcnRzIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/css-syntax-error.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/declaration.js":
/*!*************************************************!*\
  !*** ./node_modules/postcss/lib/declaration.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet Node = __webpack_require__(/*! ./node */ \"(ssr)/./node_modules/postcss/lib/node.js\");\nclass Declaration extends Node {\n    constructor(defaults){\n        if (defaults && typeof defaults.value !== \"undefined\" && typeof defaults.value !== \"string\") {\n            defaults = {\n                ...defaults,\n                value: String(defaults.value)\n            };\n        }\n        super(defaults);\n        this.type = \"decl\";\n    }\n    get variable() {\n        return this.prop.startsWith(\"--\") || this.prop[0] === \"$\";\n    }\n}\nmodule.exports = Declaration;\nDeclaration.default = Declaration;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvZGVjbGFyYXRpb24uanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxPQUFPQyxtQkFBT0EsQ0FBQztBQUVuQixNQUFNQyxvQkFBb0JGO0lBQ3hCRyxZQUFZQyxRQUFRLENBQUU7UUFDcEIsSUFDRUEsWUFDQSxPQUFPQSxTQUFTQyxLQUFLLEtBQUssZUFDMUIsT0FBT0QsU0FBU0MsS0FBSyxLQUFLLFVBQzFCO1lBQ0FELFdBQVc7Z0JBQUUsR0FBR0EsUUFBUTtnQkFBRUMsT0FBT0MsT0FBT0YsU0FBU0MsS0FBSztZQUFFO1FBQzFEO1FBQ0EsS0FBSyxDQUFDRDtRQUNOLElBQUksQ0FBQ0csSUFBSSxHQUFHO0lBQ2Q7SUFFQSxJQUFJQyxXQUFXO1FBQ2IsT0FBTyxJQUFJLENBQUNDLElBQUksQ0FBQ0MsVUFBVSxDQUFDLFNBQVMsSUFBSSxDQUFDRCxJQUFJLENBQUMsRUFBRSxLQUFLO0lBQ3hEO0FBQ0Y7QUFFQUUsT0FBT0MsT0FBTyxHQUFHVjtBQUNqQkEsWUFBWVcsT0FBTyxHQUFHWCIsInNvdXJjZXMiOlsid2VicGFjazovL2Vjb20vLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvZGVjbGFyYXRpb24uanM/ZTEyMSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubGV0IE5vZGUgPSByZXF1aXJlKCcuL25vZGUnKVxuXG5jbGFzcyBEZWNsYXJhdGlvbiBleHRlbmRzIE5vZGUge1xuICBjb25zdHJ1Y3RvcihkZWZhdWx0cykge1xuICAgIGlmIChcbiAgICAgIGRlZmF1bHRzICYmXG4gICAgICB0eXBlb2YgZGVmYXVsdHMudmFsdWUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICB0eXBlb2YgZGVmYXVsdHMudmFsdWUgIT09ICdzdHJpbmcnXG4gICAgKSB7XG4gICAgICBkZWZhdWx0cyA9IHsgLi4uZGVmYXVsdHMsIHZhbHVlOiBTdHJpbmcoZGVmYXVsdHMudmFsdWUpIH1cbiAgICB9XG4gICAgc3VwZXIoZGVmYXVsdHMpXG4gICAgdGhpcy50eXBlID0gJ2RlY2wnXG4gIH1cblxuICBnZXQgdmFyaWFibGUoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvcC5zdGFydHNXaXRoKCctLScpIHx8IHRoaXMucHJvcFswXSA9PT0gJyQnXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBEZWNsYXJhdGlvblxuRGVjbGFyYXRpb24uZGVmYXVsdCA9IERlY2xhcmF0aW9uXG4iXSwibmFtZXMiOlsiTm9kZSIsInJlcXVpcmUiLCJEZWNsYXJhdGlvbiIsImNvbnN0cnVjdG9yIiwiZGVmYXVsdHMiLCJ2YWx1ZSIsIlN0cmluZyIsInR5cGUiLCJ2YXJpYWJsZSIsInByb3AiLCJzdGFydHNXaXRoIiwibW9kdWxlIiwiZXhwb3J0cyIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/declaration.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/document.js":
/*!**********************************************!*\
  !*** ./node_modules/postcss/lib/document.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet Container = __webpack_require__(/*! ./container */ \"(ssr)/./node_modules/postcss/lib/container.js\");\nlet LazyResult, Processor;\nclass Document extends Container {\n    constructor(defaults){\n        // type needs to be passed to super, otherwise child roots won't be normalized correctly\n        super({\n            type: \"document\",\n            ...defaults\n        });\n        if (!this.nodes) {\n            this.nodes = [];\n        }\n    }\n    toResult(opts = {}) {\n        let lazy = new LazyResult(new Processor(), this, opts);\n        return lazy.stringify();\n    }\n}\nDocument.registerLazyResult = (dependant)=>{\n    LazyResult = dependant;\n};\nDocument.registerProcessor = (dependant)=>{\n    Processor = dependant;\n};\nmodule.exports = Document;\nDocument.default = Document;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvZG9jdW1lbnQuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxZQUFZQyxtQkFBT0EsQ0FBQztBQUV4QixJQUFJQyxZQUFZQztBQUVoQixNQUFNQyxpQkFBaUJKO0lBQ3JCSyxZQUFZQyxRQUFRLENBQUU7UUFDcEIsd0ZBQXdGO1FBQ3hGLEtBQUssQ0FBQztZQUFFQyxNQUFNO1lBQVksR0FBR0QsUUFBUTtRQUFDO1FBRXRDLElBQUksQ0FBQyxJQUFJLENBQUNFLEtBQUssRUFBRTtZQUNmLElBQUksQ0FBQ0EsS0FBSyxHQUFHLEVBQUU7UUFDakI7SUFDRjtJQUVBQyxTQUFTQyxPQUFPLENBQUMsQ0FBQyxFQUFFO1FBQ2xCLElBQUlDLE9BQU8sSUFBSVQsV0FBVyxJQUFJQyxhQUFhLElBQUksRUFBRU87UUFFakQsT0FBT0MsS0FBS0MsU0FBUztJQUN2QjtBQUNGO0FBRUFSLFNBQVNTLGtCQUFrQixHQUFHQyxDQUFBQTtJQUM1QlosYUFBYVk7QUFDZjtBQUVBVixTQUFTVyxpQkFBaUIsR0FBR0QsQ0FBQUE7SUFDM0JYLFlBQVlXO0FBQ2Q7QUFFQUUsT0FBT0MsT0FBTyxHQUFHYjtBQUNqQkEsU0FBU2MsT0FBTyxHQUFHZCIsInNvdXJjZXMiOlsid2VicGFjazovL2Vjb20vLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvZG9jdW1lbnQuanM/YmM1MSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubGV0IENvbnRhaW5lciA9IHJlcXVpcmUoJy4vY29udGFpbmVyJylcblxubGV0IExhenlSZXN1bHQsIFByb2Nlc3NvclxuXG5jbGFzcyBEb2N1bWVudCBleHRlbmRzIENvbnRhaW5lciB7XG4gIGNvbnN0cnVjdG9yKGRlZmF1bHRzKSB7XG4gICAgLy8gdHlwZSBuZWVkcyB0byBiZSBwYXNzZWQgdG8gc3VwZXIsIG90aGVyd2lzZSBjaGlsZCByb290cyB3b24ndCBiZSBub3JtYWxpemVkIGNvcnJlY3RseVxuICAgIHN1cGVyKHsgdHlwZTogJ2RvY3VtZW50JywgLi4uZGVmYXVsdHMgfSlcblxuICAgIGlmICghdGhpcy5ub2Rlcykge1xuICAgICAgdGhpcy5ub2RlcyA9IFtdXG4gICAgfVxuICB9XG5cbiAgdG9SZXN1bHQob3B0cyA9IHt9KSB7XG4gICAgbGV0IGxhenkgPSBuZXcgTGF6eVJlc3VsdChuZXcgUHJvY2Vzc29yKCksIHRoaXMsIG9wdHMpXG5cbiAgICByZXR1cm4gbGF6eS5zdHJpbmdpZnkoKVxuICB9XG59XG5cbkRvY3VtZW50LnJlZ2lzdGVyTGF6eVJlc3VsdCA9IGRlcGVuZGFudCA9PiB7XG4gIExhenlSZXN1bHQgPSBkZXBlbmRhbnRcbn1cblxuRG9jdW1lbnQucmVnaXN0ZXJQcm9jZXNzb3IgPSBkZXBlbmRhbnQgPT4ge1xuICBQcm9jZXNzb3IgPSBkZXBlbmRhbnRcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBEb2N1bWVudFxuRG9jdW1lbnQuZGVmYXVsdCA9IERvY3VtZW50XG4iXSwibmFtZXMiOlsiQ29udGFpbmVyIiwicmVxdWlyZSIsIkxhenlSZXN1bHQiLCJQcm9jZXNzb3IiLCJEb2N1bWVudCIsImNvbnN0cnVjdG9yIiwiZGVmYXVsdHMiLCJ0eXBlIiwibm9kZXMiLCJ0b1Jlc3VsdCIsIm9wdHMiLCJsYXp5Iiwic3RyaW5naWZ5IiwicmVnaXN0ZXJMYXp5UmVzdWx0IiwiZGVwZW5kYW50IiwicmVnaXN0ZXJQcm9jZXNzb3IiLCJtb2R1bGUiLCJleHBvcnRzIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/document.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/fromJSON.js":
/*!**********************************************!*\
  !*** ./node_modules/postcss/lib/fromJSON.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet Declaration = __webpack_require__(/*! ./declaration */ \"(ssr)/./node_modules/postcss/lib/declaration.js\");\nlet PreviousMap = __webpack_require__(/*! ./previous-map */ \"(ssr)/./node_modules/postcss/lib/previous-map.js\");\nlet Comment = __webpack_require__(/*! ./comment */ \"(ssr)/./node_modules/postcss/lib/comment.js\");\nlet AtRule = __webpack_require__(/*! ./at-rule */ \"(ssr)/./node_modules/postcss/lib/at-rule.js\");\nlet Input = __webpack_require__(/*! ./input */ \"(ssr)/./node_modules/postcss/lib/input.js\");\nlet Root = __webpack_require__(/*! ./root */ \"(ssr)/./node_modules/postcss/lib/root.js\");\nlet Rule = __webpack_require__(/*! ./rule */ \"(ssr)/./node_modules/postcss/lib/rule.js\");\nfunction fromJSON(json, inputs) {\n    if (Array.isArray(json)) return json.map((n)=>fromJSON(n));\n    let { inputs: ownInputs, ...defaults } = json;\n    if (ownInputs) {\n        inputs = [];\n        for (let input of ownInputs){\n            let inputHydrated = {\n                ...input,\n                __proto__: Input.prototype\n            };\n            if (inputHydrated.map) {\n                inputHydrated.map = {\n                    ...inputHydrated.map,\n                    __proto__: PreviousMap.prototype\n                };\n            }\n            inputs.push(inputHydrated);\n        }\n    }\n    if (defaults.nodes) {\n        defaults.nodes = json.nodes.map((n)=>fromJSON(n, inputs));\n    }\n    if (defaults.source) {\n        let { inputId, ...source } = defaults.source;\n        defaults.source = source;\n        if (inputId != null) {\n            defaults.source.input = inputs[inputId];\n        }\n    }\n    if (defaults.type === \"root\") {\n        return new Root(defaults);\n    } else if (defaults.type === \"decl\") {\n        return new Declaration(defaults);\n    } else if (defaults.type === \"rule\") {\n        return new Rule(defaults);\n    } else if (defaults.type === \"comment\") {\n        return new Comment(defaults);\n    } else if (defaults.type === \"atrule\") {\n        return new AtRule(defaults);\n    } else {\n        throw new Error(\"Unknown node type: \" + json.type);\n    }\n}\nmodule.exports = fromJSON;\nfromJSON.default = fromJSON;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvZnJvbUpTT04uanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxjQUFjQyxtQkFBT0EsQ0FBQztBQUMxQixJQUFJQyxjQUFjRCxtQkFBT0EsQ0FBQztBQUMxQixJQUFJRSxVQUFVRixtQkFBT0EsQ0FBQztBQUN0QixJQUFJRyxTQUFTSCxtQkFBT0EsQ0FBQztBQUNyQixJQUFJSSxRQUFRSixtQkFBT0EsQ0FBQztBQUNwQixJQUFJSyxPQUFPTCxtQkFBT0EsQ0FBQztBQUNuQixJQUFJTSxPQUFPTixtQkFBT0EsQ0FBQztBQUVuQixTQUFTTyxTQUFTQyxJQUFJLEVBQUVDLE1BQU07SUFDNUIsSUFBSUMsTUFBTUMsT0FBTyxDQUFDSCxPQUFPLE9BQU9BLEtBQUtJLEdBQUcsQ0FBQ0MsQ0FBQUEsSUFBS04sU0FBU007SUFFdkQsSUFBSSxFQUFFSixRQUFRSyxTQUFTLEVBQUUsR0FBR0MsVUFBVSxHQUFHUDtJQUN6QyxJQUFJTSxXQUFXO1FBQ2JMLFNBQVMsRUFBRTtRQUNYLEtBQUssSUFBSU8sU0FBU0YsVUFBVztZQUMzQixJQUFJRyxnQkFBZ0I7Z0JBQUUsR0FBR0QsS0FBSztnQkFBRUUsV0FBV2QsTUFBTWUsU0FBUztZQUFDO1lBQzNELElBQUlGLGNBQWNMLEdBQUcsRUFBRTtnQkFDckJLLGNBQWNMLEdBQUcsR0FBRztvQkFDbEIsR0FBR0ssY0FBY0wsR0FBRztvQkFDcEJNLFdBQVdqQixZQUFZa0IsU0FBUztnQkFDbEM7WUFDRjtZQUNBVixPQUFPVyxJQUFJLENBQUNIO1FBQ2Q7SUFDRjtJQUNBLElBQUlGLFNBQVNNLEtBQUssRUFBRTtRQUNsQk4sU0FBU00sS0FBSyxHQUFHYixLQUFLYSxLQUFLLENBQUNULEdBQUcsQ0FBQ0MsQ0FBQUEsSUFBS04sU0FBU00sR0FBR0o7SUFDbkQ7SUFDQSxJQUFJTSxTQUFTTyxNQUFNLEVBQUU7UUFDbkIsSUFBSSxFQUFFQyxPQUFPLEVBQUUsR0FBR0QsUUFBUSxHQUFHUCxTQUFTTyxNQUFNO1FBQzVDUCxTQUFTTyxNQUFNLEdBQUdBO1FBQ2xCLElBQUlDLFdBQVcsTUFBTTtZQUNuQlIsU0FBU08sTUFBTSxDQUFDTixLQUFLLEdBQUdQLE1BQU0sQ0FBQ2MsUUFBUTtRQUN6QztJQUNGO0lBQ0EsSUFBSVIsU0FBU1MsSUFBSSxLQUFLLFFBQVE7UUFDNUIsT0FBTyxJQUFJbkIsS0FBS1U7SUFDbEIsT0FBTyxJQUFJQSxTQUFTUyxJQUFJLEtBQUssUUFBUTtRQUNuQyxPQUFPLElBQUl6QixZQUFZZ0I7SUFDekIsT0FBTyxJQUFJQSxTQUFTUyxJQUFJLEtBQUssUUFBUTtRQUNuQyxPQUFPLElBQUlsQixLQUFLUztJQUNsQixPQUFPLElBQUlBLFNBQVNTLElBQUksS0FBSyxXQUFXO1FBQ3RDLE9BQU8sSUFBSXRCLFFBQVFhO0lBQ3JCLE9BQU8sSUFBSUEsU0FBU1MsSUFBSSxLQUFLLFVBQVU7UUFDckMsT0FBTyxJQUFJckIsT0FBT1k7SUFDcEIsT0FBTztRQUNMLE1BQU0sSUFBSVUsTUFBTSx3QkFBd0JqQixLQUFLZ0IsSUFBSTtJQUNuRDtBQUNGO0FBRUFFLE9BQU9DLE9BQU8sR0FBR3BCO0FBQ2pCQSxTQUFTcUIsT0FBTyxHQUFHckIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lY29tLy4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MvbGliL2Zyb21KU09OLmpzP2EzNzYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmxldCBEZWNsYXJhdGlvbiA9IHJlcXVpcmUoJy4vZGVjbGFyYXRpb24nKVxubGV0IFByZXZpb3VzTWFwID0gcmVxdWlyZSgnLi9wcmV2aW91cy1tYXAnKVxubGV0IENvbW1lbnQgPSByZXF1aXJlKCcuL2NvbW1lbnQnKVxubGV0IEF0UnVsZSA9IHJlcXVpcmUoJy4vYXQtcnVsZScpXG5sZXQgSW5wdXQgPSByZXF1aXJlKCcuL2lucHV0JylcbmxldCBSb290ID0gcmVxdWlyZSgnLi9yb290JylcbmxldCBSdWxlID0gcmVxdWlyZSgnLi9ydWxlJylcblxuZnVuY3Rpb24gZnJvbUpTT04oanNvbiwgaW5wdXRzKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGpzb24pKSByZXR1cm4ganNvbi5tYXAobiA9PiBmcm9tSlNPTihuKSlcblxuICBsZXQgeyBpbnB1dHM6IG93bklucHV0cywgLi4uZGVmYXVsdHMgfSA9IGpzb25cbiAgaWYgKG93bklucHV0cykge1xuICAgIGlucHV0cyA9IFtdXG4gICAgZm9yIChsZXQgaW5wdXQgb2Ygb3duSW5wdXRzKSB7XG4gICAgICBsZXQgaW5wdXRIeWRyYXRlZCA9IHsgLi4uaW5wdXQsIF9fcHJvdG9fXzogSW5wdXQucHJvdG90eXBlIH1cbiAgICAgIGlmIChpbnB1dEh5ZHJhdGVkLm1hcCkge1xuICAgICAgICBpbnB1dEh5ZHJhdGVkLm1hcCA9IHtcbiAgICAgICAgICAuLi5pbnB1dEh5ZHJhdGVkLm1hcCxcbiAgICAgICAgICBfX3Byb3RvX186IFByZXZpb3VzTWFwLnByb3RvdHlwZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpbnB1dHMucHVzaChpbnB1dEh5ZHJhdGVkKVxuICAgIH1cbiAgfVxuICBpZiAoZGVmYXVsdHMubm9kZXMpIHtcbiAgICBkZWZhdWx0cy5ub2RlcyA9IGpzb24ubm9kZXMubWFwKG4gPT4gZnJvbUpTT04obiwgaW5wdXRzKSlcbiAgfVxuICBpZiAoZGVmYXVsdHMuc291cmNlKSB7XG4gICAgbGV0IHsgaW5wdXRJZCwgLi4uc291cmNlIH0gPSBkZWZhdWx0cy5zb3VyY2VcbiAgICBkZWZhdWx0cy5zb3VyY2UgPSBzb3VyY2VcbiAgICBpZiAoaW5wdXRJZCAhPSBudWxsKSB7XG4gICAgICBkZWZhdWx0cy5zb3VyY2UuaW5wdXQgPSBpbnB1dHNbaW5wdXRJZF1cbiAgICB9XG4gIH1cbiAgaWYgKGRlZmF1bHRzLnR5cGUgPT09ICdyb290Jykge1xuICAgIHJldHVybiBuZXcgUm9vdChkZWZhdWx0cylcbiAgfSBlbHNlIGlmIChkZWZhdWx0cy50eXBlID09PSAnZGVjbCcpIHtcbiAgICByZXR1cm4gbmV3IERlY2xhcmF0aW9uKGRlZmF1bHRzKVxuICB9IGVsc2UgaWYgKGRlZmF1bHRzLnR5cGUgPT09ICdydWxlJykge1xuICAgIHJldHVybiBuZXcgUnVsZShkZWZhdWx0cylcbiAgfSBlbHNlIGlmIChkZWZhdWx0cy50eXBlID09PSAnY29tbWVudCcpIHtcbiAgICByZXR1cm4gbmV3IENvbW1lbnQoZGVmYXVsdHMpXG4gIH0gZWxzZSBpZiAoZGVmYXVsdHMudHlwZSA9PT0gJ2F0cnVsZScpIHtcbiAgICByZXR1cm4gbmV3IEF0UnVsZShkZWZhdWx0cylcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gbm9kZSB0eXBlOiAnICsganNvbi50eXBlKVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnJvbUpTT05cbmZyb21KU09OLmRlZmF1bHQgPSBmcm9tSlNPTlxuIl0sIm5hbWVzIjpbIkRlY2xhcmF0aW9uIiwicmVxdWlyZSIsIlByZXZpb3VzTWFwIiwiQ29tbWVudCIsIkF0UnVsZSIsIklucHV0IiwiUm9vdCIsIlJ1bGUiLCJmcm9tSlNPTiIsImpzb24iLCJpbnB1dHMiLCJBcnJheSIsImlzQXJyYXkiLCJtYXAiLCJuIiwib3duSW5wdXRzIiwiZGVmYXVsdHMiLCJpbnB1dCIsImlucHV0SHlkcmF0ZWQiLCJfX3Byb3RvX18iLCJwcm90b3R5cGUiLCJwdXNoIiwibm9kZXMiLCJzb3VyY2UiLCJpbnB1dElkIiwidHlwZSIsIkVycm9yIiwibW9kdWxlIiwiZXhwb3J0cyIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/fromJSON.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/input.js":
/*!*******************************************!*\
  !*** ./node_modules/postcss/lib/input.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet { SourceMapConsumer, SourceMapGenerator } = __webpack_require__(/*! source-map-js */ \"(ssr)/./node_modules/source-map-js/source-map.js\");\nlet { fileURLToPath, pathToFileURL } = __webpack_require__(/*! url */ \"url\");\nlet { isAbsolute, resolve } = __webpack_require__(/*! path */ \"path\");\nlet { nanoid } = __webpack_require__(/*! nanoid/non-secure */ \"(ssr)/./node_modules/nanoid/non-secure/index.cjs\");\nlet terminalHighlight = __webpack_require__(/*! ./terminal-highlight */ \"(ssr)/./node_modules/postcss/lib/terminal-highlight.js\");\nlet CssSyntaxError = __webpack_require__(/*! ./css-syntax-error */ \"(ssr)/./node_modules/postcss/lib/css-syntax-error.js\");\nlet PreviousMap = __webpack_require__(/*! ./previous-map */ \"(ssr)/./node_modules/postcss/lib/previous-map.js\");\nlet fromOffsetCache = Symbol(\"fromOffsetCache\");\nlet sourceMapAvailable = Boolean(SourceMapConsumer && SourceMapGenerator);\nlet pathAvailable = Boolean(resolve && isAbsolute);\nclass Input {\n    constructor(css, opts = {}){\n        if (css === null || typeof css === \"undefined\" || typeof css === \"object\" && !css.toString) {\n            throw new Error(`PostCSS received ${css} instead of CSS string`);\n        }\n        this.css = css.toString();\n        if (this.css[0] === \"\\uFEFF\" || this.css[0] === \"￾\") {\n            this.hasBOM = true;\n            this.css = this.css.slice(1);\n        } else {\n            this.hasBOM = false;\n        }\n        if (opts.from) {\n            if (!pathAvailable || /^\\w+:\\/\\//.test(opts.from) || isAbsolute(opts.from)) {\n                this.file = opts.from;\n            } else {\n                this.file = resolve(opts.from);\n            }\n        }\n        if (pathAvailable && sourceMapAvailable) {\n            let map = new PreviousMap(this.css, opts);\n            if (map.text) {\n                this.map = map;\n                let file = map.consumer().file;\n                if (!this.file && file) this.file = this.mapResolve(file);\n            }\n        }\n        if (!this.file) {\n            this.id = \"<input css \" + nanoid(6) + \">\";\n        }\n        if (this.map) this.map.file = this.from;\n    }\n    error(message, line, column, opts = {}) {\n        let result, endLine, endColumn;\n        if (line && typeof line === \"object\") {\n            let start = line;\n            let end = column;\n            if (typeof start.offset === \"number\") {\n                let pos = this.fromOffset(start.offset);\n                line = pos.line;\n                column = pos.col;\n            } else {\n                line = start.line;\n                column = start.column;\n            }\n            if (typeof end.offset === \"number\") {\n                let pos = this.fromOffset(end.offset);\n                endLine = pos.line;\n                endColumn = pos.col;\n            } else {\n                endLine = end.line;\n                endColumn = end.column;\n            }\n        } else if (!column) {\n            let pos = this.fromOffset(line);\n            line = pos.line;\n            column = pos.col;\n        }\n        let origin = this.origin(line, column, endLine, endColumn);\n        if (origin) {\n            result = new CssSyntaxError(message, origin.endLine === undefined ? origin.line : {\n                column: origin.column,\n                line: origin.line\n            }, origin.endLine === undefined ? origin.column : {\n                column: origin.endColumn,\n                line: origin.endLine\n            }, origin.source, origin.file, opts.plugin);\n        } else {\n            result = new CssSyntaxError(message, endLine === undefined ? line : {\n                column,\n                line\n            }, endLine === undefined ? column : {\n                column: endColumn,\n                line: endLine\n            }, this.css, this.file, opts.plugin);\n        }\n        result.input = {\n            column,\n            endColumn,\n            endLine,\n            line,\n            source: this.css\n        };\n        if (this.file) {\n            if (pathToFileURL) {\n                result.input.url = pathToFileURL(this.file).toString();\n            }\n            result.input.file = this.file;\n        }\n        return result;\n    }\n    fromOffset(offset) {\n        let lastLine, lineToIndex;\n        if (!this[fromOffsetCache]) {\n            let lines = this.css.split(\"\\n\");\n            lineToIndex = new Array(lines.length);\n            let prevIndex = 0;\n            for(let i = 0, l = lines.length; i < l; i++){\n                lineToIndex[i] = prevIndex;\n                prevIndex += lines[i].length + 1;\n            }\n            this[fromOffsetCache] = lineToIndex;\n        } else {\n            lineToIndex = this[fromOffsetCache];\n        }\n        lastLine = lineToIndex[lineToIndex.length - 1];\n        let min = 0;\n        if (offset >= lastLine) {\n            min = lineToIndex.length - 1;\n        } else {\n            let max = lineToIndex.length - 2;\n            let mid;\n            while(min < max){\n                mid = min + (max - min >> 1);\n                if (offset < lineToIndex[mid]) {\n                    max = mid - 1;\n                } else if (offset >= lineToIndex[mid + 1]) {\n                    min = mid + 1;\n                } else {\n                    min = mid;\n                    break;\n                }\n            }\n        }\n        return {\n            col: offset - lineToIndex[min] + 1,\n            line: min + 1\n        };\n    }\n    mapResolve(file) {\n        if (/^\\w+:\\/\\//.test(file)) {\n            return file;\n        }\n        return resolve(this.map.consumer().sourceRoot || this.map.root || \".\", file);\n    }\n    origin(line, column, endLine, endColumn) {\n        if (!this.map) return false;\n        let consumer = this.map.consumer();\n        let from = consumer.originalPositionFor({\n            column,\n            line\n        });\n        if (!from.source) return false;\n        let to;\n        if (typeof endLine === \"number\") {\n            to = consumer.originalPositionFor({\n                column: endColumn,\n                line: endLine\n            });\n        }\n        let fromUrl;\n        if (isAbsolute(from.source)) {\n            fromUrl = pathToFileURL(from.source);\n        } else {\n            fromUrl = new URL(from.source, this.map.consumer().sourceRoot || pathToFileURL(this.map.mapFile));\n        }\n        let result = {\n            column: from.column,\n            endColumn: to && to.column,\n            endLine: to && to.line,\n            line: from.line,\n            url: fromUrl.toString()\n        };\n        if (fromUrl.protocol === \"file:\") {\n            if (fileURLToPath) {\n                result.file = fileURLToPath(fromUrl);\n            } else {\n                /* c8 ignore next 2 */ throw new Error(`file: protocol is not available in this PostCSS build`);\n            }\n        }\n        let source = consumer.sourceContentFor(from.source);\n        if (source) result.source = source;\n        return result;\n    }\n    toJSON() {\n        let json = {};\n        for (let name of [\n            \"hasBOM\",\n            \"css\",\n            \"file\",\n            \"id\"\n        ]){\n            if (this[name] != null) {\n                json[name] = this[name];\n            }\n        }\n        if (this.map) {\n            json.map = {\n                ...this.map\n            };\n            if (json.map.consumerCache) {\n                json.map.consumerCache = undefined;\n            }\n        }\n        return json;\n    }\n    get from() {\n        return this.file || this.id;\n    }\n}\nmodule.exports = Input;\nInput.default = Input;\nif (terminalHighlight && terminalHighlight.registerInput) {\n    terminalHighlight.registerInput(Input);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/input.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/lazy-result.js":
/*!*************************************************!*\
  !*** ./node_modules/postcss/lib/lazy-result.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet { isClean, my } = __webpack_require__(/*! ./symbols */ \"(ssr)/./node_modules/postcss/lib/symbols.js\");\nlet MapGenerator = __webpack_require__(/*! ./map-generator */ \"(ssr)/./node_modules/postcss/lib/map-generator.js\");\nlet stringify = __webpack_require__(/*! ./stringify */ \"(ssr)/./node_modules/postcss/lib/stringify.js\");\nlet Container = __webpack_require__(/*! ./container */ \"(ssr)/./node_modules/postcss/lib/container.js\");\nlet Document = __webpack_require__(/*! ./document */ \"(ssr)/./node_modules/postcss/lib/document.js\");\nlet warnOnce = __webpack_require__(/*! ./warn-once */ \"(ssr)/./node_modules/postcss/lib/warn-once.js\");\nlet Result = __webpack_require__(/*! ./result */ \"(ssr)/./node_modules/postcss/lib/result.js\");\nlet parse = __webpack_require__(/*! ./parse */ \"(ssr)/./node_modules/postcss/lib/parse.js\");\nlet Root = __webpack_require__(/*! ./root */ \"(ssr)/./node_modules/postcss/lib/root.js\");\nconst TYPE_TO_CLASS_NAME = {\n    atrule: \"AtRule\",\n    comment: \"Comment\",\n    decl: \"Declaration\",\n    document: \"Document\",\n    root: \"Root\",\n    rule: \"Rule\"\n};\nconst PLUGIN_PROPS = {\n    AtRule: true,\n    AtRuleExit: true,\n    Comment: true,\n    CommentExit: true,\n    Declaration: true,\n    DeclarationExit: true,\n    Document: true,\n    DocumentExit: true,\n    Once: true,\n    OnceExit: true,\n    postcssPlugin: true,\n    prepare: true,\n    Root: true,\n    RootExit: true,\n    Rule: true,\n    RuleExit: true\n};\nconst NOT_VISITORS = {\n    Once: true,\n    postcssPlugin: true,\n    prepare: true\n};\nconst CHILDREN = 0;\nfunction isPromise(obj) {\n    return typeof obj === \"object\" && typeof obj.then === \"function\";\n}\nfunction getEvents(node) {\n    let key = false;\n    let type = TYPE_TO_CLASS_NAME[node.type];\n    if (node.type === \"decl\") {\n        key = node.prop.toLowerCase();\n    } else if (node.type === \"atrule\") {\n        key = node.name.toLowerCase();\n    }\n    if (key && node.append) {\n        return [\n            type,\n            type + \"-\" + key,\n            CHILDREN,\n            type + \"Exit\",\n            type + \"Exit-\" + key\n        ];\n    } else if (key) {\n        return [\n            type,\n            type + \"-\" + key,\n            type + \"Exit\",\n            type + \"Exit-\" + key\n        ];\n    } else if (node.append) {\n        return [\n            type,\n            CHILDREN,\n            type + \"Exit\"\n        ];\n    } else {\n        return [\n            type,\n            type + \"Exit\"\n        ];\n    }\n}\nfunction toStack(node) {\n    let events;\n    if (node.type === \"document\") {\n        events = [\n            \"Document\",\n            CHILDREN,\n            \"DocumentExit\"\n        ];\n    } else if (node.type === \"root\") {\n        events = [\n            \"Root\",\n            CHILDREN,\n            \"RootExit\"\n        ];\n    } else {\n        events = getEvents(node);\n    }\n    return {\n        eventIndex: 0,\n        events,\n        iterator: 0,\n        node,\n        visitorIndex: 0,\n        visitors: []\n    };\n}\nfunction cleanMarks(node) {\n    node[isClean] = false;\n    if (node.nodes) node.nodes.forEach((i)=>cleanMarks(i));\n    return node;\n}\nlet postcss = {};\nclass LazyResult {\n    constructor(processor, css, opts){\n        this.stringified = false;\n        this.processed = false;\n        let root;\n        if (typeof css === \"object\" && css !== null && (css.type === \"root\" || css.type === \"document\")) {\n            root = cleanMarks(css);\n        } else if (css instanceof LazyResult || css instanceof Result) {\n            root = cleanMarks(css.root);\n            if (css.map) {\n                if (typeof opts.map === \"undefined\") opts.map = {};\n                if (!opts.map.inline) opts.map.inline = false;\n                opts.map.prev = css.map;\n            }\n        } else {\n            let parser = parse;\n            if (opts.syntax) parser = opts.syntax.parse;\n            if (opts.parser) parser = opts.parser;\n            if (parser.parse) parser = parser.parse;\n            try {\n                root = parser(css, opts);\n            } catch (error) {\n                this.processed = true;\n                this.error = error;\n            }\n            if (root && !root[my]) {\n                /* c8 ignore next 2 */ Container.rebuild(root);\n            }\n        }\n        this.result = new Result(processor, root, opts);\n        this.helpers = {\n            ...postcss,\n            postcss,\n            result: this.result\n        };\n        this.plugins = this.processor.plugins.map((plugin)=>{\n            if (typeof plugin === \"object\" && plugin.prepare) {\n                return {\n                    ...plugin,\n                    ...plugin.prepare(this.result)\n                };\n            } else {\n                return plugin;\n            }\n        });\n    }\n    async() {\n        if (this.error) return Promise.reject(this.error);\n        if (this.processed) return Promise.resolve(this.result);\n        if (!this.processing) {\n            this.processing = this.runAsync();\n        }\n        return this.processing;\n    }\n    catch(onRejected) {\n        return this.async().catch(onRejected);\n    }\n    finally(onFinally) {\n        return this.async().then(onFinally, onFinally);\n    }\n    getAsyncError() {\n        throw new Error(\"Use process(css).then(cb) to work with async plugins\");\n    }\n    handleError(error, node) {\n        let plugin = this.result.lastPlugin;\n        try {\n            if (node) node.addToError(error);\n            this.error = error;\n            if (error.name === \"CssSyntaxError\" && !error.plugin) {\n                error.plugin = plugin.postcssPlugin;\n                error.setMessage();\n            } else if (plugin.postcssVersion) {\n                if (true) {\n                    let pluginName = plugin.postcssPlugin;\n                    let pluginVer = plugin.postcssVersion;\n                    let runtimeVer = this.result.processor.version;\n                    let a = pluginVer.split(\".\");\n                    let b = runtimeVer.split(\".\");\n                    if (a[0] !== b[0] || parseInt(a[1]) > parseInt(b[1])) {\n                        // eslint-disable-next-line no-console\n                        console.error(\"Unknown error from PostCSS plugin. Your current PostCSS \" + \"version is \" + runtimeVer + \", but \" + pluginName + \" uses \" + pluginVer + \". Perhaps this is the source of the error below.\");\n                    }\n                }\n            }\n        } catch (err) {\n            /* c8 ignore next 3 */ // eslint-disable-next-line no-console\n            if (console && console.error) console.error(err);\n        }\n        return error;\n    }\n    prepareVisitors() {\n        this.listeners = {};\n        let add = (plugin, type, cb)=>{\n            if (!this.listeners[type]) this.listeners[type] = [];\n            this.listeners[type].push([\n                plugin,\n                cb\n            ]);\n        };\n        for (let plugin of this.plugins){\n            if (typeof plugin === \"object\") {\n                for(let event in plugin){\n                    if (!PLUGIN_PROPS[event] && /^[A-Z]/.test(event)) {\n                        throw new Error(`Unknown event ${event} in ${plugin.postcssPlugin}. ` + `Try to update PostCSS (${this.processor.version} now).`);\n                    }\n                    if (!NOT_VISITORS[event]) {\n                        if (typeof plugin[event] === \"object\") {\n                            for(let filter in plugin[event]){\n                                if (filter === \"*\") {\n                                    add(plugin, event, plugin[event][filter]);\n                                } else {\n                                    add(plugin, event + \"-\" + filter.toLowerCase(), plugin[event][filter]);\n                                }\n                            }\n                        } else if (typeof plugin[event] === \"function\") {\n                            add(plugin, event, plugin[event]);\n                        }\n                    }\n                }\n            }\n        }\n        this.hasListener = Object.keys(this.listeners).length > 0;\n    }\n    async runAsync() {\n        this.plugin = 0;\n        for(let i = 0; i < this.plugins.length; i++){\n            let plugin = this.plugins[i];\n            let promise = this.runOnRoot(plugin);\n            if (isPromise(promise)) {\n                try {\n                    await promise;\n                } catch (error) {\n                    throw this.handleError(error);\n                }\n            }\n        }\n        this.prepareVisitors();\n        if (this.hasListener) {\n            let root = this.result.root;\n            while(!root[isClean]){\n                root[isClean] = true;\n                let stack = [\n                    toStack(root)\n                ];\n                while(stack.length > 0){\n                    let promise = this.visitTick(stack);\n                    if (isPromise(promise)) {\n                        try {\n                            await promise;\n                        } catch (e) {\n                            let node = stack[stack.length - 1].node;\n                            throw this.handleError(e, node);\n                        }\n                    }\n                }\n            }\n            if (this.listeners.OnceExit) {\n                for (let [plugin, visitor] of this.listeners.OnceExit){\n                    this.result.lastPlugin = plugin;\n                    try {\n                        if (root.type === \"document\") {\n                            let roots = root.nodes.map((subRoot)=>visitor(subRoot, this.helpers));\n                            await Promise.all(roots);\n                        } else {\n                            await visitor(root, this.helpers);\n                        }\n                    } catch (e) {\n                        throw this.handleError(e);\n                    }\n                }\n            }\n        }\n        this.processed = true;\n        return this.stringify();\n    }\n    runOnRoot(plugin) {\n        this.result.lastPlugin = plugin;\n        try {\n            if (typeof plugin === \"object\" && plugin.Once) {\n                if (this.result.root.type === \"document\") {\n                    let roots = this.result.root.nodes.map((root)=>plugin.Once(root, this.helpers));\n                    if (isPromise(roots[0])) {\n                        return Promise.all(roots);\n                    }\n                    return roots;\n                }\n                return plugin.Once(this.result.root, this.helpers);\n            } else if (typeof plugin === \"function\") {\n                return plugin(this.result.root, this.result);\n            }\n        } catch (error) {\n            throw this.handleError(error);\n        }\n    }\n    stringify() {\n        if (this.error) throw this.error;\n        if (this.stringified) return this.result;\n        this.stringified = true;\n        this.sync();\n        let opts = this.result.opts;\n        let str = stringify;\n        if (opts.syntax) str = opts.syntax.stringify;\n        if (opts.stringifier) str = opts.stringifier;\n        if (str.stringify) str = str.stringify;\n        let map = new MapGenerator(str, this.result.root, this.result.opts);\n        let data = map.generate();\n        this.result.css = data[0];\n        this.result.map = data[1];\n        return this.result;\n    }\n    sync() {\n        if (this.error) throw this.error;\n        if (this.processed) return this.result;\n        this.processed = true;\n        if (this.processing) {\n            throw this.getAsyncError();\n        }\n        for (let plugin of this.plugins){\n            let promise = this.runOnRoot(plugin);\n            if (isPromise(promise)) {\n                throw this.getAsyncError();\n            }\n        }\n        this.prepareVisitors();\n        if (this.hasListener) {\n            let root = this.result.root;\n            while(!root[isClean]){\n                root[isClean] = true;\n                this.walkSync(root);\n            }\n            if (this.listeners.OnceExit) {\n                if (root.type === \"document\") {\n                    for (let subRoot of root.nodes){\n                        this.visitSync(this.listeners.OnceExit, subRoot);\n                    }\n                } else {\n                    this.visitSync(this.listeners.OnceExit, root);\n                }\n            }\n        }\n        return this.result;\n    }\n    then(onFulfilled, onRejected) {\n        if (true) {\n            if (!(\"from\" in this.opts)) {\n                warnOnce(\"Without `from` option PostCSS could generate wrong source map \" + \"and will not find Browserslist config. Set it to CSS file path \" + \"or to `undefined` to prevent this warning.\");\n            }\n        }\n        return this.async().then(onFulfilled, onRejected);\n    }\n    toString() {\n        return this.css;\n    }\n    visitSync(visitors, node) {\n        for (let [plugin, visitor] of visitors){\n            this.result.lastPlugin = plugin;\n            let promise;\n            try {\n                promise = visitor(node, this.helpers);\n            } catch (e) {\n                throw this.handleError(e, node.proxyOf);\n            }\n            if (node.type !== \"root\" && node.type !== \"document\" && !node.parent) {\n                return true;\n            }\n            if (isPromise(promise)) {\n                throw this.getAsyncError();\n            }\n        }\n    }\n    visitTick(stack) {\n        let visit = stack[stack.length - 1];\n        let { node, visitors } = visit;\n        if (node.type !== \"root\" && node.type !== \"document\" && !node.parent) {\n            stack.pop();\n            return;\n        }\n        if (visitors.length > 0 && visit.visitorIndex < visitors.length) {\n            let [plugin, visitor] = visitors[visit.visitorIndex];\n            visit.visitorIndex += 1;\n            if (visit.visitorIndex === visitors.length) {\n                visit.visitors = [];\n                visit.visitorIndex = 0;\n            }\n            this.result.lastPlugin = plugin;\n            try {\n                return visitor(node.toProxy(), this.helpers);\n            } catch (e) {\n                throw this.handleError(e, node);\n            }\n        }\n        if (visit.iterator !== 0) {\n            let iterator = visit.iterator;\n            let child;\n            while(child = node.nodes[node.indexes[iterator]]){\n                node.indexes[iterator] += 1;\n                if (!child[isClean]) {\n                    child[isClean] = true;\n                    stack.push(toStack(child));\n                    return;\n                }\n            }\n            visit.iterator = 0;\n            delete node.indexes[iterator];\n        }\n        let events = visit.events;\n        while(visit.eventIndex < events.length){\n            let event = events[visit.eventIndex];\n            visit.eventIndex += 1;\n            if (event === CHILDREN) {\n                if (node.nodes && node.nodes.length) {\n                    node[isClean] = true;\n                    visit.iterator = node.getIterator();\n                }\n                return;\n            } else if (this.listeners[event]) {\n                visit.visitors = this.listeners[event];\n                return;\n            }\n        }\n        stack.pop();\n    }\n    walkSync(node) {\n        node[isClean] = true;\n        let events = getEvents(node);\n        for (let event of events){\n            if (event === CHILDREN) {\n                if (node.nodes) {\n                    node.each((child)=>{\n                        if (!child[isClean]) this.walkSync(child);\n                    });\n                }\n            } else {\n                let visitors = this.listeners[event];\n                if (visitors) {\n                    if (this.visitSync(visitors, node.toProxy())) return;\n                }\n            }\n        }\n    }\n    warnings() {\n        return this.sync().warnings();\n    }\n    get content() {\n        return this.stringify().content;\n    }\n    get css() {\n        return this.stringify().css;\n    }\n    get map() {\n        return this.stringify().map;\n    }\n    get messages() {\n        return this.sync().messages;\n    }\n    get opts() {\n        return this.result.opts;\n    }\n    get processor() {\n        return this.result.processor;\n    }\n    get root() {\n        return this.sync().root;\n    }\n    get [Symbol.toStringTag]() {\n        return \"LazyResult\";\n    }\n}\nLazyResult.registerPostcss = (dependant)=>{\n    postcss = dependant;\n};\nmodule.exports = LazyResult;\nLazyResult.default = LazyResult;\nRoot.registerLazyResult(LazyResult);\nDocument.registerLazyResult(LazyResult);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/lazy-result.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/list.js":
/*!******************************************!*\
  !*** ./node_modules/postcss/lib/list.js ***!
  \******************************************/
/***/ ((module) => {

eval("\nlet list = {\n    comma (string) {\n        return list.split(string, [\n            \",\"\n        ], true);\n    },\n    space (string) {\n        let spaces = [\n            \" \",\n            \"\\n\",\n            \"\t\"\n        ];\n        return list.split(string, spaces);\n    },\n    split (string, separators, last) {\n        let array = [];\n        let current = \"\";\n        let split = false;\n        let func = 0;\n        let inQuote = false;\n        let prevQuote = \"\";\n        let escape = false;\n        for (let letter of string){\n            if (escape) {\n                escape = false;\n            } else if (letter === \"\\\\\") {\n                escape = true;\n            } else if (inQuote) {\n                if (letter === prevQuote) {\n                    inQuote = false;\n                }\n            } else if (letter === '\"' || letter === \"'\") {\n                inQuote = true;\n                prevQuote = letter;\n            } else if (letter === \"(\") {\n                func += 1;\n            } else if (letter === \")\") {\n                if (func > 0) func -= 1;\n            } else if (func === 0) {\n                if (separators.includes(letter)) split = true;\n            }\n            if (split) {\n                if (current !== \"\") array.push(current.trim());\n                current = \"\";\n                split = false;\n            } else {\n                current += letter;\n            }\n        }\n        if (last || current !== \"\") array.push(current.trim());\n        return array;\n    }\n};\nmodule.exports = list;\nlist.default = list;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvbGlzdC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLE9BQU87SUFDVEMsT0FBTUMsTUFBTTtRQUNWLE9BQU9GLEtBQUtHLEtBQUssQ0FBQ0QsUUFBUTtZQUFDO1NBQUksRUFBRTtJQUNuQztJQUVBRSxPQUFNRixNQUFNO1FBQ1YsSUFBSUcsU0FBUztZQUFDO1lBQUs7WUFBTTtTQUFLO1FBQzlCLE9BQU9MLEtBQUtHLEtBQUssQ0FBQ0QsUUFBUUc7SUFDNUI7SUFFQUYsT0FBTUQsTUFBTSxFQUFFSSxVQUFVLEVBQUVDLElBQUk7UUFDNUIsSUFBSUMsUUFBUSxFQUFFO1FBQ2QsSUFBSUMsVUFBVTtRQUNkLElBQUlOLFFBQVE7UUFFWixJQUFJTyxPQUFPO1FBQ1gsSUFBSUMsVUFBVTtRQUNkLElBQUlDLFlBQVk7UUFDaEIsSUFBSUMsU0FBUztRQUViLEtBQUssSUFBSUMsVUFBVVosT0FBUTtZQUN6QixJQUFJVyxRQUFRO2dCQUNWQSxTQUFTO1lBQ1gsT0FBTyxJQUFJQyxXQUFXLE1BQU07Z0JBQzFCRCxTQUFTO1lBQ1gsT0FBTyxJQUFJRixTQUFTO2dCQUNsQixJQUFJRyxXQUFXRixXQUFXO29CQUN4QkQsVUFBVTtnQkFDWjtZQUNGLE9BQU8sSUFBSUcsV0FBVyxPQUFPQSxXQUFXLEtBQUs7Z0JBQzNDSCxVQUFVO2dCQUNWQyxZQUFZRTtZQUNkLE9BQU8sSUFBSUEsV0FBVyxLQUFLO2dCQUN6QkosUUFBUTtZQUNWLE9BQU8sSUFBSUksV0FBVyxLQUFLO2dCQUN6QixJQUFJSixPQUFPLEdBQUdBLFFBQVE7WUFDeEIsT0FBTyxJQUFJQSxTQUFTLEdBQUc7Z0JBQ3JCLElBQUlKLFdBQVdTLFFBQVEsQ0FBQ0QsU0FBU1gsUUFBUTtZQUMzQztZQUVBLElBQUlBLE9BQU87Z0JBQ1QsSUFBSU0sWUFBWSxJQUFJRCxNQUFNUSxJQUFJLENBQUNQLFFBQVFRLElBQUk7Z0JBQzNDUixVQUFVO2dCQUNWTixRQUFRO1lBQ1YsT0FBTztnQkFDTE0sV0FBV0s7WUFDYjtRQUNGO1FBRUEsSUFBSVAsUUFBUUUsWUFBWSxJQUFJRCxNQUFNUSxJQUFJLENBQUNQLFFBQVFRLElBQUk7UUFDbkQsT0FBT1Q7SUFDVDtBQUNGO0FBRUFVLE9BQU9DLE9BQU8sR0FBR25CO0FBQ2pCQSxLQUFLb0IsT0FBTyxHQUFHcEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lY29tLy4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MvbGliL2xpc3QuanM/Njg1MSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubGV0IGxpc3QgPSB7XG4gIGNvbW1hKHN0cmluZykge1xuICAgIHJldHVybiBsaXN0LnNwbGl0KHN0cmluZywgWycsJ10sIHRydWUpXG4gIH0sXG5cbiAgc3BhY2Uoc3RyaW5nKSB7XG4gICAgbGV0IHNwYWNlcyA9IFsnICcsICdcXG4nLCAnXFx0J11cbiAgICByZXR1cm4gbGlzdC5zcGxpdChzdHJpbmcsIHNwYWNlcylcbiAgfSxcblxuICBzcGxpdChzdHJpbmcsIHNlcGFyYXRvcnMsIGxhc3QpIHtcbiAgICBsZXQgYXJyYXkgPSBbXVxuICAgIGxldCBjdXJyZW50ID0gJydcbiAgICBsZXQgc3BsaXQgPSBmYWxzZVxuXG4gICAgbGV0IGZ1bmMgPSAwXG4gICAgbGV0IGluUXVvdGUgPSBmYWxzZVxuICAgIGxldCBwcmV2UXVvdGUgPSAnJ1xuICAgIGxldCBlc2NhcGUgPSBmYWxzZVxuXG4gICAgZm9yIChsZXQgbGV0dGVyIG9mIHN0cmluZykge1xuICAgICAgaWYgKGVzY2FwZSkge1xuICAgICAgICBlc2NhcGUgPSBmYWxzZVxuICAgICAgfSBlbHNlIGlmIChsZXR0ZXIgPT09ICdcXFxcJykge1xuICAgICAgICBlc2NhcGUgPSB0cnVlXG4gICAgICB9IGVsc2UgaWYgKGluUXVvdGUpIHtcbiAgICAgICAgaWYgKGxldHRlciA9PT0gcHJldlF1b3RlKSB7XG4gICAgICAgICAgaW5RdW90ZSA9IGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAobGV0dGVyID09PSAnXCInIHx8IGxldHRlciA9PT0gXCInXCIpIHtcbiAgICAgICAgaW5RdW90ZSA9IHRydWVcbiAgICAgICAgcHJldlF1b3RlID0gbGV0dGVyXG4gICAgICB9IGVsc2UgaWYgKGxldHRlciA9PT0gJygnKSB7XG4gICAgICAgIGZ1bmMgKz0gMVxuICAgICAgfSBlbHNlIGlmIChsZXR0ZXIgPT09ICcpJykge1xuICAgICAgICBpZiAoZnVuYyA+IDApIGZ1bmMgLT0gMVxuICAgICAgfSBlbHNlIGlmIChmdW5jID09PSAwKSB7XG4gICAgICAgIGlmIChzZXBhcmF0b3JzLmluY2x1ZGVzKGxldHRlcikpIHNwbGl0ID0gdHJ1ZVxuICAgICAgfVxuXG4gICAgICBpZiAoc3BsaXQpIHtcbiAgICAgICAgaWYgKGN1cnJlbnQgIT09ICcnKSBhcnJheS5wdXNoKGN1cnJlbnQudHJpbSgpKVxuICAgICAgICBjdXJyZW50ID0gJydcbiAgICAgICAgc3BsaXQgPSBmYWxzZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3VycmVudCArPSBsZXR0ZXJcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobGFzdCB8fCBjdXJyZW50ICE9PSAnJykgYXJyYXkucHVzaChjdXJyZW50LnRyaW0oKSlcbiAgICByZXR1cm4gYXJyYXlcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3Rcbmxpc3QuZGVmYXVsdCA9IGxpc3RcbiJdLCJuYW1lcyI6WyJsaXN0IiwiY29tbWEiLCJzdHJpbmciLCJzcGxpdCIsInNwYWNlIiwic3BhY2VzIiwic2VwYXJhdG9ycyIsImxhc3QiLCJhcnJheSIsImN1cnJlbnQiLCJmdW5jIiwiaW5RdW90ZSIsInByZXZRdW90ZSIsImVzY2FwZSIsImxldHRlciIsImluY2x1ZGVzIiwicHVzaCIsInRyaW0iLCJtb2R1bGUiLCJleHBvcnRzIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/list.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/map-generator.js":
/*!***************************************************!*\
  !*** ./node_modules/postcss/lib/map-generator.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet { SourceMapConsumer, SourceMapGenerator } = __webpack_require__(/*! source-map-js */ \"(ssr)/./node_modules/source-map-js/source-map.js\");\nlet { dirname, relative, resolve, sep } = __webpack_require__(/*! path */ \"path\");\nlet { pathToFileURL } = __webpack_require__(/*! url */ \"url\");\nlet Input = __webpack_require__(/*! ./input */ \"(ssr)/./node_modules/postcss/lib/input.js\");\nlet sourceMapAvailable = Boolean(SourceMapConsumer && SourceMapGenerator);\nlet pathAvailable = Boolean(dirname && resolve && relative && sep);\nclass MapGenerator {\n    constructor(stringify, root, opts, cssString){\n        this.stringify = stringify;\n        this.mapOpts = opts.map || {};\n        this.root = root;\n        this.opts = opts;\n        this.css = cssString;\n        this.originalCSS = cssString;\n        this.usesFileUrls = !this.mapOpts.from && this.mapOpts.absolute;\n        this.memoizedFileURLs = new Map();\n        this.memoizedPaths = new Map();\n        this.memoizedURLs = new Map();\n    }\n    addAnnotation() {\n        let content;\n        if (this.isInline()) {\n            content = \"data:application/json;base64,\" + this.toBase64(this.map.toString());\n        } else if (typeof this.mapOpts.annotation === \"string\") {\n            content = this.mapOpts.annotation;\n        } else if (typeof this.mapOpts.annotation === \"function\") {\n            content = this.mapOpts.annotation(this.opts.to, this.root);\n        } else {\n            content = this.outputFile() + \".map\";\n        }\n        let eol = \"\\n\";\n        if (this.css.includes(\"\\r\\n\")) eol = \"\\r\\n\";\n        this.css += eol + \"/*# sourceMappingURL=\" + content + \" */\";\n    }\n    applyPrevMaps() {\n        for (let prev of this.previous()){\n            let from = this.toUrl(this.path(prev.file));\n            let root = prev.root || dirname(prev.file);\n            let map;\n            if (this.mapOpts.sourcesContent === false) {\n                map = new SourceMapConsumer(prev.text);\n                if (map.sourcesContent) {\n                    map.sourcesContent = map.sourcesContent.map(()=>null);\n                }\n            } else {\n                map = prev.consumer();\n            }\n            this.map.applySourceMap(map, from, this.toUrl(this.path(root)));\n        }\n    }\n    clearAnnotation() {\n        if (this.mapOpts.annotation === false) return;\n        if (this.root) {\n            let node;\n            for(let i = this.root.nodes.length - 1; i >= 0; i--){\n                node = this.root.nodes[i];\n                if (node.type !== \"comment\") continue;\n                if (node.text.indexOf(\"# sourceMappingURL=\") === 0) {\n                    this.root.removeChild(i);\n                }\n            }\n        } else if (this.css) {\n            this.css = this.css.replace(/\\n*?\\/\\*#[\\S\\s]*?\\*\\/$/gm, \"\");\n        }\n    }\n    generate() {\n        this.clearAnnotation();\n        if (pathAvailable && sourceMapAvailable && this.isMap()) {\n            return this.generateMap();\n        } else {\n            let result = \"\";\n            this.stringify(this.root, (i)=>{\n                result += i;\n            });\n            return [\n                result\n            ];\n        }\n    }\n    generateMap() {\n        if (this.root) {\n            this.generateString();\n        } else if (this.previous().length === 1) {\n            let prev = this.previous()[0].consumer();\n            prev.file = this.outputFile();\n            this.map = SourceMapGenerator.fromSourceMap(prev);\n        } else {\n            this.map = new SourceMapGenerator({\n                file: this.outputFile()\n            });\n            this.map.addMapping({\n                generated: {\n                    column: 0,\n                    line: 1\n                },\n                original: {\n                    column: 0,\n                    line: 1\n                },\n                source: this.opts.from ? this.toUrl(this.path(this.opts.from)) : \"<no source>\"\n            });\n        }\n        if (this.isSourcesContent()) this.setSourcesContent();\n        if (this.root && this.previous().length > 0) this.applyPrevMaps();\n        if (this.isAnnotation()) this.addAnnotation();\n        if (this.isInline()) {\n            return [\n                this.css\n            ];\n        } else {\n            return [\n                this.css,\n                this.map\n            ];\n        }\n    }\n    generateString() {\n        this.css = \"\";\n        this.map = new SourceMapGenerator({\n            file: this.outputFile()\n        });\n        let line = 1;\n        let column = 1;\n        let noSource = \"<no source>\";\n        let mapping = {\n            generated: {\n                column: 0,\n                line: 0\n            },\n            original: {\n                column: 0,\n                line: 0\n            },\n            source: \"\"\n        };\n        let lines, last;\n        this.stringify(this.root, (str, node, type)=>{\n            this.css += str;\n            if (node && type !== \"end\") {\n                mapping.generated.line = line;\n                mapping.generated.column = column - 1;\n                if (node.source && node.source.start) {\n                    mapping.source = this.sourcePath(node);\n                    mapping.original.line = node.source.start.line;\n                    mapping.original.column = node.source.start.column - 1;\n                    this.map.addMapping(mapping);\n                } else {\n                    mapping.source = noSource;\n                    mapping.original.line = 1;\n                    mapping.original.column = 0;\n                    this.map.addMapping(mapping);\n                }\n            }\n            lines = str.match(/\\n/g);\n            if (lines) {\n                line += lines.length;\n                last = str.lastIndexOf(\"\\n\");\n                column = str.length - last;\n            } else {\n                column += str.length;\n            }\n            if (node && type !== \"start\") {\n                let p = node.parent || {\n                    raws: {}\n                };\n                let childless = node.type === \"decl\" || node.type === \"atrule\" && !node.nodes;\n                if (!childless || node !== p.last || p.raws.semicolon) {\n                    if (node.source && node.source.end) {\n                        mapping.source = this.sourcePath(node);\n                        mapping.original.line = node.source.end.line;\n                        mapping.original.column = node.source.end.column - 1;\n                        mapping.generated.line = line;\n                        mapping.generated.column = column - 2;\n                        this.map.addMapping(mapping);\n                    } else {\n                        mapping.source = noSource;\n                        mapping.original.line = 1;\n                        mapping.original.column = 0;\n                        mapping.generated.line = line;\n                        mapping.generated.column = column - 1;\n                        this.map.addMapping(mapping);\n                    }\n                }\n            }\n        });\n    }\n    isAnnotation() {\n        if (this.isInline()) {\n            return true;\n        }\n        if (typeof this.mapOpts.annotation !== \"undefined\") {\n            return this.mapOpts.annotation;\n        }\n        if (this.previous().length) {\n            return this.previous().some((i)=>i.annotation);\n        }\n        return true;\n    }\n    isInline() {\n        if (typeof this.mapOpts.inline !== \"undefined\") {\n            return this.mapOpts.inline;\n        }\n        let annotation = this.mapOpts.annotation;\n        if (typeof annotation !== \"undefined\" && annotation !== true) {\n            return false;\n        }\n        if (this.previous().length) {\n            return this.previous().some((i)=>i.inline);\n        }\n        return true;\n    }\n    isMap() {\n        if (typeof this.opts.map !== \"undefined\") {\n            return !!this.opts.map;\n        }\n        return this.previous().length > 0;\n    }\n    isSourcesContent() {\n        if (typeof this.mapOpts.sourcesContent !== \"undefined\") {\n            return this.mapOpts.sourcesContent;\n        }\n        if (this.previous().length) {\n            return this.previous().some((i)=>i.withContent());\n        }\n        return true;\n    }\n    outputFile() {\n        if (this.opts.to) {\n            return this.path(this.opts.to);\n        } else if (this.opts.from) {\n            return this.path(this.opts.from);\n        } else {\n            return \"to.css\";\n        }\n    }\n    path(file) {\n        if (this.mapOpts.absolute) return file;\n        if (file.charCodeAt(0) === 60 /* `<` */ ) return file;\n        if (/^\\w+:\\/\\//.test(file)) return file;\n        let cached = this.memoizedPaths.get(file);\n        if (cached) return cached;\n        let from = this.opts.to ? dirname(this.opts.to) : \".\";\n        if (typeof this.mapOpts.annotation === \"string\") {\n            from = dirname(resolve(from, this.mapOpts.annotation));\n        }\n        let path = relative(from, file);\n        this.memoizedPaths.set(file, path);\n        return path;\n    }\n    previous() {\n        if (!this.previousMaps) {\n            this.previousMaps = [];\n            if (this.root) {\n                this.root.walk((node)=>{\n                    if (node.source && node.source.input.map) {\n                        let map = node.source.input.map;\n                        if (!this.previousMaps.includes(map)) {\n                            this.previousMaps.push(map);\n                        }\n                    }\n                });\n            } else {\n                let input = new Input(this.originalCSS, this.opts);\n                if (input.map) this.previousMaps.push(input.map);\n            }\n        }\n        return this.previousMaps;\n    }\n    setSourcesContent() {\n        let already = {};\n        if (this.root) {\n            this.root.walk((node)=>{\n                if (node.source) {\n                    let from = node.source.input.from;\n                    if (from && !already[from]) {\n                        already[from] = true;\n                        let fromUrl = this.usesFileUrls ? this.toFileUrl(from) : this.toUrl(this.path(from));\n                        this.map.setSourceContent(fromUrl, node.source.input.css);\n                    }\n                }\n            });\n        } else if (this.css) {\n            let from = this.opts.from ? this.toUrl(this.path(this.opts.from)) : \"<no source>\";\n            this.map.setSourceContent(from, this.css);\n        }\n    }\n    sourcePath(node) {\n        if (this.mapOpts.from) {\n            return this.toUrl(this.mapOpts.from);\n        } else if (this.usesFileUrls) {\n            return this.toFileUrl(node.source.input.from);\n        } else {\n            return this.toUrl(this.path(node.source.input.from));\n        }\n    }\n    toBase64(str) {\n        if (Buffer) {\n            return Buffer.from(str).toString(\"base64\");\n        } else {\n            return window.btoa(unescape(encodeURIComponent(str)));\n        }\n    }\n    toFileUrl(path) {\n        let cached = this.memoizedFileURLs.get(path);\n        if (cached) return cached;\n        if (pathToFileURL) {\n            let fileURL = pathToFileURL(path).toString();\n            this.memoizedFileURLs.set(path, fileURL);\n            return fileURL;\n        } else {\n            throw new Error(\"`map.absolute` option is not available in this PostCSS build\");\n        }\n    }\n    toUrl(path) {\n        let cached = this.memoizedURLs.get(path);\n        if (cached) return cached;\n        if (sep === \"\\\\\") {\n            path = path.replace(/\\\\/g, \"/\");\n        }\n        let url = encodeURI(path).replace(/[#?]/g, encodeURIComponent);\n        this.memoizedURLs.set(path, url);\n        return url;\n    }\n}\nmodule.exports = MapGenerator;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/map-generator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/no-work-result.js":
/*!****************************************************!*\
  !*** ./node_modules/postcss/lib/no-work-result.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet MapGenerator = __webpack_require__(/*! ./map-generator */ \"(ssr)/./node_modules/postcss/lib/map-generator.js\");\nlet stringify = __webpack_require__(/*! ./stringify */ \"(ssr)/./node_modules/postcss/lib/stringify.js\");\nlet warnOnce = __webpack_require__(/*! ./warn-once */ \"(ssr)/./node_modules/postcss/lib/warn-once.js\");\nlet parse = __webpack_require__(/*! ./parse */ \"(ssr)/./node_modules/postcss/lib/parse.js\");\nconst Result = __webpack_require__(/*! ./result */ \"(ssr)/./node_modules/postcss/lib/result.js\");\nclass NoWorkResult {\n    constructor(processor, css, opts){\n        css = css.toString();\n        this.stringified = false;\n        this._processor = processor;\n        this._css = css;\n        this._opts = opts;\n        this._map = undefined;\n        let root;\n        let str = stringify;\n        this.result = new Result(this._processor, root, this._opts);\n        this.result.css = css;\n        let self = this;\n        Object.defineProperty(this.result, \"root\", {\n            get () {\n                return self.root;\n            }\n        });\n        let map = new MapGenerator(str, root, this._opts, css);\n        if (map.isMap()) {\n            let [generatedCSS, generatedMap] = map.generate();\n            if (generatedCSS) {\n                this.result.css = generatedCSS;\n            }\n            if (generatedMap) {\n                this.result.map = generatedMap;\n            }\n        } else {\n            map.clearAnnotation();\n            this.result.css = map.css;\n        }\n    }\n    async() {\n        if (this.error) return Promise.reject(this.error);\n        return Promise.resolve(this.result);\n    }\n    catch(onRejected) {\n        return this.async().catch(onRejected);\n    }\n    finally(onFinally) {\n        return this.async().then(onFinally, onFinally);\n    }\n    sync() {\n        if (this.error) throw this.error;\n        return this.result;\n    }\n    then(onFulfilled, onRejected) {\n        if (true) {\n            if (!(\"from\" in this._opts)) {\n                warnOnce(\"Without `from` option PostCSS could generate wrong source map \" + \"and will not find Browserslist config. Set it to CSS file path \" + \"or to `undefined` to prevent this warning.\");\n            }\n        }\n        return this.async().then(onFulfilled, onRejected);\n    }\n    toString() {\n        return this._css;\n    }\n    warnings() {\n        return [];\n    }\n    get content() {\n        return this.result.css;\n    }\n    get css() {\n        return this.result.css;\n    }\n    get map() {\n        return this.result.map;\n    }\n    get messages() {\n        return [];\n    }\n    get opts() {\n        return this.result.opts;\n    }\n    get processor() {\n        return this.result.processor;\n    }\n    get root() {\n        if (this._root) {\n            return this._root;\n        }\n        let root;\n        let parser = parse;\n        try {\n            root = parser(this._css, this._opts);\n        } catch (error) {\n            this.error = error;\n        }\n        if (this.error) {\n            throw this.error;\n        } else {\n            this._root = root;\n            return root;\n        }\n    }\n    get [Symbol.toStringTag]() {\n        return \"NoWorkResult\";\n    }\n}\nmodule.exports = NoWorkResult;\nNoWorkResult.default = NoWorkResult;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvbm8td29yay1yZXN1bHQuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxlQUFlQyxtQkFBT0EsQ0FBQztBQUMzQixJQUFJQyxZQUFZRCxtQkFBT0EsQ0FBQztBQUN4QixJQUFJRSxXQUFXRixtQkFBT0EsQ0FBQztBQUN2QixJQUFJRyxRQUFRSCxtQkFBT0EsQ0FBQztBQUNwQixNQUFNSSxTQUFTSixtQkFBT0EsQ0FBQztBQUV2QixNQUFNSztJQUNKQyxZQUFZQyxTQUFTLEVBQUVDLEdBQUcsRUFBRUMsSUFBSSxDQUFFO1FBQ2hDRCxNQUFNQSxJQUFJRSxRQUFRO1FBQ2xCLElBQUksQ0FBQ0MsV0FBVyxHQUFHO1FBRW5CLElBQUksQ0FBQ0MsVUFBVSxHQUFHTDtRQUNsQixJQUFJLENBQUNNLElBQUksR0FBR0w7UUFDWixJQUFJLENBQUNNLEtBQUssR0FBR0w7UUFDYixJQUFJLENBQUNNLElBQUksR0FBR0M7UUFDWixJQUFJQztRQUVKLElBQUlDLE1BQU1qQjtRQUNWLElBQUksQ0FBQ2tCLE1BQU0sR0FBRyxJQUFJZixPQUFPLElBQUksQ0FBQ1EsVUFBVSxFQUFFSyxNQUFNLElBQUksQ0FBQ0gsS0FBSztRQUMxRCxJQUFJLENBQUNLLE1BQU0sQ0FBQ1gsR0FBRyxHQUFHQTtRQUVsQixJQUFJWSxPQUFPLElBQUk7UUFDZkMsT0FBT0MsY0FBYyxDQUFDLElBQUksQ0FBQ0gsTUFBTSxFQUFFLFFBQVE7WUFDekNJO2dCQUNFLE9BQU9ILEtBQUtILElBQUk7WUFDbEI7UUFDRjtRQUVBLElBQUlPLE1BQU0sSUFBSXpCLGFBQWFtQixLQUFLRCxNQUFNLElBQUksQ0FBQ0gsS0FBSyxFQUFFTjtRQUNsRCxJQUFJZ0IsSUFBSUMsS0FBSyxJQUFJO1lBQ2YsSUFBSSxDQUFDQyxjQUFjQyxhQUFhLEdBQUdILElBQUlJLFFBQVE7WUFDL0MsSUFBSUYsY0FBYztnQkFDaEIsSUFBSSxDQUFDUCxNQUFNLENBQUNYLEdBQUcsR0FBR2tCO1lBQ3BCO1lBQ0EsSUFBSUMsY0FBYztnQkFDaEIsSUFBSSxDQUFDUixNQUFNLENBQUNLLEdBQUcsR0FBR0c7WUFDcEI7UUFDRixPQUFPO1lBQ0xILElBQUlLLGVBQWU7WUFDbkIsSUFBSSxDQUFDVixNQUFNLENBQUNYLEdBQUcsR0FBR2dCLElBQUloQixHQUFHO1FBQzNCO0lBQ0Y7SUFFQXNCLFFBQVE7UUFDTixJQUFJLElBQUksQ0FBQ0MsS0FBSyxFQUFFLE9BQU9DLFFBQVFDLE1BQU0sQ0FBQyxJQUFJLENBQUNGLEtBQUs7UUFDaEQsT0FBT0MsUUFBUUUsT0FBTyxDQUFDLElBQUksQ0FBQ2YsTUFBTTtJQUNwQztJQUVBZ0IsTUFBTUMsVUFBVSxFQUFFO1FBQ2hCLE9BQU8sSUFBSSxDQUFDTixLQUFLLEdBQUdLLEtBQUssQ0FBQ0M7SUFDNUI7SUFFQUMsUUFBUUMsU0FBUyxFQUFFO1FBQ2pCLE9BQU8sSUFBSSxDQUFDUixLQUFLLEdBQUdTLElBQUksQ0FBQ0QsV0FBV0E7SUFDdEM7SUFFQUUsT0FBTztRQUNMLElBQUksSUFBSSxDQUFDVCxLQUFLLEVBQUUsTUFBTSxJQUFJLENBQUNBLEtBQUs7UUFDaEMsT0FBTyxJQUFJLENBQUNaLE1BQU07SUFDcEI7SUFFQW9CLEtBQUtFLFdBQVcsRUFBRUwsVUFBVSxFQUFFO1FBQzVCLElBQUlNLElBQXlCLEVBQWM7WUFDekMsSUFBSSxDQUFFLFdBQVUsSUFBSSxDQUFDNUIsS0FBSyxHQUFHO2dCQUMzQlosU0FDRSxtRUFDRSxvRUFDQTtZQUVOO1FBQ0Y7UUFFQSxPQUFPLElBQUksQ0FBQzRCLEtBQUssR0FBR1MsSUFBSSxDQUFDRSxhQUFhTDtJQUN4QztJQUVBMUIsV0FBVztRQUNULE9BQU8sSUFBSSxDQUFDRyxJQUFJO0lBQ2xCO0lBRUE4QixXQUFXO1FBQ1QsT0FBTyxFQUFFO0lBQ1g7SUFFQSxJQUFJQyxVQUFVO1FBQ1osT0FBTyxJQUFJLENBQUN6QixNQUFNLENBQUNYLEdBQUc7SUFDeEI7SUFFQSxJQUFJQSxNQUFNO1FBQ1IsT0FBTyxJQUFJLENBQUNXLE1BQU0sQ0FBQ1gsR0FBRztJQUN4QjtJQUVBLElBQUlnQixNQUFNO1FBQ1IsT0FBTyxJQUFJLENBQUNMLE1BQU0sQ0FBQ0ssR0FBRztJQUN4QjtJQUVBLElBQUlxQixXQUFXO1FBQ2IsT0FBTyxFQUFFO0lBQ1g7SUFFQSxJQUFJcEMsT0FBTztRQUNULE9BQU8sSUFBSSxDQUFDVSxNQUFNLENBQUNWLElBQUk7SUFDekI7SUFFQSxJQUFJRixZQUFZO1FBQ2QsT0FBTyxJQUFJLENBQUNZLE1BQU0sQ0FBQ1osU0FBUztJQUM5QjtJQUVBLElBQUlVLE9BQU87UUFDVCxJQUFJLElBQUksQ0FBQzZCLEtBQUssRUFBRTtZQUNkLE9BQU8sSUFBSSxDQUFDQSxLQUFLO1FBQ25CO1FBRUEsSUFBSTdCO1FBQ0osSUFBSThCLFNBQVM1QztRQUViLElBQUk7WUFDRmMsT0FBTzhCLE9BQU8sSUFBSSxDQUFDbEMsSUFBSSxFQUFFLElBQUksQ0FBQ0MsS0FBSztRQUNyQyxFQUFFLE9BQU9pQixPQUFPO1lBQ2QsSUFBSSxDQUFDQSxLQUFLLEdBQUdBO1FBQ2Y7UUFFQSxJQUFJLElBQUksQ0FBQ0EsS0FBSyxFQUFFO1lBQ2QsTUFBTSxJQUFJLENBQUNBLEtBQUs7UUFDbEIsT0FBTztZQUNMLElBQUksQ0FBQ2UsS0FBSyxHQUFHN0I7WUFDYixPQUFPQTtRQUNUO0lBQ0Y7SUFFQSxJQUFJLENBQUMrQixPQUFPQyxXQUFXLENBQUMsR0FBRztRQUN6QixPQUFPO0lBQ1Q7QUFDRjtBQUVBQyxPQUFPQyxPQUFPLEdBQUc5QztBQUNqQkEsYUFBYStDLE9BQU8sR0FBRy9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWNvbS8uL25vZGVfbW9kdWxlcy9wb3N0Y3NzL2xpYi9uby13b3JrLXJlc3VsdC5qcz9kODllIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5sZXQgTWFwR2VuZXJhdG9yID0gcmVxdWlyZSgnLi9tYXAtZ2VuZXJhdG9yJylcbmxldCBzdHJpbmdpZnkgPSByZXF1aXJlKCcuL3N0cmluZ2lmeScpXG5sZXQgd2Fybk9uY2UgPSByZXF1aXJlKCcuL3dhcm4tb25jZScpXG5sZXQgcGFyc2UgPSByZXF1aXJlKCcuL3BhcnNlJylcbmNvbnN0IFJlc3VsdCA9IHJlcXVpcmUoJy4vcmVzdWx0JylcblxuY2xhc3MgTm9Xb3JrUmVzdWx0IHtcbiAgY29uc3RydWN0b3IocHJvY2Vzc29yLCBjc3MsIG9wdHMpIHtcbiAgICBjc3MgPSBjc3MudG9TdHJpbmcoKVxuICAgIHRoaXMuc3RyaW5naWZpZWQgPSBmYWxzZVxuXG4gICAgdGhpcy5fcHJvY2Vzc29yID0gcHJvY2Vzc29yXG4gICAgdGhpcy5fY3NzID0gY3NzXG4gICAgdGhpcy5fb3B0cyA9IG9wdHNcbiAgICB0aGlzLl9tYXAgPSB1bmRlZmluZWRcbiAgICBsZXQgcm9vdFxuXG4gICAgbGV0IHN0ciA9IHN0cmluZ2lmeVxuICAgIHRoaXMucmVzdWx0ID0gbmV3IFJlc3VsdCh0aGlzLl9wcm9jZXNzb3IsIHJvb3QsIHRoaXMuX29wdHMpXG4gICAgdGhpcy5yZXN1bHQuY3NzID0gY3NzXG5cbiAgICBsZXQgc2VsZiA9IHRoaXNcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcy5yZXN1bHQsICdyb290Jywge1xuICAgICAgZ2V0KCkge1xuICAgICAgICByZXR1cm4gc2VsZi5yb290XG4gICAgICB9XG4gICAgfSlcblxuICAgIGxldCBtYXAgPSBuZXcgTWFwR2VuZXJhdG9yKHN0ciwgcm9vdCwgdGhpcy5fb3B0cywgY3NzKVxuICAgIGlmIChtYXAuaXNNYXAoKSkge1xuICAgICAgbGV0IFtnZW5lcmF0ZWRDU1MsIGdlbmVyYXRlZE1hcF0gPSBtYXAuZ2VuZXJhdGUoKVxuICAgICAgaWYgKGdlbmVyYXRlZENTUykge1xuICAgICAgICB0aGlzLnJlc3VsdC5jc3MgPSBnZW5lcmF0ZWRDU1NcbiAgICAgIH1cbiAgICAgIGlmIChnZW5lcmF0ZWRNYXApIHtcbiAgICAgICAgdGhpcy5yZXN1bHQubWFwID0gZ2VuZXJhdGVkTWFwXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG1hcC5jbGVhckFubm90YXRpb24oKTtcbiAgICAgIHRoaXMucmVzdWx0LmNzcyA9IG1hcC5jc3M7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMoKSB7XG4gICAgaWYgKHRoaXMuZXJyb3IpIHJldHVybiBQcm9taXNlLnJlamVjdCh0aGlzLmVycm9yKVxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5yZXN1bHQpXG4gIH1cblxuICBjYXRjaChvblJlamVjdGVkKSB7XG4gICAgcmV0dXJuIHRoaXMuYXN5bmMoKS5jYXRjaChvblJlamVjdGVkKVxuICB9XG5cbiAgZmluYWxseShvbkZpbmFsbHkpIHtcbiAgICByZXR1cm4gdGhpcy5hc3luYygpLnRoZW4ob25GaW5hbGx5LCBvbkZpbmFsbHkpXG4gIH1cblxuICBzeW5jKCkge1xuICAgIGlmICh0aGlzLmVycm9yKSB0aHJvdyB0aGlzLmVycm9yXG4gICAgcmV0dXJuIHRoaXMucmVzdWx0XG4gIH1cblxuICB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICghKCdmcm9tJyBpbiB0aGlzLl9vcHRzKSkge1xuICAgICAgICB3YXJuT25jZShcbiAgICAgICAgICAnV2l0aG91dCBgZnJvbWAgb3B0aW9uIFBvc3RDU1MgY291bGQgZ2VuZXJhdGUgd3Jvbmcgc291cmNlIG1hcCAnICtcbiAgICAgICAgICAgICdhbmQgd2lsbCBub3QgZmluZCBCcm93c2Vyc2xpc3QgY29uZmlnLiBTZXQgaXQgdG8gQ1NTIGZpbGUgcGF0aCAnICtcbiAgICAgICAgICAgICdvciB0byBgdW5kZWZpbmVkYCB0byBwcmV2ZW50IHRoaXMgd2FybmluZy4nXG4gICAgICAgIClcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5hc3luYygpLnRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpXG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5fY3NzXG4gIH1cblxuICB3YXJuaW5ncygpIHtcbiAgICByZXR1cm4gW11cbiAgfVxuXG4gIGdldCBjb250ZW50KCkge1xuICAgIHJldHVybiB0aGlzLnJlc3VsdC5jc3NcbiAgfVxuXG4gIGdldCBjc3MoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVzdWx0LmNzc1xuICB9XG5cbiAgZ2V0IG1hcCgpIHtcbiAgICByZXR1cm4gdGhpcy5yZXN1bHQubWFwXG4gIH1cblxuICBnZXQgbWVzc2FnZXMoKSB7XG4gICAgcmV0dXJuIFtdXG4gIH1cblxuICBnZXQgb3B0cygpIHtcbiAgICByZXR1cm4gdGhpcy5yZXN1bHQub3B0c1xuICB9XG5cbiAgZ2V0IHByb2Nlc3NvcigpIHtcbiAgICByZXR1cm4gdGhpcy5yZXN1bHQucHJvY2Vzc29yXG4gIH1cblxuICBnZXQgcm9vdCgpIHtcbiAgICBpZiAodGhpcy5fcm9vdCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3Jvb3RcbiAgICB9XG5cbiAgICBsZXQgcm9vdFxuICAgIGxldCBwYXJzZXIgPSBwYXJzZVxuXG4gICAgdHJ5IHtcbiAgICAgIHJvb3QgPSBwYXJzZXIodGhpcy5fY3NzLCB0aGlzLl9vcHRzKVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aGlzLmVycm9yID0gZXJyb3JcbiAgICB9XG5cbiAgICBpZiAodGhpcy5lcnJvcikge1xuICAgICAgdGhyb3cgdGhpcy5lcnJvclxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9yb290ID0gcm9vdFxuICAgICAgcmV0dXJuIHJvb3RcbiAgICB9XG4gIH1cblxuICBnZXQgW1N5bWJvbC50b1N0cmluZ1RhZ10oKSB7XG4gICAgcmV0dXJuICdOb1dvcmtSZXN1bHQnXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBOb1dvcmtSZXN1bHRcbk5vV29ya1Jlc3VsdC5kZWZhdWx0ID0gTm9Xb3JrUmVzdWx0XG4iXSwibmFtZXMiOlsiTWFwR2VuZXJhdG9yIiwicmVxdWlyZSIsInN0cmluZ2lmeSIsIndhcm5PbmNlIiwicGFyc2UiLCJSZXN1bHQiLCJOb1dvcmtSZXN1bHQiLCJjb25zdHJ1Y3RvciIsInByb2Nlc3NvciIsImNzcyIsIm9wdHMiLCJ0b1N0cmluZyIsInN0cmluZ2lmaWVkIiwiX3Byb2Nlc3NvciIsIl9jc3MiLCJfb3B0cyIsIl9tYXAiLCJ1bmRlZmluZWQiLCJyb290Iiwic3RyIiwicmVzdWx0Iiwic2VsZiIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0IiwibWFwIiwiaXNNYXAiLCJnZW5lcmF0ZWRDU1MiLCJnZW5lcmF0ZWRNYXAiLCJnZW5lcmF0ZSIsImNsZWFyQW5ub3RhdGlvbiIsImFzeW5jIiwiZXJyb3IiLCJQcm9taXNlIiwicmVqZWN0IiwicmVzb2x2ZSIsImNhdGNoIiwib25SZWplY3RlZCIsImZpbmFsbHkiLCJvbkZpbmFsbHkiLCJ0aGVuIiwic3luYyIsIm9uRnVsZmlsbGVkIiwicHJvY2VzcyIsIndhcm5pbmdzIiwiY29udGVudCIsIm1lc3NhZ2VzIiwiX3Jvb3QiLCJwYXJzZXIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsIm1vZHVsZSIsImV4cG9ydHMiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/no-work-result.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/node.js":
/*!******************************************!*\
  !*** ./node_modules/postcss/lib/node.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet { isClean, my } = __webpack_require__(/*! ./symbols */ \"(ssr)/./node_modules/postcss/lib/symbols.js\");\nlet CssSyntaxError = __webpack_require__(/*! ./css-syntax-error */ \"(ssr)/./node_modules/postcss/lib/css-syntax-error.js\");\nlet Stringifier = __webpack_require__(/*! ./stringifier */ \"(ssr)/./node_modules/postcss/lib/stringifier.js\");\nlet stringify = __webpack_require__(/*! ./stringify */ \"(ssr)/./node_modules/postcss/lib/stringify.js\");\nfunction cloneNode(obj, parent) {\n    let cloned = new obj.constructor();\n    for(let i in obj){\n        if (!Object.prototype.hasOwnProperty.call(obj, i)) {\n            continue;\n        }\n        if (i === \"proxyCache\") continue;\n        let value = obj[i];\n        let type = typeof value;\n        if (i === \"parent\" && type === \"object\") {\n            if (parent) cloned[i] = parent;\n        } else if (i === \"source\") {\n            cloned[i] = value;\n        } else if (Array.isArray(value)) {\n            cloned[i] = value.map((j)=>cloneNode(j, cloned));\n        } else {\n            if (type === \"object\" && value !== null) value = cloneNode(value);\n            cloned[i] = value;\n        }\n    }\n    return cloned;\n}\nclass Node {\n    constructor(defaults = {}){\n        this.raws = {};\n        this[isClean] = false;\n        this[my] = true;\n        for(let name in defaults){\n            if (name === \"nodes\") {\n                this.nodes = [];\n                for (let node of defaults[name]){\n                    if (typeof node.clone === \"function\") {\n                        this.append(node.clone());\n                    } else {\n                        this.append(node);\n                    }\n                }\n            } else {\n                this[name] = defaults[name];\n            }\n        }\n    }\n    addToError(error) {\n        error.postcssNode = this;\n        if (error.stack && this.source && /\\n\\s{4}at /.test(error.stack)) {\n            let s = this.source;\n            error.stack = error.stack.replace(/\\n\\s{4}at /, `$&${s.input.from}:${s.start.line}:${s.start.column}$&`);\n        }\n        return error;\n    }\n    after(add) {\n        this.parent.insertAfter(this, add);\n        return this;\n    }\n    assign(overrides = {}) {\n        for(let name in overrides){\n            this[name] = overrides[name];\n        }\n        return this;\n    }\n    before(add) {\n        this.parent.insertBefore(this, add);\n        return this;\n    }\n    cleanRaws(keepBetween) {\n        delete this.raws.before;\n        delete this.raws.after;\n        if (!keepBetween) delete this.raws.between;\n    }\n    clone(overrides = {}) {\n        let cloned = cloneNode(this);\n        for(let name in overrides){\n            cloned[name] = overrides[name];\n        }\n        return cloned;\n    }\n    cloneAfter(overrides = {}) {\n        let cloned = this.clone(overrides);\n        this.parent.insertAfter(this, cloned);\n        return cloned;\n    }\n    cloneBefore(overrides = {}) {\n        let cloned = this.clone(overrides);\n        this.parent.insertBefore(this, cloned);\n        return cloned;\n    }\n    error(message, opts = {}) {\n        if (this.source) {\n            let { end, start } = this.rangeBy(opts);\n            return this.source.input.error(message, {\n                column: start.column,\n                line: start.line\n            }, {\n                column: end.column,\n                line: end.line\n            }, opts);\n        }\n        return new CssSyntaxError(message);\n    }\n    getProxyProcessor() {\n        return {\n            get (node, prop) {\n                if (prop === \"proxyOf\") {\n                    return node;\n                } else if (prop === \"root\") {\n                    return ()=>node.root().toProxy();\n                } else {\n                    return node[prop];\n                }\n            },\n            set (node, prop, value) {\n                if (node[prop] === value) return true;\n                node[prop] = value;\n                if (prop === \"prop\" || prop === \"value\" || prop === \"name\" || prop === \"params\" || prop === \"important\" || /* c8 ignore next */ prop === \"text\") {\n                    node.markDirty();\n                }\n                return true;\n            }\n        };\n    }\n    markDirty() {\n        if (this[isClean]) {\n            this[isClean] = false;\n            let next = this;\n            while(next = next.parent){\n                next[isClean] = false;\n            }\n        }\n    }\n    next() {\n        if (!this.parent) return undefined;\n        let index = this.parent.index(this);\n        return this.parent.nodes[index + 1];\n    }\n    positionBy(opts, stringRepresentation) {\n        let pos = this.source.start;\n        if (opts.index) {\n            pos = this.positionInside(opts.index, stringRepresentation);\n        } else if (opts.word) {\n            stringRepresentation = this.toString();\n            let index = stringRepresentation.indexOf(opts.word);\n            if (index !== -1) pos = this.positionInside(index, stringRepresentation);\n        }\n        return pos;\n    }\n    positionInside(index, stringRepresentation) {\n        let string = stringRepresentation || this.toString();\n        let column = this.source.start.column;\n        let line = this.source.start.line;\n        for(let i = 0; i < index; i++){\n            if (string[i] === \"\\n\") {\n                column = 1;\n                line += 1;\n            } else {\n                column += 1;\n            }\n        }\n        return {\n            column,\n            line\n        };\n    }\n    prev() {\n        if (!this.parent) return undefined;\n        let index = this.parent.index(this);\n        return this.parent.nodes[index - 1];\n    }\n    rangeBy(opts) {\n        let start = {\n            column: this.source.start.column,\n            line: this.source.start.line\n        };\n        let end = this.source.end ? {\n            column: this.source.end.column + 1,\n            line: this.source.end.line\n        } : {\n            column: start.column + 1,\n            line: start.line\n        };\n        if (opts.word) {\n            let stringRepresentation = this.toString();\n            let index = stringRepresentation.indexOf(opts.word);\n            if (index !== -1) {\n                start = this.positionInside(index, stringRepresentation);\n                end = this.positionInside(index + opts.word.length, stringRepresentation);\n            }\n        } else {\n            if (opts.start) {\n                start = {\n                    column: opts.start.column,\n                    line: opts.start.line\n                };\n            } else if (opts.index) {\n                start = this.positionInside(opts.index);\n            }\n            if (opts.end) {\n                end = {\n                    column: opts.end.column,\n                    line: opts.end.line\n                };\n            } else if (opts.endIndex) {\n                end = this.positionInside(opts.endIndex);\n            } else if (opts.index) {\n                end = this.positionInside(opts.index + 1);\n            }\n        }\n        if (end.line < start.line || end.line === start.line && end.column <= start.column) {\n            end = {\n                column: start.column + 1,\n                line: start.line\n            };\n        }\n        return {\n            end,\n            start\n        };\n    }\n    raw(prop, defaultType) {\n        let str = new Stringifier();\n        return str.raw(this, prop, defaultType);\n    }\n    remove() {\n        if (this.parent) {\n            this.parent.removeChild(this);\n        }\n        this.parent = undefined;\n        return this;\n    }\n    replaceWith(...nodes) {\n        if (this.parent) {\n            let bookmark = this;\n            let foundSelf = false;\n            for (let node of nodes){\n                if (node === this) {\n                    foundSelf = true;\n                } else if (foundSelf) {\n                    this.parent.insertAfter(bookmark, node);\n                    bookmark = node;\n                } else {\n                    this.parent.insertBefore(bookmark, node);\n                }\n            }\n            if (!foundSelf) {\n                this.remove();\n            }\n        }\n        return this;\n    }\n    root() {\n        let result = this;\n        while(result.parent && result.parent.type !== \"document\"){\n            result = result.parent;\n        }\n        return result;\n    }\n    toJSON(_, inputs) {\n        let fixed = {};\n        let emitInputs = inputs == null;\n        inputs = inputs || new Map();\n        let inputsNextIndex = 0;\n        for(let name in this){\n            if (!Object.prototype.hasOwnProperty.call(this, name)) {\n                continue;\n            }\n            if (name === \"parent\" || name === \"proxyCache\") continue;\n            let value = this[name];\n            if (Array.isArray(value)) {\n                fixed[name] = value.map((i)=>{\n                    if (typeof i === \"object\" && i.toJSON) {\n                        return i.toJSON(null, inputs);\n                    } else {\n                        return i;\n                    }\n                });\n            } else if (typeof value === \"object\" && value.toJSON) {\n                fixed[name] = value.toJSON(null, inputs);\n            } else if (name === \"source\") {\n                let inputId = inputs.get(value.input);\n                if (inputId == null) {\n                    inputId = inputsNextIndex;\n                    inputs.set(value.input, inputsNextIndex);\n                    inputsNextIndex++;\n                }\n                fixed[name] = {\n                    end: value.end,\n                    inputId,\n                    start: value.start\n                };\n            } else {\n                fixed[name] = value;\n            }\n        }\n        if (emitInputs) {\n            fixed.inputs = [\n                ...inputs.keys()\n            ].map((input)=>input.toJSON());\n        }\n        return fixed;\n    }\n    toProxy() {\n        if (!this.proxyCache) {\n            this.proxyCache = new Proxy(this, this.getProxyProcessor());\n        }\n        return this.proxyCache;\n    }\n    toString(stringifier = stringify) {\n        if (stringifier.stringify) stringifier = stringifier.stringify;\n        let result = \"\";\n        stringifier(this, (i)=>{\n            result += i;\n        });\n        return result;\n    }\n    warn(result, text, opts) {\n        let data = {\n            node: this\n        };\n        for(let i in opts)data[i] = opts[i];\n        return result.warn(text, data);\n    }\n    get proxyOf() {\n        return this;\n    }\n}\nmodule.exports = Node;\nNode.default = Node;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvbm9kZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUksRUFBRUEsT0FBTyxFQUFFQyxFQUFFLEVBQUUsR0FBR0MsbUJBQU9BLENBQUM7QUFDOUIsSUFBSUMsaUJBQWlCRCxtQkFBT0EsQ0FBQztBQUM3QixJQUFJRSxjQUFjRixtQkFBT0EsQ0FBQztBQUMxQixJQUFJRyxZQUFZSCxtQkFBT0EsQ0FBQztBQUV4QixTQUFTSSxVQUFVQyxHQUFHLEVBQUVDLE1BQU07SUFDNUIsSUFBSUMsU0FBUyxJQUFJRixJQUFJRyxXQUFXO0lBRWhDLElBQUssSUFBSUMsS0FBS0osSUFBSztRQUNqQixJQUFJLENBQUNLLE9BQU9DLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNSLEtBQUtJLElBQUk7WUFFakQ7UUFDRjtRQUNBLElBQUlBLE1BQU0sY0FBYztRQUN4QixJQUFJSyxRQUFRVCxHQUFHLENBQUNJLEVBQUU7UUFDbEIsSUFBSU0sT0FBTyxPQUFPRDtRQUVsQixJQUFJTCxNQUFNLFlBQVlNLFNBQVMsVUFBVTtZQUN2QyxJQUFJVCxRQUFRQyxNQUFNLENBQUNFLEVBQUUsR0FBR0g7UUFDMUIsT0FBTyxJQUFJRyxNQUFNLFVBQVU7WUFDekJGLE1BQU0sQ0FBQ0UsRUFBRSxHQUFHSztRQUNkLE9BQU8sSUFBSUUsTUFBTUMsT0FBTyxDQUFDSCxRQUFRO1lBQy9CUCxNQUFNLENBQUNFLEVBQUUsR0FBR0ssTUFBTUksR0FBRyxDQUFDQyxDQUFBQSxJQUFLZixVQUFVZSxHQUFHWjtRQUMxQyxPQUFPO1lBQ0wsSUFBSVEsU0FBUyxZQUFZRCxVQUFVLE1BQU1BLFFBQVFWLFVBQVVVO1lBQzNEUCxNQUFNLENBQUNFLEVBQUUsR0FBR0s7UUFDZDtJQUNGO0lBRUEsT0FBT1A7QUFDVDtBQUVBLE1BQU1hO0lBQ0paLFlBQVlhLFdBQVcsQ0FBQyxDQUFDLENBQUU7UUFDekIsSUFBSSxDQUFDQyxJQUFJLEdBQUcsQ0FB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Y0FBYy9GLFNBQVMsRUFBRTtRQUNoQyxJQUFJK0YsWUFBWS9GLFNBQVMsRUFBRStGLGNBQWNBLFlBQVkvRixTQUFTO1FBQzlELElBQUltRixTQUFTO1FBQ2JZLFlBQVksSUFBSSxFQUFFekYsQ0FBQUE7WUFDaEI2RSxVQUFVN0U7UUFDWjtRQUNBLE9BQU82RTtJQUNUO0lBRUFhLEtBQUtiLE1BQU0sRUFBRWMsSUFBSSxFQUFFOUMsSUFBSSxFQUFFO1FBQ3ZCLElBQUkrQyxPQUFPO1lBQUU1RSxNQUFNLElBQUk7UUFBQztRQUN4QixJQUFLLElBQUloQixLQUFLNkMsS0FBTStDLElBQUksQ0FBQzVGLEVBQUUsR0FBRzZDLElBQUksQ0FBQzdDLEVBQUU7UUFDckMsT0FBTzZFLE9BQU9hLElBQUksQ0FBQ0MsTUFBTUM7SUFDM0I7SUFFQSxJQUFJQyxVQUFVO1FBQ1osT0FBTyxJQUFJO0lBQ2I7QUFDRjtBQUVBQyxPQUFPQyxPQUFPLEdBQUdwRjtBQUNqQkEsS0FBS3FGLE9BQU8sR0FBR3JGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWNvbS8uL25vZGVfbW9kdWxlcy9wb3N0Y3NzL2xpYi9ub2RlLmpzP2IyZTgiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmxldCB7IGlzQ2xlYW4sIG15IH0gPSByZXF1aXJlKCcuL3N5bWJvbHMnKVxubGV0IENzc1N5bnRheEVycm9yID0gcmVxdWlyZSgnLi9jc3Mtc3ludGF4LWVycm9yJylcbmxldCBTdHJpbmdpZmllciA9IHJlcXVpcmUoJy4vc3RyaW5naWZpZXInKVxubGV0IHN0cmluZ2lmeSA9IHJlcXVpcmUoJy4vc3RyaW5naWZ5JylcblxuZnVuY3Rpb24gY2xvbmVOb2RlKG9iaiwgcGFyZW50KSB7XG4gIGxldCBjbG9uZWQgPSBuZXcgb2JqLmNvbnN0cnVjdG9yKClcblxuICBmb3IgKGxldCBpIGluIG9iaikge1xuICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIHtcbiAgICAgIC8qIGM4IGlnbm9yZSBuZXh0IDIgKi9cbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuICAgIGlmIChpID09PSAncHJveHlDYWNoZScpIGNvbnRpbnVlXG4gICAgbGV0IHZhbHVlID0gb2JqW2ldXG4gICAgbGV0IHR5cGUgPSB0eXBlb2YgdmFsdWVcblxuICAgIGlmIChpID09PSAncGFyZW50JyAmJiB0eXBlID09PSAnb2JqZWN0Jykge1xuICAgICAgaWYgKHBhcmVudCkgY2xvbmVkW2ldID0gcGFyZW50XG4gICAgfSBlbHNlIGlmIChpID09PSAnc291cmNlJykge1xuICAgICAgY2xvbmVkW2ldID0gdmFsdWVcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICBjbG9uZWRbaV0gPSB2YWx1ZS5tYXAoaiA9PiBjbG9uZU5vZGUoaiwgY2xvbmVkKSlcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHR5cGUgPT09ICdvYmplY3QnICYmIHZhbHVlICE9PSBudWxsKSB2YWx1ZSA9IGNsb25lTm9kZSh2YWx1ZSlcbiAgICAgIGNsb25lZFtpXSA9IHZhbHVlXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNsb25lZFxufVxuXG5jbGFzcyBOb2RlIHtcbiAgY29uc3RydWN0b3IoZGVmYXVsdHMgPSB7fSkge1xuICAgIHRoaXMucmF3cyA9IHt9XG4gICAgdGhpc1tpc0NsZWFuXSA9IGZhbHNlXG4gICAgdGhpc1tteV0gPSB0cnVlXG5cbiAgICBmb3IgKGxldCBuYW1lIGluIGRlZmF1bHRzKSB7XG4gICAgICBpZiAobmFtZSA9PT0gJ25vZGVzJykge1xuICAgICAgICB0aGlzLm5vZGVzID0gW11cbiAgICAgICAgZm9yIChsZXQgbm9kZSBvZiBkZWZhdWx0c1tuYW1lXSkge1xuICAgICAgICAgIGlmICh0eXBlb2Ygbm9kZS5jbG9uZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy5hcHBlbmQobm9kZS5jbG9uZSgpKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFwcGVuZChub2RlKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpc1tuYW1lXSA9IGRlZmF1bHRzW25hbWVdXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgYWRkVG9FcnJvcihlcnJvcikge1xuICAgIGVycm9yLnBvc3Rjc3NOb2RlID0gdGhpc1xuICAgIGlmIChlcnJvci5zdGFjayAmJiB0aGlzLnNvdXJjZSAmJiAvXFxuXFxzezR9YXQgLy50ZXN0KGVycm9yLnN0YWNrKSkge1xuICAgICAgbGV0IHMgPSB0aGlzLnNvdXJjZVxuICAgICAgZXJyb3Iuc3RhY2sgPSBlcnJvci5zdGFjay5yZXBsYWNlKFxuICAgICAgICAvXFxuXFxzezR9YXQgLyxcbiAgICAgICAgYCQmJHtzLmlucHV0LmZyb219OiR7cy5zdGFydC5saW5lfToke3Muc3RhcnQuY29sdW1ufSQmYFxuICAgICAgKVxuICAgIH1cbiAgICByZXR1cm4gZXJyb3JcbiAgfVxuXG4gIGFmdGVyKGFkZCkge1xuICAgIHRoaXMucGFyZW50Lmluc2VydEFmdGVyKHRoaXMsIGFkZClcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgYXNzaWduKG92ZXJyaWRlcyA9IHt9KSB7XG4gICAgZm9yIChsZXQgbmFtZSBpbiBvdmVycmlkZXMpIHtcbiAgICAgIHRoaXNbbmFtZV0gPSBvdmVycmlkZXNbbmFtZV1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIGJlZm9yZShhZGQpIHtcbiAgICB0aGlzLnBhcmVudC5pbnNlcnRCZWZvcmUodGhpcywgYWRkKVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBjbGVhblJhd3Moa2VlcEJldHdlZW4pIHtcbiAgICBkZWxldGUgdGhpcy5yYXdzLmJlZm9yZVxuICAgIGRlbGV0ZSB0aGlzLnJhd3MuYWZ0ZXJcbiAgICBpZiAoIWtlZXBCZXR3ZWVuKSBkZWxldGUgdGhpcy5yYXdzLmJldHdlZW5cbiAgfVxuXG4gIGNsb25lKG92ZXJyaWRlcyA9IHt9KSB7XG4gICAgbGV0IGNsb25lZCA9IGNsb25lTm9kZSh0aGlzKVxuICAgIGZvciAobGV0IG5hbWUgaW4gb3ZlcnJpZGVzKSB7XG4gICAgICBjbG9uZWRbbmFtZV0gPSBvdmVycmlkZXNbbmFtZV1cbiAgICB9XG4gICAgcmV0dXJuIGNsb25lZFxuICB9XG5cbiAgY2xvbmVBZnRlcihvdmVycmlkZXMgPSB7fSkge1xuICAgIGxldCBjbG9uZWQgPSB0aGlzLmNsb25lKG92ZXJyaWRlcylcbiAgICB0aGlzLnBhcmVudC5pbnNlcnRBZnRlcih0aGlzLCBjbG9uZWQpXG4gICAgcmV0dXJuIGNsb25lZFxuICB9XG5cbiAgY2xvbmVCZWZvcmUob3ZlcnJpZGVzID0ge30pIHtcbiAgICBsZXQgY2xvbmVkID0gdGhpcy5jbG9uZShvdmVycmlkZXMpXG4gICAgdGhpcy5wYXJlbnQuaW5zZXJ0QmVmb3JlKHRoaXMsIGNsb25lZClcbiAgICByZXR1cm4gY2xvbmVkXG4gIH1cblxuICBlcnJvcihtZXNzYWdlLCBvcHRzID0ge30pIHtcbiAgICBpZiAodGhpcy5zb3VyY2UpIHtcbiAgICAgIGxldCB7IGVuZCwgc3RhcnQgfSA9IHRoaXMucmFuZ2VCeShvcHRzKVxuICAgICAgcmV0dXJuIHRoaXMuc291cmNlLmlucHV0LmVycm9yKFxuICAgICAgICBtZXNzYWdlLFxuICAgICAgICB7IGNvbHVtbjogc3RhcnQuY29sdW1uLCBsaW5lOiBzdGFydC5saW5lIH0sXG4gICAgICAgIHsgY29sdW1uOiBlbmQuY29sdW1uLCBsaW5lOiBlbmQubGluZSB9LFxuICAgICAgICBvcHRzXG4gICAgICApXG4gICAgfVxuICAgIHJldHVybiBuZXcgQ3NzU3ludGF4RXJyb3IobWVzc2FnZSlcbiAgfVxuXG4gIGdldFByb3h5UHJvY2Vzc29yKCkge1xuICAgIHJldHVybiB7XG4gICAgICBnZXQobm9kZSwgcHJvcCkge1xuICAgICAgICBpZiAocHJvcCA9PT0gJ3Byb3h5T2YnKSB7XG4gICAgICAgICAgcmV0dXJuIG5vZGVcbiAgICAgICAgfSBlbHNlIGlmIChwcm9wID09PSAncm9vdCcpIHtcbiAgICAgICAgICByZXR1cm4gKCkgPT4gbm9kZS5yb290KCkudG9Qcm94eSgpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIG5vZGVbcHJvcF1cbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgc2V0KG5vZGUsIHByb3AsIHZhbHVlKSB7XG4gICAgICAgIGlmIChub2RlW3Byb3BdID09PSB2YWx1ZSkgcmV0dXJuIHRydWVcbiAgICAgICAgbm9kZVtwcm9wXSA9IHZhbHVlXG4gICAgICAgIGlmIChcbiAgICAgICAgICBwcm9wID09PSAncHJvcCcgfHxcbiAgICAgICAgICBwcm9wID09PSAndmFsdWUnIHx8XG4gICAgICAgICAgcHJvcCA9PT0gJ25hbWUnIHx8XG4gICAgICAgICAgcHJvcCA9PT0gJ3BhcmFtcycgfHxcbiAgICAgICAgICBwcm9wID09PSAnaW1wb3J0YW50JyB8fFxuICAgICAgICAgIC8qIGM4IGlnbm9yZSBuZXh0ICovXG4gICAgICAgICAgcHJvcCA9PT0gJ3RleHQnXG4gICAgICAgICkge1xuICAgICAgICAgIG5vZGUubWFya0RpcnR5KClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIG1hcmtEaXJ0eSgpIHtcbiAgICBpZiAodGhpc1tpc0NsZWFuXSkge1xuICAgICAgdGhpc1tpc0NsZWFuXSA9IGZhbHNlXG4gICAgICBsZXQgbmV4dCA9IHRoaXNcbiAgICAgIHdoaWxlICgobmV4dCA9IG5leHQucGFyZW50KSkge1xuICAgICAgICBuZXh0W2lzQ2xlYW5dID0gZmFsc2VcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBuZXh0KCkge1xuICAgIGlmICghdGhpcy5wYXJlbnQpIHJldHVybiB1bmRlZmluZWRcbiAgICBsZXQgaW5kZXggPSB0aGlzLnBhcmVudC5pbmRleCh0aGlzKVxuICAgIHJldHVybiB0aGlzLnBhcmVudC5ub2Rlc1tpbmRleCArIDFdXG4gIH1cblxuICBwb3NpdGlvbkJ5KG9wdHMsIHN0cmluZ1JlcHJlc2VudGF0aW9uKSB7XG4gICAgbGV0IHBvcyA9IHRoaXMuc291cmNlLnN0YXJ0XG4gICAgaWYgKG9wdHMuaW5kZXgpIHtcbiAgICAgIHBvcyA9IHRoaXMucG9zaXRpb25JbnNpZGUob3B0cy5pbmRleCwgc3RyaW5nUmVwcmVzZW50YXRpb24pXG4gICAgfSBlbHNlIGlmIChvcHRzLndvcmQpIHtcbiAgICAgIHN0cmluZ1JlcHJlc2VudGF0aW9uID0gdGhpcy50b1N0cmluZygpXG4gICAgICBsZXQgaW5kZXggPSBzdHJpbmdSZXByZXNlbnRhdGlvbi5pbmRleE9mKG9wdHMud29yZClcbiAgICAgIGlmIChpbmRleCAhPT0gLTEpIHBvcyA9IHRoaXMucG9zaXRpb25JbnNpZGUoaW5kZXgsIHN0cmluZ1JlcHJlc2VudGF0aW9uKVxuICAgIH1cbiAgICByZXR1cm4gcG9zXG4gIH1cblxuICBwb3NpdGlvbkluc2lkZShpbmRleCwgc3RyaW5nUmVwcmVzZW50YXRpb24pIHtcbiAgICBsZXQgc3RyaW5nID0gc3RyaW5nUmVwcmVzZW50YXRpb24gfHwgdGhpcy50b1N0cmluZygpXG4gICAgbGV0IGNvbHVtbiA9IHRoaXMuc291cmNlLnN0YXJ0LmNvbHVtblxuICAgIGxldCBsaW5lID0gdGhpcy5zb3VyY2Uuc3RhcnQubGluZVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbmRleDsgaSsrKSB7XG4gICAgICBpZiAoc3RyaW5nW2ldID09PSAnXFxuJykge1xuICAgICAgICBjb2x1bW4gPSAxXG4gICAgICAgIGxpbmUgKz0gMVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29sdW1uICs9IDFcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4geyBjb2x1bW4sIGxpbmUgfVxuICB9XG5cbiAgcHJldigpIHtcbiAgICBpZiAoIXRoaXMucGFyZW50KSByZXR1cm4gdW5kZWZpbmVkXG4gICAgbGV0IGluZGV4ID0gdGhpcy5wYXJlbnQuaW5kZXgodGhpcylcbiAgICByZXR1cm4gdGhpcy5wYXJlbnQubm9kZXNbaW5kZXggLSAxXVxuICB9XG5cbiAgcmFuZ2VCeShvcHRzKSB7XG4gICAgbGV0IHN0YXJ0ID0ge1xuICAgICAgY29sdW1uOiB0aGlzLnNvdXJjZS5zdGFydC5jb2x1bW4sXG4gICAgICBsaW5lOiB0aGlzLnNvdXJjZS5zdGFydC5saW5lXG4gICAgfVxuICAgIGxldCBlbmQgPSB0aGlzLnNvdXJjZS5lbmRcbiAgICAgID8ge1xuICAgICAgICBjb2x1bW46IHRoaXMuc291cmNlLmVuZC5jb2x1bW4gKyAxLFxuICAgICAgICBsaW5lOiB0aGlzLnNvdXJjZS5lbmQubGluZVxuICAgICAgfVxuICAgICAgOiB7XG4gICAgICAgIGNvbHVtbjogc3RhcnQuY29sdW1uICsgMSxcbiAgICAgICAgbGluZTogc3RhcnQubGluZVxuICAgICAgfVxuXG4gICAgaWYgKG9wdHMud29yZCkge1xuICAgICAgbGV0IHN0cmluZ1JlcHJlc2VudGF0aW9uID0gdGhpcy50b1N0cmluZygpXG4gICAgICBsZXQgaW5kZXggPSBzdHJpbmdSZXByZXNlbnRhdGlvbi5pbmRleE9mKG9wdHMud29yZClcbiAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgc3RhcnQgPSB0aGlzLnBvc2l0aW9uSW5zaWRlKGluZGV4LCBzdHJpbmdSZXByZXNlbnRhdGlvbilcbiAgICAgICAgZW5kID0gdGhpcy5wb3NpdGlvbkluc2lkZShpbmRleCArIG9wdHMud29yZC5sZW5ndGgsIHN0cmluZ1JlcHJlc2VudGF0aW9uKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAob3B0cy5zdGFydCkge1xuICAgICAgICBzdGFydCA9IHtcbiAgICAgICAgICBjb2x1bW46IG9wdHMuc3RhcnQuY29sdW1uLFxuICAgICAgICAgIGxpbmU6IG9wdHMuc3RhcnQubGluZVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKG9wdHMuaW5kZXgpIHtcbiAgICAgICAgc3RhcnQgPSB0aGlzLnBvc2l0aW9uSW5zaWRlKG9wdHMuaW5kZXgpXG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRzLmVuZCkge1xuICAgICAgICBlbmQgPSB7XG4gICAgICAgICAgY29sdW1uOiBvcHRzLmVuZC5jb2x1bW4sXG4gICAgICAgICAgbGluZTogb3B0cy5lbmQubGluZVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKG9wdHMuZW5kSW5kZXgpIHtcbiAgICAgICAgZW5kID0gdGhpcy5wb3NpdGlvbkluc2lkZShvcHRzLmVuZEluZGV4KVxuICAgICAgfSBlbHNlIGlmIChvcHRzLmluZGV4KSB7XG4gICAgICAgIGVuZCA9IHRoaXMucG9zaXRpb25JbnNpZGUob3B0cy5pbmRleCArIDEpXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgZW5kLmxpbmUgPCBzdGFydC5saW5lIHx8XG4gICAgICAoZW5kLmxpbmUgPT09IHN0YXJ0LmxpbmUgJiYgZW5kLmNvbHVtbiA8PSBzdGFydC5jb2x1bW4pXG4gICAgKSB7XG4gICAgICBlbmQgPSB7IGNvbHVtbjogc3RhcnQuY29sdW1uICsgMSwgbGluZTogc3RhcnQubGluZSB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgZW5kLCBzdGFydCB9XG4gIH1cblxuICByYXcocHJvcCwgZGVmYXVsdFR5cGUpIHtcbiAgICBsZXQgc3RyID0gbmV3IFN0cmluZ2lmaWVyKClcbiAgICByZXR1cm4gc3RyLnJhdyh0aGlzLCBwcm9wLCBkZWZhdWx0VHlwZSlcbiAgfVxuXG4gIHJlbW92ZSgpIHtcbiAgICBpZiAodGhpcy5wYXJlbnQpIHtcbiAgICAgIHRoaXMucGFyZW50LnJlbW92ZUNoaWxkKHRoaXMpXG4gICAgfVxuICAgIHRoaXMucGFyZW50ID0gdW5kZWZpbmVkXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHJlcGxhY2VXaXRoKC4uLm5vZGVzKSB7XG4gICAgaWYgKHRoaXMucGFyZW50KSB7XG4gICAgICBsZXQgYm9va21hcmsgPSB0aGlzXG4gICAgICBsZXQgZm91bmRTZWxmID0gZmFsc2VcbiAgICAgIGZvciAobGV0IG5vZGUgb2Ygbm9kZXMpIHtcbiAgICAgICAgaWYgKG5vZGUgPT09IHRoaXMpIHtcbiAgICAgICAgICBmb3VuZFNlbGYgPSB0cnVlXG4gICAgICAgIH0gZWxzZSBpZiAoZm91bmRTZWxmKSB7XG4gICAgICAgICAgdGhpcy5wYXJlbnQuaW5zZXJ0QWZ0ZXIoYm9va21hcmssIG5vZGUpXG4gICAgICAgICAgYm9va21hcmsgPSBub2RlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5wYXJlbnQuaW5zZXJ0QmVmb3JlKGJvb2ttYXJrLCBub2RlKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghZm91bmRTZWxmKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlKClcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgcm9vdCgpIHtcbiAgICBsZXQgcmVzdWx0ID0gdGhpc1xuICAgIHdoaWxlIChyZXN1bHQucGFyZW50ICYmIHJlc3VsdC5wYXJlbnQudHlwZSAhPT0gJ2RvY3VtZW50Jykge1xuICAgICAgcmVzdWx0ID0gcmVzdWx0LnBhcmVudFxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICB0b0pTT04oXywgaW5wdXRzKSB7XG4gICAgbGV0IGZpeGVkID0ge31cbiAgICBsZXQgZW1pdElucHV0cyA9IGlucHV0cyA9PSBudWxsXG4gICAgaW5wdXRzID0gaW5wdXRzIHx8IG5ldyBNYXAoKVxuICAgIGxldCBpbnB1dHNOZXh0SW5kZXggPSAwXG5cbiAgICBmb3IgKGxldCBuYW1lIGluIHRoaXMpIHtcbiAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMsIG5hbWUpKSB7XG4gICAgICAgIC8qIGM4IGlnbm9yZSBuZXh0IDIgKi9cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cbiAgICAgIGlmIChuYW1lID09PSAncGFyZW50JyB8fCBuYW1lID09PSAncHJveHlDYWNoZScpIGNvbnRpbnVlXG4gICAgICBsZXQgdmFsdWUgPSB0aGlzW25hbWVdXG5cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICBmaXhlZFtuYW1lXSA9IHZhbHVlLm1hcChpID0+IHtcbiAgICAgICAgICBpZiAodHlwZW9mIGkgPT09ICdvYmplY3QnICYmIGkudG9KU09OKSB7XG4gICAgICAgICAgICByZXR1cm4gaS50b0pTT04obnVsbCwgaW5wdXRzKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gaVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZS50b0pTT04pIHtcbiAgICAgICAgZml4ZWRbbmFtZV0gPSB2YWx1ZS50b0pTT04obnVsbCwgaW5wdXRzKVxuICAgICAgfSBlbHNlIGlmIChuYW1lID09PSAnc291cmNlJykge1xuICAgICAgICBsZXQgaW5wdXRJZCA9IGlucHV0cy5nZXQodmFsdWUuaW5wdXQpXG4gICAgICAgIGlmIChpbnB1dElkID09IG51bGwpIHtcbiAgICAgICAgICBpbnB1dElkID0gaW5wdXRzTmV4dEluZGV4XG4gICAgICAgICAgaW5wdXRzLnNldCh2YWx1ZS5pbnB1dCwgaW5wdXRzTmV4dEluZGV4KVxuICAgICAgICAgIGlucHV0c05leHRJbmRleCsrXG4gICAgICAgIH1cbiAgICAgICAgZml4ZWRbbmFtZV0gPSB7XG4gICAgICAgICAgZW5kOiB2YWx1ZS5lbmQsXG4gICAgICAgICAgaW5wdXRJZCxcbiAgICAgICAgICBzdGFydDogdmFsdWUuc3RhcnRcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZml4ZWRbbmFtZV0gPSB2YWx1ZVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChlbWl0SW5wdXRzKSB7XG4gICAgICBmaXhlZC5pbnB1dHMgPSBbLi4uaW5wdXRzLmtleXMoKV0ubWFwKGlucHV0ID0+IGlucHV0LnRvSlNPTigpKVxuICAgIH1cblxuICAgIHJldHVybiBmaXhlZFxuICB9XG5cbiAgdG9Qcm94eSgpIHtcbiAgICBpZiAoIXRoaXMucHJveHlDYWNoZSkge1xuICAgICAgdGhpcy5wcm94eUNhY2hlID0gbmV3IFByb3h5KHRoaXMsIHRoaXMuZ2V0UHJveHlQcm9jZXNzb3IoKSlcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMucHJveHlDYWNoZVxuICB9XG5cbiAgdG9TdHJpbmcoc3RyaW5naWZpZXIgPSBzdHJpbmdpZnkpIHtcbiAgICBpZiAoc3RyaW5naWZpZXIuc3RyaW5naWZ5KSBzdHJpbmdpZmllciA9IHN0cmluZ2lmaWVyLnN0cmluZ2lmeVxuICAgIGxldCByZXN1bHQgPSAnJ1xuICAgIHN0cmluZ2lmaWVyKHRoaXMsIGkgPT4ge1xuICAgICAgcmVzdWx0ICs9IGlcbiAgICB9KVxuICAgIHJldHVybiByZXN1bHRcbiAgfVxuXG4gIHdhcm4ocmVzdWx0LCB0ZXh0LCBvcHRzKSB7XG4gICAgbGV0IGRhdGEgPSB7IG5vZGU6IHRoaXMgfVxuICAgIGZvciAobGV0IGkgaW4gb3B0cykgZGF0YVtpXSA9IG9wdHNbaV1cbiAgICByZXR1cm4gcmVzdWx0Lndhcm4odGV4dCwgZGF0YSlcbiAgfVxuXG4gIGdldCBwcm94eU9mKCkge1xuICAgIHJldHVybiB0aGlzXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBOb2RlXG5Ob2RlLmRlZmF1bHQgPSBOb2RlXG4iXSwibmFtZXMiOlsiaXNDbGVhbiIsIm15IiwicmVxdWlyZSIsIkNzc1N5bnRheEVycm9yIiwiU3RyaW5naWZpZXIiLCJzdHJpbmdpZnkiLCJjbG9uZU5vZGUiLCJvYmoiLCJwYXJlbnQiLCJjbG9uZWQiLCJjb25zdHJ1Y3RvciIsImkiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJ2YWx1ZSIsInR5cGUiLCJBcnJheSIsImlzQXJyYXkiLCJtYXAiLCJqIiwiTm9kZSIsImRlZmF1bHRzIiwicmF3cyIsIm5hbWUiLCJub2RlcyIsIm5vZGUiLCJjbG9uZSIsImFwcGVuZCIsImFkZFRvRXJyb3IiLCJlcnJvciIsInBvc3Rjc3NOb2RlIiwic3RhY2siLCJzb3VyY2UiLCJ0ZXN0IiwicyIsInJlcGxhY2UiLCJpbnB1dCIsImZyb20iLCJzdGFydCIsImxpbmUiLCJjb2x1bW4iLCJhZnRlciIsImFkZCIsImluc2VydEFmdGVyIiwiYXNzaWduIiwib3ZlcnJpZGVzIiwiYmVmb3JlIiwiaW5zZXJ0QmVmb3JlIiwiY2xlYW5SYXdzIiwia2VlcEJldHdlZW4iLCJiZXR3ZWVuIiwiY2xvbmVBZnRlciIsImNsb25lQmVmb3JlIiwibWVzc2FnZSIsIm9wdHMiLCJlbmQiLCJyYW5nZUJ5IiwiZ2V0UHJveHlQcm9jZXNzb3IiLCJnZXQiLCJwcm9wIiwicm9vdCIsInRvUHJveHkiLCJzZXQiLCJtYXJrRGlydHkiLCJuZXh0IiwidW5kZWZpbmVkIiwiaW5kZXgiLCJwb3NpdGlvbkJ5Iiwic3RyaW5nUmVwcmVzZW50YXRpb24iLCJwb3MiLCJwb3NpdGlvbkluc2lkZSIsIndvcmQiLCJ0b1N0cmluZyIsImluZGV4T2YiLCJzdHJpbmciLCJwcmV2IiwibGVuZ3RoIiwiZW5kSW5kZXgiLCJyYXciLCJkZWZhdWx0VHlwZSIsInN0ciIsInJlbW92ZSIsInJlbW92ZUNoaWxkIiwicmVwbGFjZVdpdGgiLCJib29rbWFyayIsImZvdW5kU2VsZiIsInJlc3VsdCIsInRvSlNPTiIsIl8iLCJpbnB1dHMiLCJmaXhlZCIsImVtaXRJbnB1dHMiLCJNYXAiLCJpbnB1dHNOZXh0SW5kZXgiLCJpbnB1dElkIiwia2V5cyIsInByb3h5Q2FjaGUiLCJQcm94eSIsInN0cmluZ2lmaWVyIiwid2FybiIsInRleHQiLCJkYXRhIiwicHJveHlPZiIsIm1vZHVsZSIsImV4cG9ydHMiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/node.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/parse.js":
/*!*******************************************!*\
  !*** ./node_modules/postcss/lib/parse.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet Container = __webpack_require__(/*! ./container */ \"(ssr)/./node_modules/postcss/lib/container.js\");\nlet Parser = __webpack_require__(/*! ./parser */ \"(ssr)/./node_modules/postcss/lib/parser.js\");\nlet Input = __webpack_require__(/*! ./input */ \"(ssr)/./node_modules/postcss/lib/input.js\");\nfunction parse(css, opts) {\n    let input = new Input(css, opts);\n    let parser = new Parser(input);\n    try {\n        parser.parse();\n    } catch (e) {\n        if (true) {\n            if (e.name === \"CssSyntaxError\" && opts && opts.from) {\n                if (/\\.scss$/i.test(opts.from)) {\n                    e.message += \"\\nYou tried to parse SCSS with \" + \"the standard CSS parser; \" + \"try again with the postcss-scss parser\";\n                } else if (/\\.sass/i.test(opts.from)) {\n                    e.message += \"\\nYou tried to parse Sass with \" + \"the standard CSS parser; \" + \"try again with the postcss-sass parser\";\n                } else if (/\\.less$/i.test(opts.from)) {\n                    e.message += \"\\nYou tried to parse Less with \" + \"the standard CSS parser; \" + \"try again with the postcss-less parser\";\n                }\n            }\n        }\n        throw e;\n    }\n    return parser.root;\n}\nmodule.exports = parse;\nparse.default = parse;\nContainer.registerParse(parse);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvcGFyc2UuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxZQUFZQyxtQkFBT0EsQ0FBQztBQUN4QixJQUFJQyxTQUFTRCxtQkFBT0EsQ0FBQztBQUNyQixJQUFJRSxRQUFRRixtQkFBT0EsQ0FBQztBQUVwQixTQUFTRyxNQUFNQyxHQUFHLEVBQUVDLElBQUk7SUFDdEIsSUFBSUMsUUFBUSxJQUFJSixNQUFNRSxLQUFLQztJQUMzQixJQUFJRSxTQUFTLElBQUlOLE9BQU9LO0lBQ3hCLElBQUk7UUFDRkMsT0FBT0osS0FBSztJQUNkLEVBQUUsT0FBT0ssR0FBRztRQUNWLElBQUlDLElBQXlCLEVBQWM7WUFDekMsSUFBSUQsRUFBRUUsSUFBSSxLQUFLLG9CQUFvQkwsUUFBUUEsS0FBS00sSUFBSSxFQUFFO2dCQUNwRCxJQUFJLFdBQVdDLElBQUksQ0FBQ1AsS0FBS00sSUFBSSxHQUFHO29CQUM5QkgsRUFBRUssT0FBTyxJQUNQLG9DQUNBLDhCQUNBO2dCQUNKLE9BQU8sSUFBSSxVQUFVRCxJQUFJLENBQUNQLEtBQUtNLElBQUksR0FBRztvQkFDcENILEVBQUVLLE9BQU8sSUFDUCxvQ0FDQSw4QkFDQTtnQkFDSixPQUFPLElBQUksV0FBV0QsSUFBSSxDQUFDUCxLQUFLTSxJQUFJLEdBQUc7b0JBQ3JDSCxFQUFFSyxPQUFPLElBQ1Asb0NBQ0EsOEJBQ0E7Z0JBQ0o7WUFDRjtRQUNGO1FBQ0EsTUFBTUw7SUFDUjtJQUVBLE9BQU9ELE9BQU9PLElBQUk7QUFDcEI7QUFFQUMsT0FBT0MsT0FBTyxHQUFHYjtBQUNqQkEsTUFBTWMsT0FBTyxHQUFHZDtBQUVoQkosVUFBVW1CLGFBQWEsQ0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lY29tLy4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MvbGliL3BhcnNlLmpzPzM2MzMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmxldCBDb250YWluZXIgPSByZXF1aXJlKCcuL2NvbnRhaW5lcicpXG5sZXQgUGFyc2VyID0gcmVxdWlyZSgnLi9wYXJzZXInKVxubGV0IElucHV0ID0gcmVxdWlyZSgnLi9pbnB1dCcpXG5cbmZ1bmN0aW9uIHBhcnNlKGNzcywgb3B0cykge1xuICBsZXQgaW5wdXQgPSBuZXcgSW5wdXQoY3NzLCBvcHRzKVxuICBsZXQgcGFyc2VyID0gbmV3IFBhcnNlcihpbnB1dClcbiAgdHJ5IHtcbiAgICBwYXJzZXIucGFyc2UoKVxuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChlLm5hbWUgPT09ICdDc3NTeW50YXhFcnJvcicgJiYgb3B0cyAmJiBvcHRzLmZyb20pIHtcbiAgICAgICAgaWYgKC9cXC5zY3NzJC9pLnRlc3Qob3B0cy5mcm9tKSkge1xuICAgICAgICAgIGUubWVzc2FnZSArPVxuICAgICAgICAgICAgJ1xcbllvdSB0cmllZCB0byBwYXJzZSBTQ1NTIHdpdGggJyArXG4gICAgICAgICAgICAndGhlIHN0YW5kYXJkIENTUyBwYXJzZXI7ICcgK1xuICAgICAgICAgICAgJ3RyeSBhZ2FpbiB3aXRoIHRoZSBwb3N0Y3NzLXNjc3MgcGFyc2VyJ1xuICAgICAgICB9IGVsc2UgaWYgKC9cXC5zYXNzL2kudGVzdChvcHRzLmZyb20pKSB7XG4gICAgICAgICAgZS5tZXNzYWdlICs9XG4gICAgICAgICAgICAnXFxuWW91IHRyaWVkIHRvIHBhcnNlIFNhc3Mgd2l0aCAnICtcbiAgICAgICAgICAgICd0aGUgc3RhbmRhcmQgQ1NTIHBhcnNlcjsgJyArXG4gICAgICAgICAgICAndHJ5IGFnYWluIHdpdGggdGhlIHBvc3Rjc3Mtc2FzcyBwYXJzZXInXG4gICAgICAgIH0gZWxzZSBpZiAoL1xcLmxlc3MkL2kudGVzdChvcHRzLmZyb20pKSB7XG4gICAgICAgICAgZS5tZXNzYWdlICs9XG4gICAgICAgICAgICAnXFxuWW91IHRyaWVkIHRvIHBhcnNlIExlc3Mgd2l0aCAnICtcbiAgICAgICAgICAgICd0aGUgc3RhbmRhcmQgQ1NTIHBhcnNlcjsgJyArXG4gICAgICAgICAgICAndHJ5IGFnYWluIHdpdGggdGhlIHBvc3Rjc3MtbGVzcyBwYXJzZXInXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgZVxuICB9XG5cbiAgcmV0dXJuIHBhcnNlci5yb290XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcGFyc2VcbnBhcnNlLmRlZmF1bHQgPSBwYXJzZVxuXG5Db250YWluZXIucmVnaXN0ZXJQYXJzZShwYXJzZSlcbiJdLCJuYW1lcyI6WyJDb250YWluZXIiLCJyZXF1aXJlIiwiUGFyc2VyIiwiSW5wdXQiLCJwYXJzZSIsImNzcyIsIm9wdHMiLCJpbnB1dCIsInBhcnNlciIsImUiLCJwcm9jZXNzIiwibmFtZSIsImZyb20iLCJ0ZXN0IiwibWVzc2FnZSIsInJvb3QiLCJtb2R1bGUiLCJleHBvcnRzIiwiZGVmYXVsdCIsInJlZ2lzdGVyUGFyc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/parse.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/parser.js":
/*!********************************************!*\
  !*** ./node_modules/postcss/lib/parser.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet Declaration = __webpack_require__(/*! ./declaration */ \"(ssr)/./node_modules/postcss/lib/declaration.js\");\nlet tokenizer = __webpack_require__(/*! ./tokenize */ \"(ssr)/./node_modules/postcss/lib/tokenize.js\");\nlet Comment = __webpack_require__(/*! ./comment */ \"(ssr)/./node_modules/postcss/lib/comment.js\");\nlet AtRule = __webpack_require__(/*! ./at-rule */ \"(ssr)/./node_modules/postcss/lib/at-rule.js\");\nlet Root = __webpack_require__(/*! ./root */ \"(ssr)/./node_modules/postcss/lib/root.js\");\nlet Rule = __webpack_require__(/*! ./rule */ \"(ssr)/./node_modules/postcss/lib/rule.js\");\nconst SAFE_COMMENT_NEIGHBOR = {\n    empty: true,\n    space: true\n};\nfunction findLastWithPosition(tokens) {\n    for(let i = tokens.length - 1; i >= 0; i--){\n        let token = tokens[i];\n        let pos = token[3] || token[2];\n        if (pos) return pos;\n    }\n}\nclass Parser {\n    constructor(input){\n        this.input = input;\n        this.root = new Root();\n        this.current = this.root;\n        this.spaces = \"\";\n        this.semicolon = false;\n        this.customProperty = false;\n        this.createTokenizer();\n        this.root.source = {\n            input,\n            start: {\n                column: 1,\n                line: 1,\n                offset: 0\n            }\n        };\n    }\n    atrule(token) {\n        let node = new AtRule();\n        node.name = token[1].slice(1);\n        if (node.name === \"\") {\n            this.unnamedAtrule(node, token);\n        }\n        this.init(node, token[2]);\n        let type;\n        let prev;\n        let shift;\n        let last = false;\n        let open = false;\n        let params = [];\n        let brackets = [];\n        while(!this.tokenizer.endOfFile()){\n            token = this.tokenizer.nextToken();\n            type = token[0];\n            if (type === \"(\" || type === \"[\") {\n                brackets.push(type === \"(\" ? \")\" : \"]\");\n            } else if (type === \"{\" && brackets.length > 0) {\n                brackets.push(\"}\");\n            } else if (type === brackets[brackets.length - 1]) {\n                brackets.pop();\n            }\n            if (brackets.length === 0) {\n                if (type === \";\") {\n                    node.source.end = this.getPosition(token[2]);\n                    node.source.end.offset++;\n                    this.semicolon = true;\n                    break;\n                } else if (type === \"{\") {\n                    open = true;\n                    break;\n                } else if (type === \"}\") {\n                    if (params.length > 0) {\n                        shift = params.length - 1;\n                        prev = params[shift];\n                        while(prev && prev[0] === \"space\"){\n                            prev = params[--shift];\n                        }\n                        if (prev) {\n                            node.source.end = this.getPosition(prev[3] || prev[2]);\n                            node.source.end.offset++;\n                        }\n                    }\n                    this.end(token);\n                    break;\n                } else {\n                    params.push(token);\n                }\n            } else {\n                params.push(token);\n            }\n            if (this.tokenizer.endOfFile()) {\n                last = true;\n                break;\n            }\n        }\n        node.raws.between = this.spacesAndCommentsFromEnd(params);\n        if (params.length) {\n            node.raws.afterName = this.spacesAndCommentsFromStart(params);\n            this.raw(node, \"params\", params);\n            if (last) {\n                token = params[params.length - 1];\n                node.source.end = this.getPosition(token[3] || token[2]);\n                node.source.end.offset++;\n                this.spaces = node.raws.between;\n                node.raws.between = \"\";\n            }\n        } else {\n            node.raws.afterName = \"\";\n            node.params = \"\";\n        }\n        if (open) {\n            node.nodes = [];\n            this.current = node;\n        }\n    }\n    checkMissedSemicolon(tokens) {\n        let colon = this.colon(tokens);\n        if (colon === false) return;\n        let founded = 0;\n        let token;\n        for(let j = colon - 1; j >= 0; j--){\n            token = tokens[j];\n            if (token[0] !== \"space\") {\n                founded += 1;\n                if (founded === 2) break;\n            }\n        }\n        // If the token is a word, e.g. `!important`, `red` or any other valid property's value.\n        // Then we need to return the colon after that word token. [3] is the \"end\" colon of that word.\n        // And because we need it after that one we do +1 to get the next one.\n        throw this.input.error(\"Missed semicolon\", token[0] === \"word\" ? token[3] + 1 : token[2]);\n    }\n    colon(tokens) {\n        let brackets = 0;\n        let token, type, prev;\n        for (let [i, element] of tokens.entries()){\n            token = element;\n            type = token[0];\n            if (type === \"(\") {\n                brackets += 1;\n            }\n            if (type === \")\") {\n                brackets -= 1;\n            }\n            if (brackets === 0 && type === \":\") {\n                if (!prev) {\n                    this.doubleColon(token);\n                } else if (prev[0] === \"word\" && prev[1] === \"progid\") {\n                    continue;\n                } else {\n                    return i;\n                }\n            }\n            prev = token;\n        }\n        return false;\n    }\n    comment(token) {\n        let node = new Comment();\n        this.init(node, token[2]);\n        node.source.end = this.getPosition(token[3] || token[2]);\n        node.source.end.offset++;\n        let text = token[1].slice(2, -2);\n        if (/^\\s*$/.test(text)) {\n            node.text = \"\";\n            node.raws.left = text;\n            node.raws.right = \"\";\n        } else {\n            let match = text.match(/^(\\s*)([^]*\\S)(\\s*)$/);\n            node.text = match[2];\n            node.raws.left = match[1];\n            node.raws.right = match[3];\n        }\n    }\n    createTokenizer() {\n        this.tokenizer = tokenizer(this.input);\n    }\n    decl(tokens, customProperty) {\n        let node = new Declaration();\n        this.init(node, tokens[0][2]);\n        let last = tokens[tokens.length - 1];\n        if (last[0] === \";\") {\n            this.semicolon = true;\n            tokens.pop();\n        }\n        node.source.end = this.getPosition(last[3] || last[2] || findLastWithPosition(tokens));\n        node.source.end.offset++;\n        while(tokens[0][0] !== \"word\"){\n            if (tokens.length === 1) this.unknownWord(tokens);\n            node.raws.before += tokens.shift()[1];\n        }\n        node.source.start = this.getPosition(tokens[0][2]);\n        node.prop = \"\";\n        while(tokens.length){\n            let type = tokens[0][0];\n            if (type === \":\" || type === \"space\" || type === \"comment\") {\n                break;\n            }\n            node.prop += tokens.shift()[1];\n        }\n        node.raws.between = \"\";\n        let token;\n        while(tokens.length){\n            token = tokens.shift();\n            if (token[0] === \":\") {\n                node.raws.between += token[1];\n                break;\n            } else {\n                if (token[0] === \"word\" && /\\w/.test(token[1])) {\n                    this.unknownWord([\n                        token\n                    ]);\n                }\n                node.raws.between += token[1];\n            }\n        }\n        if (node.prop[0] === \"_\" || node.prop[0] === \"*\") {\n            node.raws.before += node.prop[0];\n            node.prop = node.prop.slice(1);\n        }\n        let firstSpaces = [];\n        let next;\n        while(tokens.length){\n            next = tokens[0][0];\n            if (next !== \"space\" && next !== \"comment\") break;\n            firstSpaces.push(tokens.shift());\n        }\n        this.precheckMissedSemicolon(tokens);\n        for(let i = tokens.length - 1; i >= 0; i--){\n            token = tokens[i];\n            if (token[1].toLowerCase() === \"!important\") {\n                node.important = true;\n                let string = this.stringFrom(tokens, i);\n                string = this.spacesFromEnd(tokens) + string;\n                if (string !== \" !important\") node.raws.important = string;\n                break;\n            } else if (token[1].toLowerCase() === \"important\") {\n                let cache = tokens.slice(0);\n                let str = \"\";\n                for(let j = i; j > 0; j--){\n                    let type = cache[j][0];\n                    if (str.trim().indexOf(\"!\") === 0 && type !== \"space\") {\n                        break;\n                    }\n                    str = cache.pop()[1] + str;\n                }\n                if (str.trim().indexOf(\"!\") === 0) {\n                    node.important = true;\n                    node.raws.important = str;\n                    tokens = cache;\n                }\n            }\n            if (token[0] !== \"space\" && token[0] !== \"comment\") {\n                break;\n            }\n        }\n        let hasWord = tokens.some((i)=>i[0] !== \"space\" && i[0] !== \"comment\");\n        if (hasWord) {\n            node.raws.between += firstSpaces.map((i)=>i[1]).join(\"\");\n            firstSpaces = [];\n        }\n        this.raw(node, \"value\", firstSpaces.concat(tokens), customProperty);\n        if (node.value.includes(\":\") && !customProperty) {\n            this.checkMissedSemicolon(tokens);\n        }\n    }\n    doubleColon(token) {\n        throw this.input.error(\"Double colon\", {\n            offset: token[2]\n        }, {\n            offset: token[2] + token[1].length\n        });\n    }\n    emptyRule(token) {\n        let node = new Rule();\n        this.init(node, token[2]);\n        node.selector = \"\";\n        node.raws.between = \"\";\n        this.current = node;\n    }\n    end(token) {\n        if (this.current.nodes && this.current.nodes.length) {\n            this.current.raws.semicolon = this.semicolon;\n        }\n        this.semicolon = false;\n        this.current.raws.after = (this.current.raws.after || \"\") + this.spaces;\n        this.spaces = \"\";\n        if (this.current.parent) {\n            this.current.source.end = this.getPosition(token[2]);\n            this.current.source.end.offset++;\n            this.current = this.current.parent;\n        } else {\n            this.unexpectedClose(token);\n        }\n    }\n    endFile() {\n        if (this.current.parent) this.unclosedBlock();\n        if (this.current.nodes && this.current.nodes.length) {\n            this.current.raws.semicolon = this.semicolon;\n        }\n        this.current.raws.after = (this.current.raws.after || \"\") + this.spaces;\n        this.root.source.end = this.getPosition(this.tokenizer.position());\n    }\n    freeSemicolon(token) {\n        this.spaces += token[1];\n        if (this.current.nodes) {\n            let prev = this.current.nodes[this.current.nodes.length - 1];\n            if (prev && prev.type === \"rule\" && !prev.raws.ownSemicolon) {\n                prev.raws.ownSemicolon = this.spaces;\n                this.spaces = \"\";\n            }\n        }\n    }\n    // Helpers\n    getPosition(offset) {\n        let pos = this.input.fromOffset(offset);\n        return {\n            column: pos.col,\n            line: pos.line,\n            offset\n        };\n    }\n    init(node, offset) {\n        this.current.push(node);\n        node.source = {\n            input: this.input,\n            start: this.getPosition(offset)\n        };\n        node.raws.before = this.spaces;\n        this.spaces = \"\";\n        if (node.type !== \"comment\") this.semicolon = false;\n    }\n    other(start) {\n        let end = false;\n        let type = null;\n        let colon = false;\n        let bracket = null;\n        let brackets = [];\n        let customProperty = start[1].startsWith(\"--\");\n        let tokens = [];\n        let token = start;\n        while(token){\n            type = token[0];\n            tokens.push(token);\n            if (type === \"(\" || type === \"[\") {\n                if (!bracket) bracket = token;\n                brackets.push(type === \"(\" ? \")\" : \"]\");\n            } else if (customProperty && colon && type === \"{\") {\n                if (!bracket) bracket = token;\n                brackets.push(\"}\");\n            } else if (brackets.length === 0) {\n                if (type === \";\") {\n                    if (colon) {\n                        this.decl(tokens, customProperty);\n                        return;\n                    } else {\n                        break;\n                    }\n                } else if (type === \"{\") {\n                    this.rule(tokens);\n                    return;\n                } else if (type === \"}\") {\n                    this.tokenizer.back(tokens.pop());\n                    end = true;\n                    break;\n                } else if (type === \":\") {\n                    colon = true;\n                }\n            } else if (type === brackets[brackets.length - 1]) {\n                brackets.pop();\n                if (brackets.length === 0) bracket = null;\n            }\n            token = this.tokenizer.nextToken();\n        }\n        if (this.tokenizer.endOfFile()) end = true;\n        if (brackets.length > 0) this.unclosedBracket(bracket);\n        if (end && colon) {\n            if (!customProperty) {\n                while(tokens.length){\n                    token = tokens[tokens.length - 1][0];\n                    if (token !== \"space\" && token !== \"comment\") break;\n                    this.tokenizer.back(tokens.pop());\n                }\n            }\n            this.decl(tokens, customProperty);\n        } else {\n            this.unknownWord(tokens);\n        }\n    }\n    parse() {\n        let token;\n        while(!this.tokenizer.endOfFile()){\n            token = this.tokenizer.nextToken();\n            switch(token[0]){\n                case \"space\":\n                    this.spaces += token[1];\n                    break;\n                case \";\":\n                    this.freeSemicolon(token);\n                    break;\n                case \"}\":\n                    this.end(token);\n                    break;\n                case \"comment\":\n                    this.comment(token);\n                    break;\n                case \"at-word\":\n                    this.atrule(token);\n                    break;\n                case \"{\":\n                    this.emptyRule(token);\n                    break;\n                default:\n                    this.other(token);\n                    break;\n            }\n        }\n        this.endFile();\n    }\n    precheckMissedSemicolon() {\n    // Hook for Safe Parser\n    }\n    raw(node, prop, tokens, customProperty) {\n        let token, type;\n        let length = tokens.length;\n        let value = \"\";\n        let clean = true;\n        let next, prev;\n        for(let i = 0; i < length; i += 1){\n            token = tokens[i];\n            type = token[0];\n            if (type === \"space\" && i === length - 1 && !customProperty) {\n                clean = false;\n            } else if (type === \"comment\") {\n                prev = tokens[i - 1] ? tokens[i - 1][0] : \"empty\";\n                next = tokens[i + 1] ? tokens[i + 1][0] : \"empty\";\n                if (!SAFE_COMMENT_NEIGHBOR[prev] && !SAFE_COMMENT_NEIGHBOR[next]) {\n                    if (value.slice(-1) === \",\") {\n                        clean = false;\n                    } else {\n                        value += token[1];\n                    }\n                } else {\n                    clean = false;\n                }\n            } else {\n                value += token[1];\n            }\n        }\n        if (!clean) {\n            let raw = tokens.reduce((all, i)=>all + i[1], \"\");\n            node.raws[prop] = {\n                raw,\n                value\n            };\n        }\n        node[prop] = value;\n    }\n    rule(tokens) {\n        tokens.pop();\n        let node = new Rule();\n        this.init(node, tokens[0][2]);\n        node.raws.between = this.spacesAndCommentsFromEnd(tokens);\n        this.raw(node, \"selector\", tokens);\n        this.current = node;\n    }\n    spacesAndCommentsFromEnd(tokens) {\n        let lastTokenType;\n        let spaces = \"\";\n        while(tokens.length){\n            lastTokenType = tokens[tokens.length - 1][0];\n            if (lastTokenType !== \"space\" && lastTokenType !== \"comment\") break;\n            spaces = tokens.pop()[1] + spaces;\n        }\n        return spaces;\n    }\n    // Errors\n    spacesAndCommentsFromStart(tokens) {\n        let next;\n        let spaces = \"\";\n        while(tokens.length){\n            next = tokens[0][0];\n            if (next !== \"space\" && next !== \"comment\") break;\n            spaces += tokens.shift()[1];\n        }\n        return spaces;\n    }\n    spacesFromEnd(tokens) {\n        let lastTokenType;\n        let spaces = \"\";\n        while(tokens.length){\n            lastTokenType = tokens[tokens.length - 1][0];\n            if (lastTokenType !== \"space\") break;\n            spaces = tokens.pop()[1] + spaces;\n        }\n        return spaces;\n    }\n    stringFrom(tokens, from) {\n        let result = \"\";\n        for(let i = from; i < tokens.length; i++){\n            result += tokens[i][1];\n        }\n        tokens.splice(from, tokens.length - from);\n        return result;\n    }\n    unclosedBlock() {\n        let pos = this.current.source.start;\n        throw this.input.error(\"Unclosed block\", pos.line, pos.column);\n    }\n    unclosedBracket(bracket) {\n        throw this.input.error(\"Unclosed bracket\", {\n            offset: bracket[2]\n        }, {\n            offset: bracket[2] + 1\n        });\n    }\n    unexpectedClose(token) {\n        throw this.input.error(\"Unexpected }\", {\n            offset: token[2]\n        }, {\n            offset: token[2] + 1\n        });\n    }\n    unknownWord(tokens) {\n        throw this.input.error(\"Unknown word\", {\n            offset: tokens[0][2]\n        }, {\n            offset: tokens[0][2] + tokens[0][1].length\n        });\n    }\n    unnamedAtrule(node, token) {\n        throw this.input.error(\"At-rule without name\", {\n            offset: token[2]\n        }, {\n            offset: token[2] + token[1].length\n        });\n    }\n}\nmodule.exports = Parser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/parser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/postcss.js":
/*!*********************************************!*\
  !*** ./node_modules/postcss/lib/postcss.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet CssSyntaxError = __webpack_require__(/*! ./css-syntax-error */ \"(ssr)/./node_modules/postcss/lib/css-syntax-error.js\");\nlet Declaration = __webpack_require__(/*! ./declaration */ \"(ssr)/./node_modules/postcss/lib/declaration.js\");\nlet LazyResult = __webpack_require__(/*! ./lazy-result */ \"(ssr)/./node_modules/postcss/lib/lazy-result.js\");\nlet Container = __webpack_require__(/*! ./container */ \"(ssr)/./node_modules/postcss/lib/container.js\");\nlet Processor = __webpack_require__(/*! ./processor */ \"(ssr)/./node_modules/postcss/lib/processor.js\");\nlet stringify = __webpack_require__(/*! ./stringify */ \"(ssr)/./node_modules/postcss/lib/stringify.js\");\nlet fromJSON = __webpack_require__(/*! ./fromJSON */ \"(ssr)/./node_modules/postcss/lib/fromJSON.js\");\nlet Document = __webpack_require__(/*! ./document */ \"(ssr)/./node_modules/postcss/lib/document.js\");\nlet Warning = __webpack_require__(/*! ./warning */ \"(ssr)/./node_modules/postcss/lib/warning.js\");\nlet Comment = __webpack_require__(/*! ./comment */ \"(ssr)/./node_modules/postcss/lib/comment.js\");\nlet AtRule = __webpack_require__(/*! ./at-rule */ \"(ssr)/./node_modules/postcss/lib/at-rule.js\");\nlet Result = __webpack_require__(/*! ./result.js */ \"(ssr)/./node_modules/postcss/lib/result.js\");\nlet Input = __webpack_require__(/*! ./input */ \"(ssr)/./node_modules/postcss/lib/input.js\");\nlet parse = __webpack_require__(/*! ./parse */ \"(ssr)/./node_modules/postcss/lib/parse.js\");\nlet list = __webpack_require__(/*! ./list */ \"(ssr)/./node_modules/postcss/lib/list.js\");\nlet Rule = __webpack_require__(/*! ./rule */ \"(ssr)/./node_modules/postcss/lib/rule.js\");\nlet Root = __webpack_require__(/*! ./root */ \"(ssr)/./node_modules/postcss/lib/root.js\");\nlet Node = __webpack_require__(/*! ./node */ \"(ssr)/./node_modules/postcss/lib/node.js\");\nfunction postcss(...plugins) {\n    if (plugins.length === 1 && Array.isArray(plugins[0])) {\n        plugins = plugins[0];\n    }\n    return new Processor(plugins);\n}\npostcss.plugin = function plugin(name, initializer) {\n    let warningPrinted = false;\n    function creator(...args) {\n        // eslint-disable-next-line no-console\n        if (console && console.warn && !warningPrinted) {\n            warningPrinted = true;\n            // eslint-disable-next-line no-console\n            console.warn(name + \": postcss.plugin was deprecated. Migration guide:\\n\" + \"https://evilmartians.com/chronicles/postcss-8-plugin-migration\");\n            if (process.env.LANG && process.env.LANG.startsWith(\"cn\")) {\n                /* c8 ignore next 7 */ // eslint-disable-next-line no-console\n                console.warn(name + \": 里面 postcss.plugin 被弃用. 迁移指南:\\n\" + \"https://www.w3ctech.com/topic/2226\");\n            }\n        }\n        let transformer = initializer(...args);\n        transformer.postcssPlugin = name;\n        transformer.postcssVersion = new Processor().version;\n        return transformer;\n    }\n    let cache;\n    Object.defineProperty(creator, \"postcss\", {\n        get () {\n            if (!cache) cache = creator();\n            return cache;\n        }\n    });\n    creator.process = function(css, processOpts, pluginOpts) {\n        return postcss([\n            creator(pluginOpts)\n        ]).process(css, processOpts);\n    };\n    return creator;\n};\npostcss.stringify = stringify;\npostcss.parse = parse;\npostcss.fromJSON = fromJSON;\npostcss.list = list;\npostcss.comment = (defaults)=>new Comment(defaults);\npostcss.atRule = (defaults)=>new AtRule(defaults);\npostcss.decl = (defaults)=>new Declaration(defaults);\npostcss.rule = (defaults)=>new Rule(defaults);\npostcss.root = (defaults)=>new Root(defaults);\npostcss.document = (defaults)=>new Document(defaults);\npostcss.CssSyntaxError = CssSyntaxError;\npostcss.Declaration = Declaration;\npostcss.Container = Container;\npostcss.Processor = Processor;\npostcss.Document = Document;\npostcss.Comment = Comment;\npostcss.Warning = Warning;\npostcss.AtRule = AtRule;\npostcss.Result = Result;\npostcss.Input = Input;\npostcss.Rule = Rule;\npostcss.Root = Root;\npostcss.Node = Node;\nLazyResult.registerPostcss(postcss);\nmodule.exports = postcss;\npostcss.default = postcss;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/postcss.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/previous-map.js":
/*!**************************************************!*\
  !*** ./node_modules/postcss/lib/previous-map.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet { SourceMapConsumer, SourceMapGenerator } = __webpack_require__(/*! source-map-js */ \"(ssr)/./node_modules/source-map-js/source-map.js\");\nlet { existsSync, readFileSync } = __webpack_require__(/*! fs */ \"fs\");\nlet { dirname, join } = __webpack_require__(/*! path */ \"path\");\nfunction fromBase64(str) {\n    if (Buffer) {\n        return Buffer.from(str, \"base64\").toString();\n    } else {\n        /* c8 ignore next 2 */ return window.atob(str);\n    }\n}\nclass PreviousMap {\n    constructor(css, opts){\n        if (opts.map === false) return;\n        this.loadAnnotation(css);\n        this.inline = this.startWith(this.annotation, \"data:\");\n        let prev = opts.map ? opts.map.prev : undefined;\n        let text = this.loadMap(opts.from, prev);\n        if (!this.mapFile && opts.from) {\n            this.mapFile = opts.from;\n        }\n        if (this.mapFile) this.root = dirname(this.mapFile);\n        if (text) this.text = text;\n    }\n    consumer() {\n        if (!this.consumerCache) {\n            this.consumerCache = new SourceMapConsumer(this.text);\n        }\n        return this.consumerCache;\n    }\n    decodeInline(text) {\n        let baseCharsetUri = /^data:application\\/json;charset=utf-?8;base64,/;\n        let baseUri = /^data:application\\/json;base64,/;\n        let charsetUri = /^data:application\\/json;charset=utf-?8,/;\n        let uri = /^data:application\\/json,/;\n        if (charsetUri.test(text) || uri.test(text)) {\n            return decodeURIComponent(text.substr(RegExp.lastMatch.length));\n        }\n        if (baseCharsetUri.test(text) || baseUri.test(text)) {\n            return fromBase64(text.substr(RegExp.lastMatch.length));\n        }\n        let encoding = text.match(/data:application\\/json;([^,]+),/)[1];\n        throw new Error(\"Unsupported source map encoding \" + encoding);\n    }\n    getAnnotationURL(sourceMapString) {\n        return sourceMapString.replace(/^\\/\\*\\s*# sourceMappingURL=/, \"\").trim();\n    }\n    isMap(map) {\n        if (typeof map !== \"object\") return false;\n        return typeof map.mappings === \"string\" || typeof map._mappings === \"string\" || Array.isArray(map.sections);\n    }\n    loadAnnotation(css) {\n        let comments = css.match(/\\/\\*\\s*# sourceMappingURL=/gm);\n        if (!comments) return;\n        // sourceMappingURLs from comments, strings, etc.\n        let start = css.lastIndexOf(comments.pop());\n        let end = css.indexOf(\"*/\", start);\n        if (start > -1 && end > -1) {\n            // Locate the last sourceMappingURL to avoid pickin\n            this.annotation = this.getAnnotationURL(css.substring(start, end));\n        }\n    }\n    loadFile(path) {\n        this.root = dirname(path);\n        if (existsSync(path)) {\n            this.mapFile = path;\n            return readFileSync(path, \"utf-8\").toString().trim();\n        }\n    }\n    loadMap(file, prev) {\n        if (prev === false) return false;\n        if (prev) {\n            if (typeof prev === \"string\") {\n                return prev;\n            } else if (typeof prev === \"function\") {\n                let prevPath = prev(file);\n                if (prevPath) {\n                    let map = this.loadFile(prevPath);\n                    if (!map) {\n                        throw new Error(\"Unable to load previous source map: \" + prevPath.toString());\n                    }\n                    return map;\n                }\n            } else if (prev instanceof SourceMapConsumer) {\n                return SourceMapGenerator.fromSourceMap(prev).toString();\n            } else if (prev instanceof SourceMapGenerator) {\n                return prev.toString();\n            } else if (this.isMap(prev)) {\n                return JSON.stringify(prev);\n            } else {\n                throw new Error(\"Unsupported previous source map format: \" + prev.toString());\n            }\n        } else if (this.inline) {\n            return this.decodeInline(this.annotation);\n        } else if (this.annotation) {\n            let map = this.annotation;\n            if (file) map = join(dirname(file), map);\n            return this.loadFile(map);\n        }\n    }\n    startWith(string, start) {\n        if (!string) return false;\n        return string.substr(0, start.length) === start;\n    }\n    withContent() {\n        return !!(this.consumer().sourcesContent && this.consumer().sourcesContent.length > 0);\n    }\n}\nmodule.exports = PreviousMap;\nPreviousMap.default = PreviousMap;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/previous-map.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/processor.js":
/*!***********************************************!*\
  !*** ./node_modules/postcss/lib/processor.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet NoWorkResult = __webpack_require__(/*! ./no-work-result */ \"(ssr)/./node_modules/postcss/lib/no-work-result.js\");\nlet LazyResult = __webpack_require__(/*! ./lazy-result */ \"(ssr)/./node_modules/postcss/lib/lazy-result.js\");\nlet Document = __webpack_require__(/*! ./document */ \"(ssr)/./node_modules/postcss/lib/document.js\");\nlet Root = __webpack_require__(/*! ./root */ \"(ssr)/./node_modules/postcss/lib/root.js\");\nclass Processor {\n    constructor(plugins = []){\n        this.version = \"8.4.33\";\n        this.plugins = this.normalize(plugins);\n    }\n    normalize(plugins) {\n        let normalized = [];\n        for (let i of plugins){\n            if (i.postcss === true) {\n                i = i();\n            } else if (i.postcss) {\n                i = i.postcss;\n            }\n            if (typeof i === \"object\" && Array.isArray(i.plugins)) {\n                normalized = normalized.concat(i.plugins);\n            } else if (typeof i === \"object\" && i.postcssPlugin) {\n                normalized.push(i);\n            } else if (typeof i === \"function\") {\n                normalized.push(i);\n            } else if (typeof i === \"object\" && (i.parse || i.stringify)) {\n                if (true) {\n                    throw new Error(\"PostCSS syntaxes cannot be used as plugins. Instead, please use \" + \"one of the syntax/parser/stringifier options as outlined \" + \"in your PostCSS runner documentation.\");\n                }\n            } else {\n                throw new Error(i + \" is not a PostCSS plugin\");\n            }\n        }\n        return normalized;\n    }\n    process(css, opts = {}) {\n        if (!this.plugins.length && !opts.parser && !opts.stringifier && !opts.syntax) {\n            return new NoWorkResult(this, css, opts);\n        } else {\n            return new LazyResult(this, css, opts);\n        }\n    }\n    use(plugin) {\n        this.plugins = this.plugins.concat(this.normalize([\n            plugin\n        ]));\n        return this;\n    }\n}\nmodule.exports = Processor;\nProcessor.default = Processor;\nRoot.registerProcessor(Processor);\nDocument.registerProcessor(Processor);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvcHJvY2Vzc29yLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsZUFBZUMsbUJBQU9BLENBQUM7QUFDM0IsSUFBSUMsYUFBYUQsbUJBQU9BLENBQUM7QUFDekIsSUFBSUUsV0FBV0YsbUJBQU9BLENBQUM7QUFDdkIsSUFBSUcsT0FBT0gsbUJBQU9BLENBQUM7QUFFbkIsTUFBTUk7SUFDSkMsWUFBWUMsVUFBVSxFQUFFLENBQUU7UUFDeEIsSUFBSSxDQUFDQyxPQUFPLEdBQUc7UUFDZixJQUFJLENBQUNELE9BQU8sR0FBRyxJQUFJLENBQUNFLFNBQVMsQ0FBQ0Y7SUFDaEM7SUFFQUUsVUFBVUYsT0FBTyxFQUFFO1FBQ2pCLElBQUlHLGFBQWEsRUFBRTtRQUNuQixLQUFLLElBQUlDLEtBQUtKLFFBQVM7WUFDckIsSUFBSUksRUFBRUMsT0FBTyxLQUFLLE1BQU07Z0JBQ3RCRCxJQUFJQTtZQUNOLE9BQU8sSUFBSUEsRUFBRUMsT0FBTyxFQUFFO2dCQUNwQkQsSUFBSUEsRUFBRUMsT0FBTztZQUNmO1lBRUEsSUFBSSxPQUFPRCxNQUFNLFlBQVlFLE1BQU1DLE9BQU8sQ0FBQ0gsRUFBRUosT0FBTyxHQUFHO2dCQUNyREcsYUFBYUEsV0FBV0ssTUFBTSxDQUFDSixFQUFFSixPQUFPO1lBQzFDLE9BQU8sSUFBSSxPQUFPSSxNQUFNLFlBQVlBLEVBQUVLLGFBQWEsRUFBRTtnQkFDbkROLFdBQVdPLElBQUksQ0FBQ047WUFDbEIsT0FBTyxJQUFJLE9BQU9BLE1BQU0sWUFBWTtnQkFDbENELFdBQVdPLElBQUksQ0FBQ047WUFDbEIsT0FBTyxJQUFJLE9BQU9BLE1BQU0sWUFBYUEsQ0FBQUEsRUFBRU8sS0FBSyxJQUFJUCxFQUFFUSxTQUFTLEdBQUc7Z0JBQzVELElBQUlDLElBQXlCLEVBQWM7b0JBQ3pDLE1BQU0sSUFBSUMsTUFDUixxRUFDRSw4REFDQTtnQkFFTjtZQUNGLE9BQU87Z0JBQ0wsTUFBTSxJQUFJQSxNQUFNVixJQUFJO1lBQ3RCO1FBQ0Y7UUFDQSxPQUFPRDtJQUNUO0lBRUFVLFFBQVFFLEdBQUcsRUFBRUMsT0FBTyxDQUFDLENBQUMsRUFBRTtRQUN0QixJQUNFLENBQUMsSUFBSSxDQUFDaEIsT0FBTyxDQUFDaUIsTUFBTSxJQUNwQixDQUFDRCxLQUFLRSxNQUFNLElBQ1osQ0FBQ0YsS0FBS0csV0FBVyxJQUNqQixDQUFDSCxLQUFLSSxNQUFNLEVBQ1o7WUFDQSxPQUFPLElBQUkzQixhQUFhLElBQUksRUFBRXNCLEtBQUtDO1FBQ3JDLE9BQU87WUFDTCxPQUFPLElBQUlyQixXQUFXLElBQUksRUFBRW9CLEtBQUtDO1FBQ25DO0lBQ0Y7SUFFQUssSUFBSUMsTUFBTSxFQUFFO1FBQ1YsSUFBSSxDQUFDdEIsT0FBTyxHQUFHLElBQUksQ0FBQ0EsT0FBTyxDQUFDUSxNQUFNLENBQUMsSUFBSSxDQUFDTixTQUFTLENBQUM7WUFBQ29CO1NBQU87UUFDMUQsT0FBTyxJQUFJO0lBQ2I7QUFDRjtBQUVBQyxPQUFPQyxPQUFPLEdBQUcxQjtBQUNqQkEsVUFBVTJCLE9BQU8sR0FBRzNCO0FBRXBCRCxLQUFLNkIsaUJBQWlCLENBQUM1QjtBQUN2QkYsU0FBUzhCLGlCQUFpQixDQUFDNUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lY29tLy4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MvbGliL3Byb2Nlc3Nvci5qcz8yMzMzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5sZXQgTm9Xb3JrUmVzdWx0ID0gcmVxdWlyZSgnLi9uby13b3JrLXJlc3VsdCcpXG5sZXQgTGF6eVJlc3VsdCA9IHJlcXVpcmUoJy4vbGF6eS1yZXN1bHQnKVxubGV0IERvY3VtZW50ID0gcmVxdWlyZSgnLi9kb2N1bWVudCcpXG5sZXQgUm9vdCA9IHJlcXVpcmUoJy4vcm9vdCcpXG5cbmNsYXNzIFByb2Nlc3NvciB7XG4gIGNvbnN0cnVjdG9yKHBsdWdpbnMgPSBbXSkge1xuICAgIHRoaXMudmVyc2lvbiA9ICc4LjQuMzMnXG4gICAgdGhpcy5wbHVnaW5zID0gdGhpcy5ub3JtYWxpemUocGx1Z2lucylcbiAgfVxuXG4gIG5vcm1hbGl6ZShwbHVnaW5zKSB7XG4gICAgbGV0IG5vcm1hbGl6ZWQgPSBbXVxuICAgIGZvciAobGV0IGkgb2YgcGx1Z2lucykge1xuICAgICAgaWYgKGkucG9zdGNzcyA9PT0gdHJ1ZSkge1xuICAgICAgICBpID0gaSgpXG4gICAgICB9IGVsc2UgaWYgKGkucG9zdGNzcykge1xuICAgICAgICBpID0gaS5wb3N0Y3NzXG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgaSA9PT0gJ29iamVjdCcgJiYgQXJyYXkuaXNBcnJheShpLnBsdWdpbnMpKSB7XG4gICAgICAgIG5vcm1hbGl6ZWQgPSBub3JtYWxpemVkLmNvbmNhdChpLnBsdWdpbnMpXG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBpID09PSAnb2JqZWN0JyAmJiBpLnBvc3Rjc3NQbHVnaW4pIHtcbiAgICAgICAgbm9ybWFsaXplZC5wdXNoKGkpXG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBpID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIG5vcm1hbGl6ZWQucHVzaChpKVxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgaSA9PT0gJ29iamVjdCcgJiYgKGkucGFyc2UgfHwgaS5zdHJpbmdpZnkpKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgJ1Bvc3RDU1Mgc3ludGF4ZXMgY2Fubm90IGJlIHVzZWQgYXMgcGx1Z2lucy4gSW5zdGVhZCwgcGxlYXNlIHVzZSAnICtcbiAgICAgICAgICAgICAgJ29uZSBvZiB0aGUgc3ludGF4L3BhcnNlci9zdHJpbmdpZmllciBvcHRpb25zIGFzIG91dGxpbmVkICcgK1xuICAgICAgICAgICAgICAnaW4geW91ciBQb3N0Q1NTIHJ1bm5lciBkb2N1bWVudGF0aW9uLidcbiAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihpICsgJyBpcyBub3QgYSBQb3N0Q1NTIHBsdWdpbicpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBub3JtYWxpemVkXG4gIH1cblxuICBwcm9jZXNzKGNzcywgb3B0cyA9IHt9KSB7XG4gICAgaWYgKFxuICAgICAgIXRoaXMucGx1Z2lucy5sZW5ndGggJiZcbiAgICAgICFvcHRzLnBhcnNlciAmJlxuICAgICAgIW9wdHMuc3RyaW5naWZpZXIgJiZcbiAgICAgICFvcHRzLnN5bnRheFxuICAgICkge1xuICAgICAgcmV0dXJuIG5ldyBOb1dvcmtSZXN1bHQodGhpcywgY3NzLCBvcHRzKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV3IExhenlSZXN1bHQodGhpcywgY3NzLCBvcHRzKVxuICAgIH1cbiAgfVxuXG4gIHVzZShwbHVnaW4pIHtcbiAgICB0aGlzLnBsdWdpbnMgPSB0aGlzLnBsdWdpbnMuY29uY2F0KHRoaXMubm9ybWFsaXplKFtwbHVnaW5dKSlcbiAgICByZXR1cm4gdGhpc1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUHJvY2Vzc29yXG5Qcm9jZXNzb3IuZGVmYXVsdCA9IFByb2Nlc3NvclxuXG5Sb290LnJlZ2lzdGVyUHJvY2Vzc29yKFByb2Nlc3NvcilcbkRvY3VtZW50LnJlZ2lzdGVyUHJvY2Vzc29yKFByb2Nlc3NvcilcbiJdLCJuYW1lcyI6WyJOb1dvcmtSZXN1bHQiLCJyZXF1aXJlIiwiTGF6eVJlc3VsdCIsIkRvY3VtZW50IiwiUm9vdCIsIlByb2Nlc3NvciIsImNvbnN0cnVjdG9yIiwicGx1Z2lucyIsInZlcnNpb24iLCJub3JtYWxpemUiLCJub3JtYWxpemVkIiwiaSIsInBvc3Rjc3MiLCJBcnJheSIsImlzQXJyYXkiLCJjb25jYXQiLCJwb3N0Y3NzUGx1Z2luIiwicHVzaCIsInBhcnNlIiwic3RyaW5naWZ5IiwicHJvY2VzcyIsIkVycm9yIiwiY3NzIiwib3B0cyIsImxlbmd0aCIsInBhcnNlciIsInN0cmluZ2lmaWVyIiwic3ludGF4IiwidXNlIiwicGx1Z2luIiwibW9kdWxlIiwiZXhwb3J0cyIsImRlZmF1bHQiLCJyZWdpc3RlclByb2Nlc3NvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/processor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/result.js":
/*!********************************************!*\
  !*** ./node_modules/postcss/lib/result.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet Warning = __webpack_require__(/*! ./warning */ \"(ssr)/./node_modules/postcss/lib/warning.js\");\nclass Result {\n    constructor(processor, root, opts){\n        this.processor = processor;\n        this.messages = [];\n        this.root = root;\n        this.opts = opts;\n        this.css = undefined;\n        this.map = undefined;\n    }\n    toString() {\n        return this.css;\n    }\n    warn(text, opts = {}) {\n        if (!opts.plugin) {\n            if (this.lastPlugin && this.lastPlugin.postcssPlugin) {\n                opts.plugin = this.lastPlugin.postcssPlugin;\n            }\n        }\n        let warning = new Warning(text, opts);\n        this.messages.push(warning);\n        return warning;\n    }\n    warnings() {\n        return this.messages.filter((i)=>i.type === \"warning\");\n    }\n    get content() {\n        return this.css;\n    }\n}\nmodule.exports = Result;\nResult.default = Result;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvcmVzdWx0LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsVUFBVUMsbUJBQU9BLENBQUM7QUFFdEIsTUFBTUM7SUFDSkMsWUFBWUMsU0FBUyxFQUFFQyxJQUFJLEVBQUVDLElBQUksQ0FBRTtRQUNqQyxJQUFJLENBQUNGLFNBQVMsR0FBR0E7UUFDakIsSUFBSSxDQUFDRyxRQUFRLEdBQUcsRUFBRTtRQUNsQixJQUFJLENBQUNGLElBQUksR0FBR0E7UUFDWixJQUFJLENBQUNDLElBQUksR0FBR0E7UUFDWixJQUFJLENBQUNFLEdBQUcsR0FBR0M7UUFDWCxJQUFJLENBQUNDLEdBQUcsR0FBR0Q7SUFDYjtJQUVBRSxXQUFXO1FBQ1QsT0FBTyxJQUFJLENBQUNILEdBQUc7SUFDakI7SUFFQUksS0FBS0MsSUFBSSxFQUFFUCxPQUFPLENBQUMsQ0FBQyxFQUFFO1FBQ3BCLElBQUksQ0FBQ0EsS0FBS1EsTUFBTSxFQUFFO1lBQ2hCLElBQUksSUFBSSxDQUFDQyxVQUFVLElBQUksSUFBSSxDQUFDQSxVQUFVLENBQUNDLGFBQWEsRUFBRTtnQkFDcERWLEtBQUtRLE1BQU0sR0FBRyxJQUFJLENBQUNDLFVBQVUsQ0FBQ0MsYUFBYTtZQUM3QztRQUNGO1FBRUEsSUFBSUMsVUFBVSxJQUFJakIsUUFBUWEsTUFBTVA7UUFDaEMsSUFBSSxDQUFDQyxRQUFRLENBQUNXLElBQUksQ0FBQ0Q7UUFFbkIsT0FBT0E7SUFDVDtJQUVBRSxXQUFXO1FBQ1QsT0FBTyxJQUFJLENBQUNaLFFBQVEsQ0FBQ2EsTUFBTSxDQUFDQyxDQUFBQSxJQUFLQSxFQUFFQyxJQUFJLEtBQUs7SUFDOUM7SUFFQSxJQUFJQyxVQUFVO1FBQ1osT0FBTyxJQUFJLENBQUNmLEdBQUc7SUFDakI7QUFDRjtBQUVBZ0IsT0FBT0MsT0FBTyxHQUFHdkI7QUFDakJBLE9BQU93QixPQUFPLEdBQUd4QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Vjb20vLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvcmVzdWx0LmpzPzM2OGUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmxldCBXYXJuaW5nID0gcmVxdWlyZSgnLi93YXJuaW5nJylcblxuY2xhc3MgUmVzdWx0IHtcbiAgY29uc3RydWN0b3IocHJvY2Vzc29yLCByb290LCBvcHRzKSB7XG4gICAgdGhpcy5wcm9jZXNzb3IgPSBwcm9jZXNzb3JcbiAgICB0aGlzLm1lc3NhZ2VzID0gW11cbiAgICB0aGlzLnJvb3QgPSByb290XG4gICAgdGhpcy5vcHRzID0gb3B0c1xuICAgIHRoaXMuY3NzID0gdW5kZWZpbmVkXG4gICAgdGhpcy5tYXAgPSB1bmRlZmluZWRcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLmNzc1xuICB9XG5cbiAgd2Fybih0ZXh0LCBvcHRzID0ge30pIHtcbiAgICBpZiAoIW9wdHMucGx1Z2luKSB7XG4gICAgICBpZiAodGhpcy5sYXN0UGx1Z2luICYmIHRoaXMubGFzdFBsdWdpbi5wb3N0Y3NzUGx1Z2luKSB7XG4gICAgICAgIG9wdHMucGx1Z2luID0gdGhpcy5sYXN0UGx1Z2luLnBvc3Rjc3NQbHVnaW5cbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgd2FybmluZyA9IG5ldyBXYXJuaW5nKHRleHQsIG9wdHMpXG4gICAgdGhpcy5tZXNzYWdlcy5wdXNoKHdhcm5pbmcpXG5cbiAgICByZXR1cm4gd2FybmluZ1xuICB9XG5cbiAgd2FybmluZ3MoKSB7XG4gICAgcmV0dXJuIHRoaXMubWVzc2FnZXMuZmlsdGVyKGkgPT4gaS50eXBlID09PSAnd2FybmluZycpXG4gIH1cblxuICBnZXQgY29udGVudCgpIHtcbiAgICByZXR1cm4gdGhpcy5jc3NcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlc3VsdFxuUmVzdWx0LmRlZmF1bHQgPSBSZXN1bHRcbiJdLCJuYW1lcyI6WyJXYXJuaW5nIiwicmVxdWlyZSIsIlJlc3VsdCIsImNvbnN0cnVjdG9yIiwicHJvY2Vzc29yIiwicm9vdCIsIm9wdHMiLCJtZXNzYWdlcyIsImNzcyIsInVuZGVmaW5lZCIsIm1hcCIsInRvU3RyaW5nIiwid2FybiIsInRleHQiLCJwbHVnaW4iLCJsYXN0UGx1Z2luIiwicG9zdGNzc1BsdWdpbiIsIndhcm5pbmciLCJwdXNoIiwid2FybmluZ3MiLCJmaWx0ZXIiLCJpIiwidHlwZSIsImNvbnRlbnQiLCJtb2R1bGUiLCJleHBvcnRzIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/result.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/root.js":
/*!******************************************!*\
  !*** ./node_modules/postcss/lib/root.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet Container = __webpack_require__(/*! ./container */ \"(ssr)/./node_modules/postcss/lib/container.js\");\nlet LazyResult, Processor;\nclass Root extends Container {\n    constructor(defaults){\n        super(defaults);\n        this.type = \"root\";\n        if (!this.nodes) this.nodes = [];\n    }\n    normalize(child, sample, type) {\n        let nodes = super.normalize(child);\n        if (sample) {\n            if (type === \"prepend\") {\n                if (this.nodes.length > 1) {\n                    sample.raws.before = this.nodes[1].raws.before;\n                } else {\n                    delete sample.raws.before;\n                }\n            } else if (this.first !== sample) {\n                for (let node of nodes){\n                    node.raws.before = sample.raws.before;\n                }\n            }\n        }\n        return nodes;\n    }\n    removeChild(child, ignore) {\n        let index = this.index(child);\n        if (!ignore && index === 0 && this.nodes.length > 1) {\n            this.nodes[1].raws.before = this.nodes[index].raws.before;\n        }\n        return super.removeChild(child);\n    }\n    toResult(opts = {}) {\n        let lazy = new LazyResult(new Processor(), this, opts);\n        return lazy.stringify();\n    }\n}\nRoot.registerLazyResult = (dependant)=>{\n    LazyResult = dependant;\n};\nRoot.registerProcessor = (dependant)=>{\n    Processor = dependant;\n};\nmodule.exports = Root;\nRoot.default = Root;\nContainer.registerRoot(Root);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvcm9vdC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLFlBQVlDLG1CQUFPQSxDQUFDO0FBRXhCLElBQUlDLFlBQVlDO0FBRWhCLE1BQU1DLGFBQWFKO0lBQ2pCSyxZQUFZQyxRQUFRLENBQUU7UUFDcEIsS0FBSyxDQUFDQTtRQUNOLElBQUksQ0FBQ0MsSUFBSSxHQUFHO1FBQ1osSUFBSSxDQUFDLElBQUksQ0FBQ0MsS0FBSyxFQUFFLElBQUksQ0FBQ0EsS0FBSyxHQUFHLEVBQUU7SUFDbEM7SUFFQUMsVUFBVUMsS0FBSyxFQUFFQyxNQUFNLEVBQUVKLElBQUksRUFBRTtRQUM3QixJQUFJQyxRQUFRLEtBQUssQ0FBQ0MsVUFBVUM7UUFFNUIsSUFBSUMsUUFBUTtZQUNWLElBQUlKLFNBQVMsV0FBVztnQkFDdEIsSUFBSSxJQUFJLENBQUNDLEtBQUssQ0FBQ0ksTUFBTSxHQUFHLEdBQUc7b0JBQ3pCRCxPQUFPRSxJQUFJLENBQUNDLE1BQU0sR0FBRyxJQUFJLENBQUNOLEtBQUssQ0FBQyxFQUFFLENBQUNLLElBQUksQ0FBQ0MsTUFBTTtnQkFDaEQsT0FBTztvQkFDTCxPQUFPSCxPQUFPRSxJQUFJLENBQUNDLE1BQU07Z0JBQzNCO1lBQ0YsT0FBTyxJQUFJLElBQUksQ0FBQ0MsS0FBSyxLQUFLSixRQUFRO2dCQUNoQyxLQUFLLElBQUlLLFFBQVFSLE1BQU87b0JBQ3RCUSxLQUFLSCxJQUFJLENBQUNDLE1BQU0sR0FBR0gsT0FBT0UsSUFBSSxDQUFDQyxNQUFNO2dCQUN2QztZQUNGO1FBQ0Y7UUFFQSxPQUFPTjtJQUNUO0lBRUFTLFlBQVlQLEtBQUssRUFBRVEsTUFBTSxFQUFFO1FBQ3pCLElBQUlDLFFBQVEsSUFBSSxDQUFDQSxLQUFLLENBQUNUO1FBRXZCLElBQUksQ0FBQ1EsVUFBVUMsVUFBVSxLQUFLLElBQUksQ0FBQ1gsS0FBSyxDQUFDSSxNQUFNLEdBQUcsR0FBRztZQUNuRCxJQUFJLENBQUNKLEtBQUssQ0FBQyxFQUFFLENBQUNLLElBQUksQ0FBQ0MsTUFBTSxHQUFHLElBQUksQ0FBQ04sS0FBSyxDQUFDVyxNQUFNLENBQUNOLElBQUksQ0FBQ0MsTUFBTTtRQUMzRDtRQUVBLE9BQU8sS0FBSyxDQUFDRyxZQUFZUDtJQUMzQjtJQUVBVSxTQUFTQyxPQUFPLENBQUMsQ0FBQyxFQUFFO1FBQ2xCLElBQUlDLE9BQU8sSUFBSXBCLFdBQVcsSUFBSUMsYUFBYSxJQUFJLEVBQUVrQjtRQUNqRCxPQUFPQyxLQUFLQyxTQUFTO0lBQ3ZCO0FBQ0Y7QUFFQW5CLEtBQUtvQixrQkFBa0IsR0FBR0MsQ0FBQUE7SUFDeEJ2QixhQUFhdUI7QUFDZjtBQUVBckIsS0FBS3NCLGlCQUFpQixHQUFHRCxDQUFBQTtJQUN2QnRCLFlBQVlzQjtBQUNkO0FBRUFFLE9BQU9DLE9BQU8sR0FBR3hCO0FBQ2pCQSxLQUFLeUIsT0FBTyxHQUFHekI7QUFFZkosVUFBVThCLFlBQVksQ0FBQzFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWNvbS8uL25vZGVfbW9kdWxlcy9wb3N0Y3NzL2xpYi9yb290LmpzPzU5ZDMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmxldCBDb250YWluZXIgPSByZXF1aXJlKCcuL2NvbnRhaW5lcicpXG5cbmxldCBMYXp5UmVzdWx0LCBQcm9jZXNzb3JcblxuY2xhc3MgUm9vdCBleHRlbmRzIENvbnRhaW5lciB7XG4gIGNvbnN0cnVjdG9yKGRlZmF1bHRzKSB7XG4gICAgc3VwZXIoZGVmYXVsdHMpXG4gICAgdGhpcy50eXBlID0gJ3Jvb3QnXG4gICAgaWYgKCF0aGlzLm5vZGVzKSB0aGlzLm5vZGVzID0gW11cbiAgfVxuXG4gIG5vcm1hbGl6ZShjaGlsZCwgc2FtcGxlLCB0eXBlKSB7XG4gICAgbGV0IG5vZGVzID0gc3VwZXIubm9ybWFsaXplKGNoaWxkKVxuXG4gICAgaWYgKHNhbXBsZSkge1xuICAgICAgaWYgKHR5cGUgPT09ICdwcmVwZW5kJykge1xuICAgICAgICBpZiAodGhpcy5ub2Rlcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgc2FtcGxlLnJhd3MuYmVmb3JlID0gdGhpcy5ub2Rlc1sxXS5yYXdzLmJlZm9yZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlbGV0ZSBzYW1wbGUucmF3cy5iZWZvcmVcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0aGlzLmZpcnN0ICE9PSBzYW1wbGUpIHtcbiAgICAgICAgZm9yIChsZXQgbm9kZSBvZiBub2Rlcykge1xuICAgICAgICAgIG5vZGUucmF3cy5iZWZvcmUgPSBzYW1wbGUucmF3cy5iZWZvcmVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBub2Rlc1xuICB9XG5cbiAgcmVtb3ZlQ2hpbGQoY2hpbGQsIGlnbm9yZSkge1xuICAgIGxldCBpbmRleCA9IHRoaXMuaW5kZXgoY2hpbGQpXG5cbiAgICBpZiAoIWlnbm9yZSAmJiBpbmRleCA9PT0gMCAmJiB0aGlzLm5vZGVzLmxlbmd0aCA+IDEpIHtcbiAgICAgIHRoaXMubm9kZXNbMV0ucmF3cy5iZWZvcmUgPSB0aGlzLm5vZGVzW2luZGV4XS5yYXdzLmJlZm9yZVxuICAgIH1cblxuICAgIHJldHVybiBzdXBlci5yZW1vdmVDaGlsZChjaGlsZClcbiAgfVxuXG4gIHRvUmVzdWx0KG9wdHMgPSB7fSkge1xuICAgIGxldCBsYXp5ID0gbmV3IExhenlSZXN1bHQobmV3IFByb2Nlc3NvcigpLCB0aGlzLCBvcHRzKVxuICAgIHJldHVybiBsYXp5LnN0cmluZ2lmeSgpXG4gIH1cbn1cblxuUm9vdC5yZWdpc3RlckxhenlSZXN1bHQgPSBkZXBlbmRhbnQgPT4ge1xuICBMYXp5UmVzdWx0ID0gZGVwZW5kYW50XG59XG5cblJvb3QucmVnaXN0ZXJQcm9jZXNzb3IgPSBkZXBlbmRhbnQgPT4ge1xuICBQcm9jZXNzb3IgPSBkZXBlbmRhbnRcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSb290XG5Sb290LmRlZmF1bHQgPSBSb290XG5cbkNvbnRhaW5lci5yZWdpc3RlclJvb3QoUm9vdClcbiJdLCJuYW1lcyI6WyJDb250YWluZXIiLCJyZXF1aXJlIiwiTGF6eVJlc3VsdCIsIlByb2Nlc3NvciIsIlJvb3QiLCJjb25zdHJ1Y3RvciIsImRlZmF1bHRzIiwidHlwZSIsIm5vZGVzIiwibm9ybWFsaXplIiwiY2hpbGQiLCJzYW1wbGUiLCJsZW5ndGgiLCJyYXdzIiwiYmVmb3JlIiwiZmlyc3QiLCJub2RlIiwicmVtb3ZlQ2hpbGQiLCJpZ25vcmUiLCJpbmRleCIsInRvUmVzdWx0Iiwib3B0cyIsImxhenkiLCJzdHJpbmdpZnkiLCJyZWdpc3RlckxhenlSZXN1bHQiLCJkZXBlbmRhbnQiLCJyZWdpc3RlclByb2Nlc3NvciIsIm1vZHVsZSIsImV4cG9ydHMiLCJkZWZhdWx0IiwicmVnaXN0ZXJSb290Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/root.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/rule.js":
/*!******************************************!*\
  !*** ./node_modules/postcss/lib/rule.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet Container = __webpack_require__(/*! ./container */ \"(ssr)/./node_modules/postcss/lib/container.js\");\nlet list = __webpack_require__(/*! ./list */ \"(ssr)/./node_modules/postcss/lib/list.js\");\nclass Rule extends Container {\n    constructor(defaults){\n        super(defaults);\n        this.type = \"rule\";\n        if (!this.nodes) this.nodes = [];\n    }\n    get selectors() {\n        return list.comma(this.selector);\n    }\n    set selectors(values) {\n        let match = this.selector ? this.selector.match(/,\\s*/) : null;\n        let sep = match ? match[0] : \",\" + this.raw(\"between\", \"beforeOpen\");\n        this.selector = values.join(sep);\n    }\n}\nmodule.exports = Rule;\nRule.default = Rule;\nContainer.registerRule(Rule);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvcnVsZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLFlBQVlDLG1CQUFPQSxDQUFDO0FBQ3hCLElBQUlDLE9BQU9ELG1CQUFPQSxDQUFDO0FBRW5CLE1BQU1FLGFBQWFIO0lBQ2pCSSxZQUFZQyxRQUFRLENBQUU7UUFDcEIsS0FBSyxDQUFDQTtRQUNOLElBQUksQ0FBQ0MsSUFBSSxHQUFHO1FBQ1osSUFBSSxDQUFDLElBQUksQ0FBQ0MsS0FBSyxFQUFFLElBQUksQ0FBQ0EsS0FBSyxHQUFHLEVBQUU7SUFDbEM7SUFFQSxJQUFJQyxZQUFZO1FBQ2QsT0FBT04sS0FBS08sS0FBSyxDQUFDLElBQUksQ0FBQ0MsUUFBUTtJQUNqQztJQUVBLElBQUlGLFVBQVVHLE1BQU0sRUFBRTtRQUNwQixJQUFJQyxRQUFRLElBQUksQ0FBQ0YsUUFBUSxHQUFHLElBQUksQ0FBQ0EsUUFBUSxDQUFDRSxLQUFLLENBQUMsVUFBVTtRQUMxRCxJQUFJQyxNQUFNRCxRQUFRQSxLQUFLLENBQUMsRUFBRSxHQUFHLE1BQU0sSUFBSSxDQUFDRSxHQUFHLENBQUMsV0FBVztRQUN2RCxJQUFJLENBQUNKLFFBQVEsR0FBR0MsT0FBT0ksSUFBSSxDQUFDRjtJQUM5QjtBQUNGO0FBRUFHLE9BQU9DLE9BQU8sR0FBR2Q7QUFDakJBLEtBQUtlLE9BQU8sR0FBR2Y7QUFFZkgsVUFBVW1CLFlBQVksQ0FBQ2hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWNvbS8uL25vZGVfbW9kdWxlcy9wb3N0Y3NzL2xpYi9ydWxlLmpzPzUzYmEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmxldCBDb250YWluZXIgPSByZXF1aXJlKCcuL2NvbnRhaW5lcicpXG5sZXQgbGlzdCA9IHJlcXVpcmUoJy4vbGlzdCcpXG5cbmNsYXNzIFJ1bGUgZXh0ZW5kcyBDb250YWluZXIge1xuICBjb25zdHJ1Y3RvcihkZWZhdWx0cykge1xuICAgIHN1cGVyKGRlZmF1bHRzKVxuICAgIHRoaXMudHlwZSA9ICdydWxlJ1xuICAgIGlmICghdGhpcy5ub2RlcykgdGhpcy5ub2RlcyA9IFtdXG4gIH1cblxuICBnZXQgc2VsZWN0b3JzKCkge1xuICAgIHJldHVybiBsaXN0LmNvbW1hKHRoaXMuc2VsZWN0b3IpXG4gIH1cblxuICBzZXQgc2VsZWN0b3JzKHZhbHVlcykge1xuICAgIGxldCBtYXRjaCA9IHRoaXMuc2VsZWN0b3IgPyB0aGlzLnNlbGVjdG9yLm1hdGNoKC8sXFxzKi8pIDogbnVsbFxuICAgIGxldCBzZXAgPSBtYXRjaCA/IG1hdGNoWzBdIDogJywnICsgdGhpcy5yYXcoJ2JldHdlZW4nLCAnYmVmb3JlT3BlbicpXG4gICAgdGhpcy5zZWxlY3RvciA9IHZhbHVlcy5qb2luKHNlcClcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJ1bGVcblJ1bGUuZGVmYXVsdCA9IFJ1bGVcblxuQ29udGFpbmVyLnJlZ2lzdGVyUnVsZShSdWxlKVxuIl0sIm5hbWVzIjpbIkNvbnRhaW5lciIsInJlcXVpcmUiLCJsaXN0IiwiUnVsZSIsImNvbnN0cnVjdG9yIiwiZGVmYXVsdHMiLCJ0eXBlIiwibm9kZXMiLCJzZWxlY3RvcnMiLCJjb21tYSIsInNlbGVjdG9yIiwidmFsdWVzIiwibWF0Y2giLCJzZXAiLCJyYXciLCJqb2luIiwibW9kdWxlIiwiZXhwb3J0cyIsImRlZmF1bHQiLCJyZWdpc3RlclJ1bGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/rule.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/stringifier.js":
/*!*************************************************!*\
  !*** ./node_modules/postcss/lib/stringifier.js ***!
  \*************************************************/
/***/ ((module) => {

eval("\nconst DEFAULT_RAW = {\n    after: \"\\n\",\n    beforeClose: \"\\n\",\n    beforeComment: \"\\n\",\n    beforeDecl: \"\\n\",\n    beforeOpen: \" \",\n    beforeRule: \"\\n\",\n    colon: \": \",\n    commentLeft: \" \",\n    commentRight: \" \",\n    emptyBody: \"\",\n    indent: \"    \",\n    semicolon: false\n};\nfunction capitalize(str) {\n    return str[0].toUpperCase() + str.slice(1);\n}\nclass Stringifier {\n    constructor(builder){\n        this.builder = builder;\n    }\n    atrule(node, semicolon) {\n        let name = \"@\" + node.name;\n        let params = node.params ? this.rawValue(node, \"params\") : \"\";\n        if (typeof node.raws.afterName !== \"undefined\") {\n            name += node.raws.afterName;\n        } else if (params) {\n            name += \" \";\n        }\n        if (node.nodes) {\n            this.block(node, name + params);\n        } else {\n            let end = (node.raws.between || \"\") + (semicolon ? \";\" : \"\");\n            this.builder(name + params + end, node);\n        }\n    }\n    beforeAfter(node, detect) {\n        let value;\n        if (node.type === \"decl\") {\n            value = this.raw(node, null, \"beforeDecl\");\n        } else if (node.type === \"comment\") {\n            value = this.raw(node, null, \"beforeComment\");\n        } else if (detect === \"before\") {\n            value = this.raw(node, null, \"beforeRule\");\n        } else {\n            value = this.raw(node, null, \"beforeClose\");\n        }\n        let buf = node.parent;\n        let depth = 0;\n        while(buf && buf.type !== \"root\"){\n            depth += 1;\n            buf = buf.parent;\n        }\n        if (value.includes(\"\\n\")) {\n            let indent = this.raw(node, null, \"indent\");\n            if (indent.length) {\n                for(let step = 0; step < depth; step++)value += indent;\n            }\n        }\n        return value;\n    }\n    block(node, start) {\n        let between = this.raw(node, \"between\", \"beforeOpen\");\n        this.builder(start + between + \"{\", node, \"start\");\n        let after;\n        if (node.nodes && node.nodes.length) {\n            this.body(node);\n            after = this.raw(node, \"after\");\n        } else {\n            after = this.raw(node, \"after\", \"emptyBody\");\n        }\n        if (after) this.builder(after);\n        this.builder(\"}\", node, \"end\");\n    }\n    body(node) {\n        let last = node.nodes.length - 1;\n        while(last > 0){\n            if (node.nodes[last].type !== \"comment\") break;\n            last -= 1;\n        }\n        let semicolon = this.raw(node, \"semicolon\");\n        for(let i = 0; i < node.nodes.length; i++){\n            let child = node.nodes[i];\n            let before = this.raw(child, \"before\");\n            if (before) this.builder(before);\n            this.stringify(child, last !== i || semicolon);\n        }\n    }\n    comment(node) {\n        let left = this.raw(node, \"left\", \"commentLeft\");\n        let right = this.raw(node, \"right\", \"commentRight\");\n        this.builder(\"/*\" + left + node.text + right + \"*/\", node);\n    }\n    decl(node, semicolon) {\n        let between = this.raw(node, \"between\", \"colon\");\n        let string = node.prop + between + this.rawValue(node, \"value\");\n        if (node.important) {\n            string += node.raws.important || \" !important\";\n        }\n        if (semicolon) string += \";\";\n        this.builder(string, node);\n    }\n    document(node) {\n        this.body(node);\n    }\n    raw(node, own, detect) {\n        let value;\n        if (!detect) detect = own;\n        // Already had\n        if (own) {\n            value = node.raws[own];\n            if (typeof value !== \"undefined\") return value;\n        }\n        let parent = node.parent;\n        if (detect === \"before\") {\n            // Hack for first rule in CSS\n            if (!parent || parent.type === \"root\" && parent.first === node) {\n                return \"\";\n            }\n            // `root` nodes in `document` should use only their own raws\n            if (parent && parent.type === \"document\") {\n                return \"\";\n            }\n        }\n        // Floating child without parent\n        if (!parent) return DEFAULT_RAW[detect];\n        // Detect style by other nodes\n        let root = node.root();\n        if (!root.rawCache) root.rawCache = {};\n        if (typeof root.rawCache[detect] !== \"undefined\") {\n            return root.rawCache[detect];\n        }\n        if (detect === \"before\" || detect === \"after\") {\n            return this.beforeAfter(node, detect);\n        } else {\n            let method = \"raw\" + capitalize(detect);\n            if (this[method]) {\n                value = this[method](root, node);\n            } else {\n                root.walk((i)=>{\n                    value = i.raws[own];\n                    if (typeof value !== \"undefined\") return false;\n                });\n            }\n        }\n        if (typeof value === \"undefined\") value = DEFAULT_RAW[detect];\n        root.rawCache[detect] = value;\n        return value;\n    }\n    rawBeforeClose(root) {\n        let value;\n        root.walk((i)=>{\n            if (i.nodes && i.nodes.length > 0) {\n                if (typeof i.raws.after !== \"undefined\") {\n                    value = i.raws.after;\n                    if (value.includes(\"\\n\")) {\n                        value = value.replace(/[^\\n]+$/, \"\");\n                    }\n                    return false;\n                }\n            }\n        });\n        if (value) value = value.replace(/\\S/g, \"\");\n        return value;\n    }\n    rawBeforeComment(root, node) {\n        let value;\n        root.walkComments((i)=>{\n            if (typeof i.raws.before !== \"undefined\") {\n                value = i.raws.before;\n                if (value.includes(\"\\n\")) {\n                    value = value.replace(/[^\\n]+$/, \"\");\n                }\n                return false;\n            }\n        });\n        if (typeof value === \"undefined\") {\n            value = this.raw(node, null, \"beforeDecl\");\n        } else if (value) {\n            value = value.replace(/\\S/g, \"\");\n        }\n        return value;\n    }\n    rawBeforeDecl(root, node) {\n        let value;\n        root.walkDecls((i)=>{\n            if (typeof i.raws.before !== \"undefined\") {\n                value = i.raws.before;\n                if (value.includes(\"\\n\")) {\n                    value = value.replace(/[^\\n]+$/, \"\");\n                }\n                return false;\n            }\n        });\n        if (typeof value === \"undefined\") {\n            value = this.raw(node, null, \"beforeRule\");\n        } else if (value) {\n            value = value.replace(/\\S/g, \"\");\n        }\n        return value;\n    }\n    rawBeforeOpen(root) {\n        let value;\n        root.walk((i)=>{\n            if (i.type !== \"decl\") {\n                value = i.raws.between;\n                if (typeof value !== \"undefined\") return false;\n            }\n        });\n        return value;\n    }\n    rawBeforeRule(root) {\n        let value;\n        root.walk((i)=>{\n            if (i.nodes && (i.parent !== root || root.first !== i)) {\n                if (typeof i.raws.before !== \"undefined\") {\n                    value = i.raws.before;\n                    if (value.includes(\"\\n\")) {\n                        value = value.replace(/[^\\n]+$/, \"\");\n                    }\n                    return false;\n                }\n            }\n        });\n        if (value) value = value.replace(/\\S/g, \"\");\n        return value;\n    }\n    rawColon(root) {\n        let value;\n        root.walkDecls((i)=>{\n            if (typeof i.raws.between !== \"undefined\") {\n                value = i.raws.between.replace(/[^\\s:]/g, \"\");\n                return false;\n            }\n        });\n        return value;\n    }\n    rawEmptyBody(root) {\n        let value;\n        root.walk((i)=>{\n            if (i.nodes && i.nodes.length === 0) {\n                value = i.raws.after;\n                if (typeof value !== \"undefined\") return false;\n            }\n        });\n        return value;\n    }\n    rawIndent(root) {\n        if (root.raws.indent) return root.raws.indent;\n        let value;\n        root.walk((i)=>{\n            let p = i.parent;\n            if (p && p !== root && p.parent && p.parent === root) {\n                if (typeof i.raws.before !== \"undefined\") {\n                    let parts = i.raws.before.split(\"\\n\");\n                    value = parts[parts.length - 1];\n                    value = value.replace(/\\S/g, \"\");\n                    return false;\n                }\n            }\n        });\n        return value;\n    }\n    rawSemicolon(root) {\n        let value;\n        root.walk((i)=>{\n            if (i.nodes && i.nodes.length && i.last.type === \"decl\") {\n                value = i.raws.semicolon;\n                if (typeof value !== \"undefined\") return false;\n            }\n        });\n        return value;\n    }\n    rawValue(node, prop) {\n        let value = node[prop];\n        let raw = node.raws[prop];\n        if (raw && raw.value === value) {\n            return raw.raw;\n        }\n        return value;\n    }\n    root(node) {\n        this.body(node);\n        if (node.raws.after) this.builder(node.raws.after);\n    }\n    rule(node) {\n        this.block(node, this.rawValue(node, \"selector\"));\n        if (node.raws.ownSemicolon) {\n            this.builder(node.raws.ownSemicolon, node, \"end\");\n        }\n    }\n    stringify(node, semicolon) {\n        /* c8 ignore start */ if (!this[node.type]) {\n            throw new Error(\"Unknown AST node type \" + node.type + \". \" + \"Maybe you need to change PostCSS stringifier.\");\n        }\n        /* c8 ignore stop */ this[node.type](node, semicolon);\n    }\n}\nmodule.exports = Stringifier;\nStringifier.default = Stringifier;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/stringifier.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/stringify.js":
/*!***********************************************!*\
  !*** ./node_modules/postcss/lib/stringify.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet Stringifier = __webpack_require__(/*! ./stringifier */ \"(ssr)/./node_modules/postcss/lib/stringifier.js\");\nfunction stringify(node, builder) {\n    let str = new Stringifier(builder);\n    str.stringify(node);\n}\nmodule.exports = stringify;\nstringify.default = stringify;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvc3RyaW5naWZ5LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsY0FBY0MsbUJBQU9BLENBQUM7QUFFMUIsU0FBU0MsVUFBVUMsSUFBSSxFQUFFQyxPQUFPO0lBQzlCLElBQUlDLE1BQU0sSUFBSUwsWUFBWUk7SUFDMUJDLElBQUlILFNBQVMsQ0FBQ0M7QUFDaEI7QUFFQUcsT0FBT0MsT0FBTyxHQUFHTDtBQUNqQkEsVUFBVU0sT0FBTyxHQUFHTiIsInNvdXJjZXMiOlsid2VicGFjazovL2Vjb20vLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvc3RyaW5naWZ5LmpzP2Q3YzMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmxldCBTdHJpbmdpZmllciA9IHJlcXVpcmUoJy4vc3RyaW5naWZpZXInKVxuXG5mdW5jdGlvbiBzdHJpbmdpZnkobm9kZSwgYnVpbGRlcikge1xuICBsZXQgc3RyID0gbmV3IFN0cmluZ2lmaWVyKGJ1aWxkZXIpXG4gIHN0ci5zdHJpbmdpZnkobm9kZSlcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHJpbmdpZnlcbnN0cmluZ2lmeS5kZWZhdWx0ID0gc3RyaW5naWZ5XG4iXSwibmFtZXMiOlsiU3RyaW5naWZpZXIiLCJyZXF1aXJlIiwic3RyaW5naWZ5Iiwibm9kZSIsImJ1aWxkZXIiLCJzdHIiLCJtb2R1bGUiLCJleHBvcnRzIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/stringify.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/symbols.js":
/*!*********************************************!*\
  !*** ./node_modules/postcss/lib/symbols.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\nmodule.exports.isClean = Symbol(\"isClean\");\nmodule.exports.my = Symbol(\"my\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvc3ltYm9scy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBQSxzQkFBc0IsR0FBR0csT0FBTztBQUVoQ0gsaUJBQWlCLEdBQUdHLE9BQU8iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lY29tLy4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MvbGliL3N5bWJvbHMuanM/YjBjYiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMuaXNDbGVhbiA9IFN5bWJvbCgnaXNDbGVhbicpXG5cbm1vZHVsZS5leHBvcnRzLm15ID0gU3ltYm9sKCdteScpXG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImlzQ2xlYW4iLCJTeW1ib2wiLCJteSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/symbols.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/terminal-highlight.js":
/*!********************************************************!*\
  !*** ./node_modules/postcss/lib/terminal-highlight.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet pico = __webpack_require__(/*! picocolors */ \"(ssr)/./node_modules/picocolors/picocolors.js\");\nlet tokenizer = __webpack_require__(/*! ./tokenize */ \"(ssr)/./node_modules/postcss/lib/tokenize.js\");\nlet Input;\nfunction registerInput(dependant) {\n    Input = dependant;\n}\nconst HIGHLIGHT_THEME = {\n    \";\": pico.yellow,\n    \":\": pico.yellow,\n    \"(\": pico.cyan,\n    \")\": pico.cyan,\n    \"[\": pico.yellow,\n    \"]\": pico.yellow,\n    \"{\": pico.yellow,\n    \"}\": pico.yellow,\n    \"at-word\": pico.cyan,\n    \"brackets\": pico.cyan,\n    \"call\": pico.cyan,\n    \"class\": pico.yellow,\n    \"comment\": pico.gray,\n    \"hash\": pico.magenta,\n    \"string\": pico.green\n};\nfunction getTokenType([type, value], processor) {\n    if (type === \"word\") {\n        if (value[0] === \".\") {\n            return \"class\";\n        }\n        if (value[0] === \"#\") {\n            return \"hash\";\n        }\n    }\n    if (!processor.endOfFile()) {\n        let next = processor.nextToken();\n        processor.back(next);\n        if (next[0] === \"brackets\" || next[0] === \"(\") return \"call\";\n    }\n    return type;\n}\nfunction terminalHighlight(css) {\n    let processor = tokenizer(new Input(css), {\n        ignoreErrors: true\n    });\n    let result = \"\";\n    while(!processor.endOfFile()){\n        let token = processor.nextToken();\n        let color = HIGHLIGHT_THEME[getTokenType(token, processor)];\n        if (color) {\n            result += token[1].split(/\\r?\\n/).map((i)=>color(i)).join(\"\\n\");\n        } else {\n            result += token[1];\n        }\n    }\n    return result;\n}\nterminalHighlight.registerInput = registerInput;\nmodule.exports = terminalHighlight;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvdGVybWluYWwtaGlnaGxpZ2h0LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsT0FBT0MsbUJBQU9BLENBQUM7QUFFbkIsSUFBSUMsWUFBWUQsbUJBQU9BLENBQUM7QUFFeEIsSUFBSUU7QUFFSixTQUFTQyxjQUFjQyxTQUFTO0lBQzlCRixRQUFRRTtBQUNWO0FBRUEsTUFBTUMsa0JBQWtCO0lBQ3RCLEtBQUtOLEtBQUtPLE1BQU07SUFDaEIsS0FBS1AsS0FBS08sTUFBTTtJQUNoQixLQUFLUCxLQUFLUSxJQUFJO0lBQ2QsS0FBS1IsS0FBS1EsSUFBSTtJQUNkLEtBQUtSLEtBQUtPLE1BQU07SUFDaEIsS0FBS1AsS0FBS08sTUFBTTtJQUNoQixLQUFLUCxLQUFLTyxNQUFNO0lBQ2hCLEtBQUtQLEtBQUtPLE1BQU07SUFDaEIsV0FBV1AsS0FBS1EsSUFBSTtJQUNwQixZQUFZUixLQUFLUSxJQUFJO0lBQ3JCLFFBQVFSLEtBQUtRLElBQUk7SUFDakIsU0FBU1IsS0FBS08sTUFBTTtJQUNwQixXQUFXUCxLQUFLUyxJQUFJO0lBQ3BCLFFBQVFULEtBQUtVLE9BQU87SUFDcEIsVUFBVVYsS0FBS1csS0FBSztBQUN0QjtBQUVBLFNBQVNDLGFBQWEsQ0FBQ0MsTUFBTUMsTUFBTSxFQUFFQyxTQUFTO0lBQzVDLElBQUlGLFNBQVMsUUFBUTtRQUNuQixJQUFJQyxLQUFLLENBQUMsRUFBRSxLQUFLLEtBQUs7WUFDcEIsT0FBTztRQUNUO1FBQ0EsSUFBSUEsS0FBSyxDQUFDLEVBQUUsS0FBSyxLQUFLO1lBQ3BCLE9BQU87UUFDVDtJQUNGO0lBRUEsSUFBSSxDQUFDQyxVQUFVQyxTQUFTLElBQUk7UUFDMUIsSUFBSUMsT0FBT0YsVUFBVUcsU0FBUztRQUM5QkgsVUFBVUksSUFBSSxDQUFDRjtRQUNmLElBQUlBLElBQUksQ0FBQyxFQUFFLEtBQUssY0FBY0EsSUFBSSxDQUFDLEVBQUUsS0FBSyxLQUFLLE9BQU87SUFDeEQ7SUFFQSxPQUFPSjtBQUNUO0FBRUEsU0FBU08sa0JBQWtCQyxHQUFHO0lBQzVCLElBQUlOLFlBQVliLFVBQVUsSUFBSUMsTUFBTWtCLE1BQU07UUFBRUMsY0FBYztJQUFLO0lBQy9ELElBQUlDLFNBQVM7SUFDYixNQUFPLENBQUNSLFVBQVVDLFNBQVMsR0FBSTtRQUM3QixJQUFJUSxRQUFRVCxVQUFVRyxTQUFTO1FBQy9CLElBQUlPLFFBQVFuQixlQUFlLENBQUNNLGFBQWFZLE9BQU9ULFdBQVc7UUFDM0QsSUFBSVUsT0FBTztZQUNURixVQUFVQyxLQUFLLENBQUMsRUFBRSxDQUNmRSxLQUFLLENBQUMsU0FDTkMsR0FBRyxDQUFDQyxDQUFBQSxJQUFLSCxNQUFNRyxJQUNmQyxJQUFJLENBQUM7UUFDVixPQUFPO1lBQ0xOLFVBQVVDLEtBQUssQ0FBQyxFQUFFO1FBQ3BCO0lBQ0Y7SUFDQSxPQUFPRDtBQUNUO0FBRUFILGtCQUFrQmhCLGFBQWEsR0FBR0E7QUFFbEMwQixPQUFPQyxPQUFPLEdBQUdYIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWNvbS8uL25vZGVfbW9kdWxlcy9wb3N0Y3NzL2xpYi90ZXJtaW5hbC1oaWdobGlnaHQuanM/OGQ4NSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubGV0IHBpY28gPSByZXF1aXJlKCdwaWNvY29sb3JzJylcblxubGV0IHRva2VuaXplciA9IHJlcXVpcmUoJy4vdG9rZW5pemUnKVxuXG5sZXQgSW5wdXRcblxuZnVuY3Rpb24gcmVnaXN0ZXJJbnB1dChkZXBlbmRhbnQpIHtcbiAgSW5wdXQgPSBkZXBlbmRhbnRcbn1cblxuY29uc3QgSElHSExJR0hUX1RIRU1FID0ge1xuICAnOyc6IHBpY28ueWVsbG93LFxuICAnOic6IHBpY28ueWVsbG93LFxuICAnKCc6IHBpY28uY3lhbixcbiAgJyknOiBwaWNvLmN5YW4sXG4gICdbJzogcGljby55ZWxsb3csXG4gICddJzogcGljby55ZWxsb3csXG4gICd7JzogcGljby55ZWxsb3csXG4gICd9JzogcGljby55ZWxsb3csXG4gICdhdC13b3JkJzogcGljby5jeWFuLFxuICAnYnJhY2tldHMnOiBwaWNvLmN5YW4sXG4gICdjYWxsJzogcGljby5jeWFuLFxuICAnY2xhc3MnOiBwaWNvLnllbGxvdyxcbiAgJ2NvbW1lbnQnOiBwaWNvLmdyYXksXG4gICdoYXNoJzogcGljby5tYWdlbnRhLFxuICAnc3RyaW5nJzogcGljby5ncmVlblxufVxuXG5mdW5jdGlvbiBnZXRUb2tlblR5cGUoW3R5cGUsIHZhbHVlXSwgcHJvY2Vzc29yKSB7XG4gIGlmICh0eXBlID09PSAnd29yZCcpIHtcbiAgICBpZiAodmFsdWVbMF0gPT09ICcuJykge1xuICAgICAgcmV0dXJuICdjbGFzcydcbiAgICB9XG4gICAgaWYgKHZhbHVlWzBdID09PSAnIycpIHtcbiAgICAgIHJldHVybiAnaGFzaCdcbiAgICB9XG4gIH1cblxuICBpZiAoIXByb2Nlc3Nvci5lbmRPZkZpbGUoKSkge1xuICAgIGxldCBuZXh0ID0gcHJvY2Vzc29yLm5leHRUb2tlbigpXG4gICAgcHJvY2Vzc29yLmJhY2sobmV4dClcbiAgICBpZiAobmV4dFswXSA9PT0gJ2JyYWNrZXRzJyB8fCBuZXh0WzBdID09PSAnKCcpIHJldHVybiAnY2FsbCdcbiAgfVxuXG4gIHJldHVybiB0eXBlXG59XG5cbmZ1bmN0aW9uIHRlcm1pbmFsSGlnaGxpZ2h0KGNzcykge1xuICBsZXQgcHJvY2Vzc29yID0gdG9rZW5pemVyKG5ldyBJbnB1dChjc3MpLCB7IGlnbm9yZUVycm9yczogdHJ1ZSB9KVxuICBsZXQgcmVzdWx0ID0gJydcbiAgd2hpbGUgKCFwcm9jZXNzb3IuZW5kT2ZGaWxlKCkpIHtcbiAgICBsZXQgdG9rZW4gPSBwcm9jZXNzb3IubmV4dFRva2VuKClcbiAgICBsZXQgY29sb3IgPSBISUdITElHSFRfVEhFTUVbZ2V0VG9rZW5UeXBlKHRva2VuLCBwcm9jZXNzb3IpXVxuICAgIGlmIChjb2xvcikge1xuICAgICAgcmVzdWx0ICs9IHRva2VuWzFdXG4gICAgICAgIC5zcGxpdCgvXFxyP1xcbi8pXG4gICAgICAgIC5tYXAoaSA9PiBjb2xvcihpKSlcbiAgICAgICAgLmpvaW4oJ1xcbicpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCArPSB0b2tlblsxXVxuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0XG59XG5cbnRlcm1pbmFsSGlnaGxpZ2h0LnJlZ2lzdGVySW5wdXQgPSByZWdpc3RlcklucHV0XG5cbm1vZHVsZS5leHBvcnRzID0gdGVybWluYWxIaWdobGlnaHRcbiJdLCJuYW1lcyI6WyJwaWNvIiwicmVxdWlyZSIsInRva2VuaXplciIsIklucHV0IiwicmVnaXN0ZXJJbnB1dCIsImRlcGVuZGFudCIsIkhJR0hMSUdIVF9USEVNRSIsInllbGxvdyIsImN5YW4iLCJncmF5IiwibWFnZW50YSIsImdyZWVuIiwiZ2V0VG9rZW5UeXBlIiwidHlwZSIsInZhbHVlIiwicHJvY2Vzc29yIiwiZW5kT2ZGaWxlIiwibmV4dCIsIm5leHRUb2tlbiIsImJhY2siLCJ0ZXJtaW5hbEhpZ2hsaWdodCIsImNzcyIsImlnbm9yZUVycm9ycyIsInJlc3VsdCIsInRva2VuIiwiY29sb3IiLCJzcGxpdCIsIm1hcCIsImkiLCJqb2luIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/terminal-highlight.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/tokenize.js":
/*!**********************************************!*\
  !*** ./node_modules/postcss/lib/tokenize.js ***!
  \**********************************************/
/***/ ((module) => {

eval("\nconst SINGLE_QUOTE = \"'\".charCodeAt(0);\nconst DOUBLE_QUOTE = '\"'.charCodeAt(0);\nconst BACKSLASH = \"\\\\\".charCodeAt(0);\nconst SLASH = \"/\".charCodeAt(0);\nconst NEWLINE = \"\\n\".charCodeAt(0);\nconst SPACE = \" \".charCodeAt(0);\nconst FEED = \"\\f\".charCodeAt(0);\nconst TAB = \"\t\".charCodeAt(0);\nconst CR = \"\\r\".charCodeAt(0);\nconst OPEN_SQUARE = \"[\".charCodeAt(0);\nconst CLOSE_SQUARE = \"]\".charCodeAt(0);\nconst OPEN_PARENTHESES = \"(\".charCodeAt(0);\nconst CLOSE_PARENTHESES = \")\".charCodeAt(0);\nconst OPEN_CURLY = \"{\".charCodeAt(0);\nconst CLOSE_CURLY = \"}\".charCodeAt(0);\nconst SEMICOLON = \";\".charCodeAt(0);\nconst ASTERISK = \"*\".charCodeAt(0);\nconst COLON = \":\".charCodeAt(0);\nconst AT = \"@\".charCodeAt(0);\nconst RE_AT_END = /[\\t\\n\\f\\r \"#'()/;[\\\\\\]{}]/g;\nconst RE_WORD_END = /[\\t\\n\\f\\r !\"#'():;@[\\\\\\]{}]|\\/(?=\\*)/g;\nconst RE_BAD_BRACKET = /.[\\r\\n\"'(/\\\\]/;\nconst RE_HEX_ESCAPE = /[\\da-f]/i;\nmodule.exports = function tokenizer(input, options = {}) {\n    let css = input.css.valueOf();\n    let ignore = options.ignoreErrors;\n    let code, next, quote, content, escape;\n    let escaped, escapePos, prev, n, currentToken;\n    let length = css.length;\n    let pos = 0;\n    let buffer = [];\n    let returned = [];\n    function position() {\n        return pos;\n    }\n    function unclosed(what) {\n        throw input.error(\"Unclosed \" + what, pos);\n    }\n    function endOfFile() {\n        return returned.length === 0 && pos >= length;\n    }\n    function nextToken(opts) {\n        if (returned.length) return returned.pop();\n        if (pos >= length) return;\n        let ignoreUnclosed = opts ? opts.ignoreUnclosed : false;\n        code = css.charCodeAt(pos);\n        switch(code){\n            case NEWLINE:\n            case SPACE:\n            case TAB:\n            case CR:\n            case FEED:\n                {\n                    next = pos;\n                    do {\n                        next += 1;\n                        code = css.charCodeAt(next);\n                    }while (code === SPACE || code === NEWLINE || code === TAB || code === CR || code === FEED);\n                    currentToken = [\n                        \"space\",\n                        css.slice(pos, next)\n                    ];\n                    pos = next - 1;\n                    break;\n                }\n            case OPEN_SQUARE:\n            case CLOSE_SQUARE:\n            case OPEN_CURLY:\n            case CLOSE_CURLY:\n            case COLON:\n            case SEMICOLON:\n            case CLOSE_PARENTHESES:\n                {\n                    let controlChar = String.fromCharCode(code);\n                    currentToken = [\n                        controlChar,\n                        controlChar,\n                        pos\n                    ];\n                    break;\n                }\n            case OPEN_PARENTHESES:\n                {\n                    prev = buffer.length ? buffer.pop()[1] : \"\";\n                    n = css.charCodeAt(pos + 1);\n                    if (prev === \"url\" && n !== SINGLE_QUOTE && n !== DOUBLE_QUOTE && n !== SPACE && n !== NEWLINE && n !== TAB && n !== FEED && n !== CR) {\n                        next = pos;\n                        do {\n                            escaped = false;\n                            next = css.indexOf(\")\", next + 1);\n                            if (next === -1) {\n                                if (ignore || ignoreUnclosed) {\n                                    next = pos;\n                                    break;\n                                } else {\n                                    unclosed(\"bracket\");\n                                }\n                            }\n                            escapePos = next;\n                            while(css.charCodeAt(escapePos - 1) === BACKSLASH){\n                                escapePos -= 1;\n                                escaped = !escaped;\n                            }\n                        }while (escaped);\n                        currentToken = [\n                            \"brackets\",\n                            css.slice(pos, next + 1),\n                            pos,\n                            next\n                        ];\n                        pos = next;\n                    } else {\n                        next = css.indexOf(\")\", pos + 1);\n                        content = css.slice(pos, next + 1);\n                        if (next === -1 || RE_BAD_BRACKET.test(content)) {\n                            currentToken = [\n                                \"(\",\n                                \"(\",\n                                pos\n                            ];\n                        } else {\n                            currentToken = [\n                                \"brackets\",\n                                content,\n                                pos,\n                                next\n                            ];\n                            pos = next;\n                        }\n                    }\n                    break;\n                }\n            case SINGLE_QUOTE:\n            case DOUBLE_QUOTE:\n                {\n                    quote = code === SINGLE_QUOTE ? \"'\" : '\"';\n                    next = pos;\n                    do {\n                        escaped = false;\n                        next = css.indexOf(quote, next + 1);\n                        if (next === -1) {\n                            if (ignore || ignoreUnclosed) {\n                                next = pos + 1;\n                                break;\n                            } else {\n                                unclosed(\"string\");\n                            }\n                        }\n                        escapePos = next;\n                        while(css.charCodeAt(escapePos - 1) === BACKSLASH){\n                            escapePos -= 1;\n                            escaped = !escaped;\n                        }\n                    }while (escaped);\n                    currentToken = [\n                        \"string\",\n                        css.slice(pos, next + 1),\n                        pos,\n                        next\n                    ];\n                    pos = next;\n                    break;\n                }\n            case AT:\n                {\n                    RE_AT_END.lastIndex = pos + 1;\n                    RE_AT_END.test(css);\n                    if (RE_AT_END.lastIndex === 0) {\n                        next = css.length - 1;\n                    } else {\n                        next = RE_AT_END.lastIndex - 2;\n                    }\n                    currentToken = [\n                        \"at-word\",\n                        css.slice(pos, next + 1),\n                        pos,\n                        next\n                    ];\n                    pos = next;\n                    break;\n                }\n            case BACKSLASH:\n                {\n                    next = pos;\n                    escape = true;\n                    while(css.charCodeAt(next + 1) === BACKSLASH){\n                        next += 1;\n                        escape = !escape;\n                    }\n                    code = css.charCodeAt(next + 1);\n                    if (escape && code !== SLASH && code !== SPACE && code !== NEWLINE && code !== TAB && code !== CR && code !== FEED) {\n                        next += 1;\n                        if (RE_HEX_ESCAPE.test(css.charAt(next))) {\n                            while(RE_HEX_ESCAPE.test(css.charAt(next + 1))){\n                                next += 1;\n                            }\n                            if (css.charCodeAt(next + 1) === SPACE) {\n                                next += 1;\n                            }\n                        }\n                    }\n                    currentToken = [\n                        \"word\",\n                        css.slice(pos, next + 1),\n                        pos,\n                        next\n                    ];\n                    pos = next;\n                    break;\n                }\n            default:\n                {\n                    if (code === SLASH && css.charCodeAt(pos + 1) === ASTERISK) {\n                        next = css.indexOf(\"*/\", pos + 2) + 1;\n                        if (next === 0) {\n                            if (ignore || ignoreUnclosed) {\n                                next = css.length;\n                            } else {\n                                unclosed(\"comment\");\n                            }\n                        }\n                        currentToken = [\n                            \"comment\",\n                            css.slice(pos, next + 1),\n                            pos,\n                            next\n                        ];\n                        pos = next;\n                    } else {\n                        RE_WORD_END.lastIndex = pos + 1;\n                        RE_WORD_END.test(css);\n                        if (RE_WORD_END.lastIndex === 0) {\n                            next = css.length - 1;\n                        } else {\n                            next = RE_WORD_END.lastIndex - 2;\n                        }\n                        currentToken = [\n                            \"word\",\n                            css.slice(pos, next + 1),\n                            pos,\n                            next\n                        ];\n                        buffer.push(currentToken);\n                        pos = next;\n                    }\n                    break;\n                }\n        }\n        pos++;\n        return currentToken;\n    }\n    function back(token) {\n        returned.push(token);\n    }\n    return {\n        back,\n        endOfFile,\n        nextToken,\n        position\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/tokenize.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/warn-once.js":
/*!***********************************************!*\
  !*** ./node_modules/postcss/lib/warn-once.js ***!
  \***********************************************/
/***/ ((module) => {

eval("/* eslint-disable no-console */ \nlet printed = {};\nmodule.exports = function warnOnce(message) {\n    if (printed[message]) return;\n    printed[message] = true;\n    if (typeof console !== \"undefined\" && console.warn) {\n        console.warn(message);\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvd2Fybi1vbmNlLmpzIiwibWFwcGluZ3MiOiJBQUFBLDZCQUE2QixHQUM3QjtBQUVBLElBQUlBLFVBQVUsQ0FBQztBQUVmQyxPQUFPQyxPQUFPLEdBQUcsU0FBU0MsU0FBU0MsT0FBTztJQUN4QyxJQUFJSixPQUFPLENBQUNJLFFBQVEsRUFBRTtJQUN0QkosT0FBTyxDQUFDSSxRQUFRLEdBQUc7SUFFbkIsSUFBSSxPQUFPQyxZQUFZLGVBQWVBLFFBQVFDLElBQUksRUFBRTtRQUNsREQsUUFBUUMsSUFBSSxDQUFDRjtJQUNmO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lY29tLy4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MvbGliL3dhcm4tb25jZS5qcz8zOTcxIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbid1c2Ugc3RyaWN0J1xuXG5sZXQgcHJpbnRlZCA9IHt9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gd2Fybk9uY2UobWVzc2FnZSkge1xuICBpZiAocHJpbnRlZFttZXNzYWdlXSkgcmV0dXJuXG4gIHByaW50ZWRbbWVzc2FnZV0gPSB0cnVlXG5cbiAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiBjb25zb2xlLndhcm4pIHtcbiAgICBjb25zb2xlLndhcm4obWVzc2FnZSlcbiAgfVxufVxuIl0sIm5hbWVzIjpbInByaW50ZWQiLCJtb2R1bGUiLCJleHBvcnRzIiwid2Fybk9uY2UiLCJtZXNzYWdlIiwiY29uc29sZSIsIndhcm4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/warn-once.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/warning.js":
/*!*********************************************!*\
  !*** ./node_modules/postcss/lib/warning.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\nclass Warning {\n    constructor(text, opts = {}){\n        this.type = \"warning\";\n        this.text = text;\n        if (opts.node && opts.node.source) {\n            let range = opts.node.rangeBy(opts);\n            this.line = range.start.line;\n            this.column = range.start.column;\n            this.endLine = range.end.line;\n            this.endColumn = range.end.column;\n        }\n        for(let opt in opts)this[opt] = opts[opt];\n    }\n    toString() {\n        if (this.node) {\n            return this.node.error(this.text, {\n                index: this.index,\n                plugin: this.plugin,\n                word: this.word\n            }).message;\n        }\n        if (this.plugin) {\n            return this.plugin + \": \" + this.text;\n        }\n        return this.text;\n    }\n}\nmodule.exports = Warning;\nWarning.default = Warning;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvd2FybmluZy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU1BO0lBQ0pDLFlBQVlDLElBQUksRUFBRUMsT0FBTyxDQUFDLENBQUMsQ0FBRTtRQUMzQixJQUFJLENBQUNDLElBQUksR0FBRztRQUNaLElBQUksQ0FBQ0YsSUFBSSxHQUFHQTtRQUVaLElBQUlDLEtBQUtFLElBQUksSUFBSUYsS0FBS0UsSUFBSSxDQUFDQyxNQUFNLEVBQUU7WUFDakMsSUFBSUMsUUFBUUosS0FBS0UsSUFBSSxDQUFDRyxPQUFPLENBQUNMO1lBQzlCLElBQUksQ0FBQ00sSUFBSSxHQUFHRixNQUFNRyxLQUFLLENBQUNELElBQUk7WUFDNUIsSUFBSSxDQUFDRSxNQUFNLEdBQUdKLE1BQU1HLEtBQUssQ0FBQ0MsTUFBTTtZQUNoQyxJQUFJLENBQUNDLE9BQU8sR0FBR0wsTUFBTU0sR0FBRyxDQUFDSixJQUFJO1lBQzdCLElBQUksQ0FBQ0ssU0FBUyxHQUFHUCxNQUFNTSxHQUFHLENBQUNGLE1BQU07UUFDbkM7UUFFQSxJQUFLLElBQUlJLE9BQU9aLEtBQU0sSUFBSSxDQUFDWSxJQUFJLEdBQUdaLElBQUksQ0FBQ1ksSUFBSTtJQUM3QztJQUVBQyxXQUFXO1FBQ1QsSUFBSSxJQUFJLENBQUNYLElBQUksRUFBRTtZQUNiLE9BQU8sSUFBSSxDQUFDQSxJQUFJLENBQUNZLEtBQUssQ0FBQyxJQUFJLENBQUNmLElBQUksRUFBRTtnQkFDaENnQixPQUFPLElBQUksQ0FBQ0EsS0FBSztnQkFDakJDLFFBQVEsSUFBSSxDQUFDQSxNQUFNO2dCQUNuQkMsTUFBTSxJQUFJLENBQUNBLElBQUk7WUFDakIsR0FBR0MsT0FBTztRQUNaO1FBRUEsSUFBSSxJQUFJLENBQUNGLE1BQU0sRUFBRTtZQUNmLE9BQU8sSUFBSSxDQUFDQSxNQUFNLEdBQUcsT0FBTyxJQUFJLENBQUNqQixJQUFJO1FBQ3ZDO1FBRUEsT0FBTyxJQUFJLENBQUNBLElBQUk7SUFDbEI7QUFDRjtBQUVBb0IsT0FBT0MsT0FBTyxHQUFHdkI7QUFDakJBLFFBQVF3QixPQUFPLEdBQUd4QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Vjb20vLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvd2FybmluZy5qcz9hNGIzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5jbGFzcyBXYXJuaW5nIHtcbiAgY29uc3RydWN0b3IodGV4dCwgb3B0cyA9IHt9KSB7XG4gICAgdGhpcy50eXBlID0gJ3dhcm5pbmcnXG4gICAgdGhpcy50ZXh0ID0gdGV4dFxuXG4gICAgaWYgKG9wdHMubm9kZSAmJiBvcHRzLm5vZGUuc291cmNlKSB7XG4gICAgICBsZXQgcmFuZ2UgPSBvcHRzLm5vZGUucmFuZ2VCeShvcHRzKVxuICAgICAgdGhpcy5saW5lID0gcmFuZ2Uuc3RhcnQubGluZVxuICAgICAgdGhpcy5jb2x1bW4gPSByYW5nZS5zdGFydC5jb2x1bW5cbiAgICAgIHRoaXMuZW5kTGluZSA9IHJhbmdlLmVuZC5saW5lXG4gICAgICB0aGlzLmVuZENvbHVtbiA9IHJhbmdlLmVuZC5jb2x1bW5cbiAgICB9XG5cbiAgICBmb3IgKGxldCBvcHQgaW4gb3B0cykgdGhpc1tvcHRdID0gb3B0c1tvcHRdXG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICBpZiAodGhpcy5ub2RlKSB7XG4gICAgICByZXR1cm4gdGhpcy5ub2RlLmVycm9yKHRoaXMudGV4dCwge1xuICAgICAgICBpbmRleDogdGhpcy5pbmRleCxcbiAgICAgICAgcGx1Z2luOiB0aGlzLnBsdWdpbixcbiAgICAgICAgd29yZDogdGhpcy53b3JkXG4gICAgICB9KS5tZXNzYWdlXG4gICAgfVxuXG4gICAgaWYgKHRoaXMucGx1Z2luKSB7XG4gICAgICByZXR1cm4gdGhpcy5wbHVnaW4gKyAnOiAnICsgdGhpcy50ZXh0XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMudGV4dFxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gV2FybmluZ1xuV2FybmluZy5kZWZhdWx0ID0gV2FybmluZ1xuIl0sIm5hbWVzIjpbIldhcm5pbmciLCJjb25zdHJ1Y3RvciIsInRleHQiLCJvcHRzIiwidHlwZSIsIm5vZGUiLCJzb3VyY2UiLCJyYW5nZSIsInJhbmdlQnkiLCJsaW5lIiwic3RhcnQiLCJjb2x1bW4iLCJlbmRMaW5lIiwiZW5kIiwiZW5kQ29sdW1uIiwib3B0IiwidG9TdHJpbmciLCJlcnJvciIsImluZGV4IiwicGx1Z2luIiwid29yZCIsIm1lc3NhZ2UiLCJtb2R1bGUiLCJleHBvcnRzIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/warning.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/postcss.mjs":
/*!**********************************************!*\
  !*** ./node_modules/postcss/lib/postcss.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AtRule: () => (/* binding */ AtRule),\n/* harmony export */   Comment: () => (/* binding */ Comment),\n/* harmony export */   Container: () => (/* binding */ Container),\n/* harmony export */   CssSyntaxError: () => (/* binding */ CssSyntaxError),\n/* harmony export */   Declaration: () => (/* binding */ Declaration),\n/* harmony export */   Document: () => (/* binding */ Document),\n/* harmony export */   Input: () => (/* binding */ Input),\n/* harmony export */   Node: () => (/* binding */ Node),\n/* harmony export */   Processor: () => (/* binding */ Processor),\n/* harmony export */   Result: () => (/* binding */ Result),\n/* harmony export */   Root: () => (/* binding */ Root),\n/* harmony export */   Rule: () => (/* binding */ Rule),\n/* harmony export */   Warning: () => (/* binding */ Warning),\n/* harmony export */   atRule: () => (/* binding */ atRule),\n/* harmony export */   comment: () => (/* binding */ comment),\n/* harmony export */   decl: () => (/* binding */ decl),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   document: () => (/* binding */ document),\n/* harmony export */   fromJSON: () => (/* binding */ fromJSON),\n/* harmony export */   list: () => (/* binding */ list),\n/* harmony export */   parse: () => (/* binding */ parse),\n/* harmony export */   plugin: () => (/* binding */ plugin),\n/* harmony export */   root: () => (/* binding */ root),\n/* harmony export */   rule: () => (/* binding */ rule),\n/* harmony export */   stringify: () => (/* binding */ stringify)\n/* harmony export */ });\n/* harmony import */ var _postcss_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./postcss.js */ \"(ssr)/./node_modules/postcss/lib/postcss.js\");\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_postcss_js__WEBPACK_IMPORTED_MODULE_0__);\nconst stringify = _postcss_js__WEBPACK_IMPORTED_MODULE_0__.stringify;\nconst fromJSON = _postcss_js__WEBPACK_IMPORTED_MODULE_0__.fromJSON;\nconst plugin = _postcss_js__WEBPACK_IMPORTED_MODULE_0__.plugin;\nconst parse = _postcss_js__WEBPACK_IMPORTED_MODULE_0__.parse;\nconst list = _postcss_js__WEBPACK_IMPORTED_MODULE_0__.list;\nconst document = _postcss_js__WEBPACK_IMPORTED_MODULE_0__.document;\nconst comment = _postcss_js__WEBPACK_IMPORTED_MODULE_0__.comment;\nconst atRule = _postcss_js__WEBPACK_IMPORTED_MODULE_0__.atRule;\nconst rule = _postcss_js__WEBPACK_IMPORTED_MODULE_0__.rule;\nconst decl = _postcss_js__WEBPACK_IMPORTED_MODULE_0__.decl;\nconst root = _postcss_js__WEBPACK_IMPORTED_MODULE_0__.root;\nconst CssSyntaxError = _postcss_js__WEBPACK_IMPORTED_MODULE_0__.CssSyntaxError;\nconst Declaration = _postcss_js__WEBPACK_IMPORTED_MODULE_0__.Declaration;\nconst Container = _postcss_js__WEBPACK_IMPORTED_MODULE_0__.Container;\nconst Processor = _postcss_js__WEBPACK_IMPORTED_MODULE_0__.Processor;\nconst Document = _postcss_js__WEBPACK_IMPORTED_MODULE_0__.Document;\nconst Comment = _postcss_js__WEBPACK_IMPORTED_MODULE_0__.Comment;\nconst Warning = _postcss_js__WEBPACK_IMPORTED_MODULE_0__.Warning;\nconst AtRule = _postcss_js__WEBPACK_IMPORTED_MODULE_0__.AtRule;\nconst Result = _postcss_js__WEBPACK_IMPORTED_MODULE_0__.Result;\nconst Input = _postcss_js__WEBPACK_IMPORTED_MODULE_0__.Input;\nconst Rule = _postcss_js__WEBPACK_IMPORTED_MODULE_0__.Rule;\nconst Root = _postcss_js__WEBPACK_IMPORTED_MODULE_0__.Root;\nconst Node = _postcss_js__WEBPACK_IMPORTED_MODULE_0__.Node;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvcG9zdGNzcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBa0M7QUFFbEMsaUVBQWVBLHdDQUFPQSxFQUFBO0FBRWYsTUFBTUMsWUFBWUQsa0RBQWlCO0FBQ25DLE1BQU1FLFdBQVdGLGlEQUFnQjtBQUNqQyxNQUFNRyxTQUFTSCwrQ0FBYztBQUM3QixNQUFNSSxRQUFRSiw4Q0FBYTtBQUMzQixNQUFNSyxPQUFPTCw2Q0FBWTtBQUV6QixNQUFNTSxXQUFXTixpREFBZ0I7QUFDakMsTUFBTU8sVUFBVVAsZ0RBQWU7QUFDL0IsTUFBTVEsU0FBU1IsK0NBQWM7QUFDN0IsTUFBTVMsT0FBT1QsNkNBQVk7QUFDekIsTUFBTVUsT0FBT1YsNkNBQVk7QUFDekIsTUFBTVcsT0FBT1gsNkNBQVk7QUFFekIsTUFBTVksaUJBQWlCWix1REFBc0I7QUFDN0MsTUFBTWEsY0FBY2Isb0RBQW1CO0FBQ3ZDLE1BQU1jLFlBQVlkLGtEQUFpQjtBQUNuQyxNQUFNZSxZQUFZZixrREFBaUI7QUFDbkMsTUFBTWdCLFdBQVdoQixpREFBZ0I7QUFDakMsTUFBTWlCLFVBQVVqQixnREFBZTtBQUMvQixNQUFNa0IsVUFBVWxCLGdEQUFlO0FBQy9CLE1BQU1tQixTQUFTbkIsK0NBQWM7QUFDN0IsTUFBTW9CLFNBQVNwQiwrQ0FBYztBQUM3QixNQUFNcUIsUUFBUXJCLDhDQUFhO0FBQzNCLE1BQU1zQixPQUFPdEIsNkNBQVk7QUFDekIsTUFBTXVCLE9BQU92Qiw2Q0FBWTtBQUN6QixNQUFNd0IsT0FBT3hCLDZDQUFZIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWNvbS8uL25vZGVfbW9kdWxlcy9wb3N0Y3NzL2xpYi9wb3N0Y3NzLm1qcz80MjkyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwb3N0Y3NzIGZyb20gJy4vcG9zdGNzcy5qcydcblxuZXhwb3J0IGRlZmF1bHQgcG9zdGNzc1xuXG5leHBvcnQgY29uc3Qgc3RyaW5naWZ5ID0gcG9zdGNzcy5zdHJpbmdpZnlcbmV4cG9ydCBjb25zdCBmcm9tSlNPTiA9IHBvc3Rjc3MuZnJvbUpTT05cbmV4cG9ydCBjb25zdCBwbHVnaW4gPSBwb3N0Y3NzLnBsdWdpblxuZXhwb3J0IGNvbnN0IHBhcnNlID0gcG9zdGNzcy5wYXJzZVxuZXhwb3J0IGNvbnN0IGxpc3QgPSBwb3N0Y3NzLmxpc3RcblxuZXhwb3J0IGNvbnN0IGRvY3VtZW50ID0gcG9zdGNzcy5kb2N1bWVudFxuZXhwb3J0IGNvbnN0IGNvbW1lbnQgPSBwb3N0Y3NzLmNvbW1lbnRcbmV4cG9ydCBjb25zdCBhdFJ1bGUgPSBwb3N0Y3NzLmF0UnVsZVxuZXhwb3J0IGNvbnN0IHJ1bGUgPSBwb3N0Y3NzLnJ1bGVcbmV4cG9ydCBjb25zdCBkZWNsID0gcG9zdGNzcy5kZWNsXG5leHBvcnQgY29uc3Qgcm9vdCA9IHBvc3Rjc3Mucm9vdFxuXG5leHBvcnQgY29uc3QgQ3NzU3ludGF4RXJyb3IgPSBwb3N0Y3NzLkNzc1N5bnRheEVycm9yXG5leHBvcnQgY29uc3QgRGVjbGFyYXRpb24gPSBwb3N0Y3NzLkRlY2xhcmF0aW9uXG5leHBvcnQgY29uc3QgQ29udGFpbmVyID0gcG9zdGNzcy5Db250YWluZXJcbmV4cG9ydCBjb25zdCBQcm9jZXNzb3IgPSBwb3N0Y3NzLlByb2Nlc3NvclxuZXhwb3J0IGNvbnN0IERvY3VtZW50ID0gcG9zdGNzcy5Eb2N1bWVudFxuZXhwb3J0IGNvbnN0IENvbW1lbnQgPSBwb3N0Y3NzLkNvbW1lbnRcbmV4cG9ydCBjb25zdCBXYXJuaW5nID0gcG9zdGNzcy5XYXJuaW5nXG5leHBvcnQgY29uc3QgQXRSdWxlID0gcG9zdGNzcy5BdFJ1bGVcbmV4cG9ydCBjb25zdCBSZXN1bHQgPSBwb3N0Y3NzLlJlc3VsdFxuZXhwb3J0IGNvbnN0IElucHV0ID0gcG9zdGNzcy5JbnB1dFxuZXhwb3J0IGNvbnN0IFJ1bGUgPSBwb3N0Y3NzLlJ1bGVcbmV4cG9ydCBjb25zdCBSb290ID0gcG9zdGNzcy5Sb290XG5leHBvcnQgY29uc3QgTm9kZSA9IHBvc3Rjc3MuTm9kZVxuIl0sIm5hbWVzIjpbInBvc3Rjc3MiLCJzdHJpbmdpZnkiLCJmcm9tSlNPTiIsInBsdWdpbiIsInBhcnNlIiwibGlzdCIsImRvY3VtZW50IiwiY29tbWVudCIsImF0UnVsZSIsInJ1bGUiLCJkZWNsIiwicm9vdCIsIkNzc1N5bnRheEVycm9yIiwiRGVjbGFyYXRpb24iLCJDb250YWluZXIiLCJQcm9jZXNzb3IiLCJEb2N1bWVudCIsIkNvbW1lbnQiLCJXYXJuaW5nIiwiQXRSdWxlIiwiUmVzdWx0IiwiSW5wdXQiLCJSdWxlIiwiUm9vdCIsIk5vZGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/postcss.mjs\n");

/***/ })

};
;